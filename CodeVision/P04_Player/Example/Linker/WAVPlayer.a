;//Programa base que reproduce un WAV llamada A001.wav
;//cuyas características son: PCM, 22050 Hz de frecuencia de muestreo,
;//8 bits por muestra y monoaural
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <ff.h>
;
;
;char bufferL[256];
;char bufferH[256];
;char NombreArchivo[13];
;unsigned int i=0;
;bit LeerBufferH,LeerBufferL;
;unsigned long muestras;
;
;unsigned int  br;
;
;/* FAT function result */
;FRESULT res;
;
;/* will hold the information for logical drive 0: */
;FATFS drive;
;FIL archivo; // file objects
;
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 001C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001D disk_timerproc();
;PCODE: $0000000F VOL: 0
; 0000 001E /* MMC/SD/SD HC card access low level timing function */
; 0000 001F }
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;
;//Interrupción que se ejecuta cada T=1/Fmuestreo_Wav
;interrupt [TIM2_COMPA] void timer2_compa_isr(void)
; 0000 0023 {
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0024     if (i<256)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0025       OCR0A=bufferL[i++];
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0026     else
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0027     {
; 0000 0028       OCR0A=bufferH[i-256];
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0029       i++;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 002A     }
;PCODE: $0000002B VOL: 0
; 0000 002B     if (i==256)
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 002C        LeerBufferL=1;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 002D     if (i==512)
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 002E     {
; 0000 002F        LeerBufferH=1;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0030        i=0;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0031     }
; 0000 0032 }
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;
;void TocaCancion(unsigned char NombreCancion[])
; 0000 0035 {
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0036         res = f_open(&archivo, NombreCancion, FA_OPEN_EXISTING | FA_READ);
;PCODE: $0000003F VOL: 0
;	NombreCancion -> Y+0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0037         if (res==FR_OK){
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0038 
; 0000 0039             PORTD.6=1;  //Prende Led
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 003A 
; 0000 003B 
; 0000 003C             f_read(&archivo, bufferL, 44,&br); //leer encabezado
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 003D             muestras=(long)bufferL[43]*16777216+(long)bufferL[42]*65536+(long)bufferL[41]*256+bufferL[40];  //obtener nú ...
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 003E 
; 0000 003F             f_read(&archivo, bufferL, 256,&br); //leer los primeros 512 bytes del WAV
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0040             muestras=muestras-br;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0041             f_read(&archivo, bufferH, 256,&br);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0042             muestras=muestras-br;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0043             LeerBufferL=0;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0044             LeerBufferH=0;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0045             TCCR0A=0x83;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0046             TCCR0B=0x01;    //Prende sonido
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0047             i=0;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0048             do{
;PCODE: $00000096 VOL: 0
; 0000 0049                  while((LeerBufferH==0)&&(LeerBufferL==0));
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 004A                  if (LeerBufferL)
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 004B                  {
; 0000 004C                      f_read(&archivo, bufferL, 256,&br);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 004D                      LeerBufferL=0;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 004E                      muestras=muestras-br;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 004F                  }
; 0000 0050                  else
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0051                  {
; 0000 0052                      f_read(&archivo, bufferH, 256,&br);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0053                      LeerBufferH=0;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0054                      muestras=muestras-br;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0055                  }
;PCODE: $000000C7 VOL: 0
; 0000 0056                  if (PINF.7==0)     //botón de Foward
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0057                      muestras=0;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0058             }while(muestras>256);
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0059             TCCR0A=0x00;  //Apaga sonido
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 005A             TCCR0B=0x00;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 005B             PORTB.7=0;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 005C             f_close(&archivo);
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 005D             PORTD.6=0;  //Apaga Led
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 005E             }
; 0000 005F }
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;
;
;void main()
; 0000 0063 {
;PCODE: $000000E2 VOL: 0
; 0000 0064 
; 0000 0065     CLKPR=0x80;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0066     CLKPR=0x00;  //Micro físico a correr a 16MHz
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0067 
; 0000 0068     DDRB.7=1;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0069     DDRD.6=1;    //Led Teensy
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 006A     PORTF.7=1;   //Pull-up
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 006B 
; 0000 006C     //Interrupción cada 10ms para SD (oscilador de 16MHz)
; 0000 006D     TCCR1B=0x0A;        //CK/8 (periodo timer = 0.5 useg)
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 006E     OCR1AH=19999/256;   // 20000 cuentas x0.5useg=10mseg
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 006F     OCR1AL=19999%256;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0070     TIMSK1=0x02;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0071 
; 0000 0072     TCCR0A=0x83;    //Salida de Fast PWM en OC0A
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0073 
; 0000 0074     TCCR2A=0x02;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0075     TCCR2B=0x02;   // CK/8
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0076     OCR2A=90;      //Interrupción periódica cada 1/22050 seg (perido de muestreo)
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0077 
; 0000 0078     // Timer/Counter 2 Interrupt(s) initialization
; 0000 0079     TIMSK2=0x02;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 007A 
; 0000 007B     #asm("sei")
;PCODE: $000000FF VOL: 0
	sei
;PCODE: $00000100 VOL: 0
; 0000 007C     disk_initialize(0);  /* Inicia el puerto SPI para la SD */
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 007D     delay_ms(500);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 007E 
; 0000 007F     sprintf(NombreArchivo,"0:A001.wav");
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0080     /* mount logical drive 0: */
; 0000 0081     if ((res=f_mount(0,&drive))==FR_OK){
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0082 
; 0000 0083         TocaCancion(NombreArchivo);
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0084 
; 0000 0085 
; 0000 0086         }
; 0000 0087         f_mount(0, 0); //Cerrar drive de SD
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0088     while(1);
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 0089 
; 0000 008A 
; 0000 008B 
; 0000 008C 
; 0000 008D     f_mount(0, 0); //Cerrar drive de SD
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 008E     while(1);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 008F }
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0

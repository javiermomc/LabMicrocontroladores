
AVRASM ver. 2.1.30  C:\Users\980006738\Documents\Semestre 8\Lab de Micros\Practica 1\LabMicrocontroladores-master\CodeVision\P01_Alarma\Debug\List\alarma.asm Mon Feb 17 14:54:31 2020

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : AT90USB1286
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 2048 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: Off
                 ;Smart register allocation: Off
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME AT90USB1286
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 8192
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR1A=0xC8
                 	.EQU UDR1=0xCE
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x20FF
                 	.EQU __DSTACK_SIZE=0x0800
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 006f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
000046 940c 0000 	JMP  0x00
000048 940c 0000 	JMP  0x00
00004a 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00004c 2710
00004d 03e8
00004e 0064
00004f 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000050 0001      	.DB  0x1,0x0
                 _tbl16_G101:
000051 1000
000052 0100
000053 0010
000054 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000055 0303
000056 0203
000057 0c02
000058 0800      	.DB  0x3,0x3,0x3,0x2,0x2,0xC,0x0,0x8
000059 0100
00005a 0600      	.DB  0x0,0x1,0x0,0x6
                 _0x0:
00005b 3a48
00005c 3025
00005d 6932
00005e 253a      	.DB  0x48,0x3A,0x25,0x30,0x32,0x69,0x3A,0x25
00005f 3230
000060 3a69
000061 3025
000062 6932      	.DB  0x30,0x32,0x69,0x3A,0x25,0x30,0x32,0x69
000063 5420
000064 253a
000065 3230
000066 0069      	.DB  0x20,0x54,0x3A,0x25,0x30,0x32,0x69,0x0
000067 3a41
000068 2520
000069 3230
00006a 3a69      	.DB  0x41,0x3A,0x20,0x25,0x30,0x32,0x69,0x3A
00006b 3025
00006c 6932
00006d 2020
00006e 0020      	.DB  0x25,0x30,0x32,0x69,0x20,0x20,0x20,0x0
                 __RESET:
00006f 94f8      	CLI
000070 27ee      	CLR  R30
000071 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000072 e0f1      	LDI  R31,1
000073 bff5      	OUT  MCUCR,R31
000074 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000075 e08d      	LDI  R24,(14-2)+1
000076 e0a2      	LDI  R26,2
000077 27bb      	CLR  R27
                 __CLEAR_REG:
000078 93ed      	ST   X+,R30
000079 958a      	DEC  R24
00007a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00007b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00007c e290      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00007d e0a0      	LDI  R26,LOW(__SRAM_START)
00007e e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00007f 93ed      	ST   X+,R30
000080 9701      	SBIW R24,1
000081 f7e9      	BRNE __CLEAR_SRAM
                 
000082 bf8b      	OUT  RAMPZ,R24
                 
                 ;GPIOR0 INITIALIZATION
000083 e0e0      	LDI  R30,__GPIOR0_INIT
000084 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000085 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000086 bfed      	OUT  SPL,R30
000087 e2e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000088 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000089 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008a e0d9      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008b 940c 0224 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x900
                 
                 	.CSEG
                 ;/*
                 ; * alarma.c
                 ; *
                 ; * Created: 11-Feb-20 5:39:55 PM
                 ; * Author: javie
                 ; */
                 ;
                 ;// LCD config
                 ;#asm
                     .equ __lcd_port=0x11
                     .equ __lcd_EN=4
                     .equ __lcd_RS=5
                     .equ __lcd_D4=0
                     .equ __lcd_D5=1
                     .equ __lcd_D6=2
                     .equ __lcd_D7=3
                 ; 0000 0011 #endasm
                 ;
                 ;// DS1302 config
                 ;#asm
                 	.equ __ds1302_port=0x0B
                 	.equ __ds1302_io=2
                 	.equ __ds1302_sclk=1
                 	.equ __ds1302_rst=0
                 ; 0000 0019 #endasm
                 ;
                 ;#include <90usb1286.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <ds1302.h>
                 ;#include <display.h>
                 
                 	.CSEG
                 _SetupLCD:
                 ; .FSTART _SetupLCD
00008d 972c      	SBIW R28,12
00008e e08c      	LDI  R24,12
00008f e0a0      	LDI  R26,LOW(0)
000090 e0b0      	LDI  R27,HIGH(0)
000091 eaea      	LDI  R30,LOW(_0x3*2)
000092 e0f0      	LDI  R31,HIGH(_0x3*2)
000093 940e 0834 	CALL __INITLOCB
000095 930a      	ST   -Y,R16
                 ;	TableSetup -> Y+1
                 ;	i -> R16
                 ; 0000 001D     SBI __lcd_port-1,__lcd_EN
000096 9a84          SBI __lcd_port-1,__lcd_EN
000097 9a85          SBI __lcd_port-1,__lcd_RS
000098 9a80          SBI __lcd_port-1,__lcd_D4
000099 9a81          SBI __lcd_port-1,__lcd_D5
00009a 9a82          SBI __lcd_port-1,__lcd_D6
00009b 9a83          SBI __lcd_port-1,__lcd_D7
00009c e3a2      	LDI  R26,LOW(50)
00009d e0b0      	LDI  R27,0
00009e 940e 0603 	CALL _delay_ms
0000a0 e000      	LDI  R16,LOW(0)
                 _0x5:
0000a1 300c      	CPI  R16,12
0000a2 f468      	BRSH _0x6
0000a3 940e 058b 	CALL SUBOPT_0x0
0000a5 2fe0      	MOV  R30,R16
0000a6 e0f0      	LDI  R31,0
0000a7 01de      	MOVW R26,R28
0000a8 9611      	ADIW R26,1
0000a9 0fae      	ADD  R26,R30
0000aa 1fbf      	ADC  R27,R31
0000ab 91ac      	LD   R26,X
0000ac 940e 058f 	CALL SUBOPT_0x1
0000ae 5f0f      	SUBI R16,-1
0000af cff1      	RJMP _0x5
                 _0x6:
0000b0 e0ec      	LDI  R30,LOW(12)
0000b1 93e0 0900 	STS  _cursor,R30
0000b3 91a0 0900 	LDS  R26,_cursor
0000b5 d021      	RCALL _WriteComandLCD
0000b6 8108      	LDD  R16,Y+0
0000b7 962d      	ADIW R28,13
0000b8 9508      	RET
                 ; .FEND
                 _PulseEn:
                 ; .FSTART _PulseEn
0000b9 9a8c          SBI __lcd_port,__lcd_EN  // EN=1;
0000ba 988c          CBI __lcd_port,__lcd_EN // EN=0;
0000bb 9508      	RET
                 ; .FEND
                 _SendDataBitsLCD:
                 ; .FSTART _SendDataBitsLCD
0000bc 93aa      	ST   -Y,R26
                 ;	dato -> Y+0
0000bd 81e8      	LD   R30,Y
0000be 70e8      	ANDI R30,LOW(0x8)
0000bf f011      	BREQ _0x7
0000c0 9a8b      	SBI __lcd_port,__lcd_D7
0000c1 c001      	RJMP _0x8
                 _0x7:
0000c2 988b      	CBI __lcd_port,__lcd_D7
                 _0x8:
0000c3 81e8      	LD   R30,Y
0000c4 70e4      	ANDI R30,LOW(0x4)
0000c5 f011      	BREQ _0x9
0000c6 9a8a      	SBI __lcd_port,__lcd_D6
0000c7 c001      	RJMP _0xA
                 _0x9:
0000c8 988a      	CBI __lcd_port,__lcd_D6
                 _0xA:
0000c9 81e8      	LD   R30,Y
0000ca 70e2      	ANDI R30,LOW(0x2)
0000cb f011      	BREQ _0xB
0000cc 9a89      	SBI __lcd_port,__lcd_D5
0000cd c001      	RJMP _0xC
                 _0xB:
0000ce 9889      	CBI __lcd_port,__lcd_D5
                 _0xC:
0000cf 81e8      	LD   R30,Y
0000d0 70e1      	ANDI R30,LOW(0x1)
0000d1 f011      	BREQ _0xD
0000d2 9a88      	SBI __lcd_port,__lcd_D4
0000d3 c001      	RJMP _0xE
                 _0xD:
0000d4 9888      	CBI __lcd_port,__lcd_D4
                 _0xE:
0000d5 940c 034e 	JMP  _0x20A0005
                 ; .FEND
                 _WriteComandLCD:
                 ; .FSTART _WriteComandLCD
0000d7 93aa      	ST   -Y,R26
0000d8 930a      	ST   -Y,R16
                 ;	Comando -> Y+1
                 ;	tempComando -> R16
0000d9 988d      	CBI __lcd_port,__lcd_RS
0000da 940e 058b 	CALL SUBOPT_0x0
0000dc 940e 0593 	CALL SUBOPT_0x2
0000de 940e 059a 	CALL SUBOPT_0x3
0000e0 dfd8      	RCALL _PulseEn
0000e1 8108      	LDD  R16,Y+0
0000e2 940c 035b 	JMP  _0x20A0004
                 ; .FEND
                 _CharLCD:
                 ; .FSTART _CharLCD
0000e4 93aa      	ST   -Y,R26
0000e5 930a      	ST   -Y,R16
                 ;	dato -> Y+1
                 ;	tempdato -> R16
0000e6 9a8d      	SBI __lcd_port,__lcd_RS
0000e7 940e 058b 	CALL SUBOPT_0x0
0000e9 940e 0593 	CALL SUBOPT_0x2
0000eb 940e 059a 	CALL SUBOPT_0x3
0000ed dfcb      	RCALL _PulseEn
0000ee 8108      	LDD  R16,Y+0
0000ef 940c 035b 	JMP  _0x20A0004
                 ; .FEND
                 ;	i -> R16
                 ;	tiempo -> Y+1
                 ;	i -> R16
                 _StringLCDVar:
                 ; .FSTART _StringLCDVar
0000f1 93ba      	ST   -Y,R27
0000f2 93aa      	ST   -Y,R26
0000f3 930a      	ST   -Y,R16
                 ;	Mensaje -> Y+1
                 ;	i -> R16
0000f4 e000      	LDI  R16,LOW(0)
                 _0x16:
0000f5 2fe0      	MOV  R30,R16
0000f6 5f0f      	SUBI R16,-1
0000f7 81a9      	LDD  R26,Y+1
0000f8 81ba      	LDD  R27,Y+1+1
0000f9 e0f0      	LDI  R31,0
0000fa 0fae      	ADD  R26,R30
0000fb 1fbf      	ADC  R27,R31
0000fc 91ac      	LD   R26,X
0000fd dfe6      	RCALL _CharLCD
0000fe 81a9      	LDD  R26,Y+1
0000ff 81ba      	LDD  R27,Y+1+1
000100 27ee      	CLR  R30
000101 0fa0      	ADD  R26,R16
000102 1fbe      	ADC  R27,R30
000103 91ec      	LD   R30,X
000104 30e0      	CPI  R30,0
000105 f779      	BRNE _0x16
000106 8108      	LDD  R16,Y+0
000107 940c 03b1 	JMP  _0x20A0003
                 ; .FEND
                 _MoveCursor:
                 ; .FSTART _MoveCursor
000109 93aa      	ST   -Y,R26
                 ;	x -> Y+1
                 ;	y -> Y+0
00010a 81e8      	LD   R30,Y
00010b e0f0      	LDI  R31,0
00010c 9730      	SBIW R30,0
00010d f419      	BRNE _0x1B
00010e 81a9      	LDD  R26,Y+1
00010f 58a0      	SUBI R26,-LOW(128)
000110 c014      	RJMP _0x4F
                 _0x1B:
000111 30e1      	CPI  R30,LOW(0x1)
000112 e0a0      	LDI  R26,HIGH(0x1)
000113 07fa      	CPC  R31,R26
000114 f419      	BRNE _0x1C
000115 81a9      	LDD  R26,Y+1
000116 54a0      	SUBI R26,-LOW(192)
000117 c00d      	RJMP _0x4F
                 _0x1C:
000118 30e2      	CPI  R30,LOW(0x2)
000119 e0a0      	LDI  R26,HIGH(0x2)
00011a 07fa      	CPC  R31,R26
00011b f419      	BRNE _0x1D
00011c 81a9      	LDD  R26,Y+1
00011d 56ac      	SUBI R26,-LOW(148)
00011e c006      	RJMP _0x4F
                 _0x1D:
00011f 30e3      	CPI  R30,LOW(0x3)
000120 e0a0      	LDI  R26,HIGH(0x3)
000121 07fa      	CPC  R31,R26
000122 f419      	BRNE _0x1A
000123 81a9      	LDD  R26,Y+1
000124 52ac      	SUBI R26,-LOW(212)
                 _0x4F:
000125 dfb1      	RCALL _WriteComandLCD
                 _0x1A:
000126 940c 035b 	JMP  _0x20A0004
                 ; .FEND
                 ;	NoCaracter -> Y+3
                 ;	datos -> Y+1
                 ;	i -> R16
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;// Alarm
                 ;
                 ;unsigned char alarmFlag; // Alarm flag to turn alarm on and off
                 ;eeprom unsigned char AH, AM; // Variables for alarm on EEPROM
                 ;
                 ;unsigned char H=0,M=0,S=0; // Variables for clock
                 ;
                 ;unsigned char time[16];
                 ;
                 ;// ADC
                 ;
                 ;// ADC variables
                 ;float temperature;
                 ;unsigned int Temp;
                 ;
                 ;// Voltage Reference: Int., cap. on AREF
                 ;#define ADC_VREF_TYPE ((1<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0035 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0036 ADMUX=adc_input | ADC_VREF_TYPE;
000128 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000129 81e8      	LD   R30,Y
00012a 6ce0      	ORI  R30,LOW(0xC0)
00012b 93e0 007c 	STS  124,R30
                 ; 0000 0037 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0038 delay_us(10);
                +
00012d e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00012e 958a     +DEC R24
00012f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0039 // Start the AD conversion
                 ; 0000 003A ADCSRA|=(1<<ADSC);
000130 91e0 007a 	LDS  R30,122
000132 64e0      	ORI  R30,0x40
000133 93e0 007a 	STS  122,R30
                 ; 0000 003B // Wait for the AD conversion to complete
                 ; 0000 003C while ((ADCSRA & (1<<ADIF))==0);
                 _0x22:
000135 91e0 007a 	LDS  R30,122
000137 71e0      	ANDI R30,LOW(0x10)
000138 f3e1      	BREQ _0x22
                 ; 0000 003D ADCSRA|=(1<<ADIF);
000139 91e0 007a 	LDS  R30,122
00013b 61e0      	ORI  R30,0x10
00013c 93e0 007a 	STS  122,R30
                 ; 0000 003E return ADCW;
00013e 91e0 0078 	LDS  R30,120
000140 91f0 0079 	LDS  R31,120+1
000142 940c 034e 	JMP  _0x20A0005
                 ; 0000 003F }
                 ; .FEND
                 ;
                 ;
                 ;// Update ADC function
                 ;void updateADC(){
                 ; 0000 0043 void updateADC(){
                 _updateADC:
                 ; .FSTART _updateADC
                 ; 0000 0044     // Convert ADC values to temperature
                 ; 0000 0045     temperature = (read_adc(7)*256.0)/1024.0; // Agus nos dio esta funcion
000144 e0a7      	LDI  R26,LOW(7)
000145 dfe2      	RCALL _read_adc
000146 2766      	CLR  R22
000147 2777      	CLR  R23
000148 940e 0673 	CALL __CDF1
                +
00014a e0a0     +LDI R26 , LOW ( 0x43800000 )
00014b e0b0     +LDI R27 , HIGH ( 0x43800000 )
00014c e880     +LDI R24 , BYTE3 ( 0x43800000 )
00014d e493     +LDI R25 , BYTE4 ( 0x43800000 )
                 	__GETD2N 0x43800000
00014e 940e 06f8 	CALL __MULF12
000150 01df      	MOVW R26,R30
000151 01cb      	MOVW R24,R22
                +
000152 e0e0     +LDI R30 , LOW ( 0x44800000 )
000153 e0f0     +LDI R31 , HIGH ( 0x44800000 )
000154 e860     +LDI R22 , BYTE3 ( 0x44800000 )
000155 e474     +LDI R23 , BYTE4 ( 0x44800000 )
                 	__GETD1N 0x44800000
000156 940e 0746 	CALL __DIVF21
000158 93e0 0915 	STS  _temperature,R30
00015a 93f0 0916 	STS  _temperature+1,R31
00015c 9360 0917 	STS  _temperature+2,R22
00015e 9370 0918 	STS  _temperature+3,R23
                 ; 0000 0046     Temp = temperature;
000160 e1a9      	LDI  R26,LOW(_Temp)
000161 e0b9      	LDI  R27,HIGH(_Temp)
000162 940e 063a 	CALL __CFD1U
000164 93ed      	ST   X+,R30
000165 93fc      	ST   X,R31
                 ; 0000 0047     // TEMPORAL print statement for DEV purposes only
                 ; 0000 0048 }
000166 9508      	RET
                 ; .FEND
                 ;
                 ;// Counter
                 ;unsigned char i=0, j=0;
                 ;
                 ;// Tone
                 ;// Play frequency function
                 ;void tono(float freq){
                 ; 0000 004F void tono(float freq){
                 _tono:
                 ; .FSTART _tono
                 ; 0000 0050     if(freq == 0)
000167 940e 07f3 	CALL __PUTPARD2
                 ;	freq -> Y+0
000169 940e 07e9 	CALL __GETD1S0
00016b 940e 0822 	CALL __CPD10
00016d f421      	BRNE _0x25
                 ; 0000 0051         TCCR1B=0x00;
00016e e0e0      	LDI  R30,LOW(0)
00016f 93e0 0081 	STS  129,R30
                 ; 0000 0052     else{
000171 c042      	RJMP _0x26
                 _0x25:
                 ; 0000 0053         float cuentas;
                 ; 0000 0054         unsigned int cuentasEnt;
                 ; 0000 0055 
                 ; 0000 0056         cuentas = 500000.0/freq;
000172 9726      	SBIW R28,6
                 ;	freq -> Y+6
                 ;	cuentas -> Y+2
                 ;	cuentasEnt -> Y+0
                +
000173 81ee     +LDD R30 , Y + 6
000174 81ff     +LDD R31 , Y + 6 + 1
000175 8568     +LDD R22 , Y + 6 + 2
000176 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
000177 e0a0     +LDI R26 , LOW ( 0x48F42400 )
000178 e2b4     +LDI R27 , HIGH ( 0x48F42400 )
000179 ef84     +LDI R24 , BYTE3 ( 0x48F42400 )
00017a e498     +LDI R25 , BYTE4 ( 0x48F42400 )
                 	__GETD2N 0x48F42400
00017b 940e 0746 	CALL __DIVF21
                +
00017d 83ea     +STD Y + 2 , R30
00017e 83fb     +STD Y + 2 + 1 , R31
00017f 836c     +STD Y + 2 + 2 , R22
000180 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 0057         cuentasEnt = cuentas;
000181 01de      	MOVW R26,R28
000182 940e 063a 	CALL __CFD1U
000184 93ed      	ST   X+,R30
000185 93fc      	ST   X,R31
                 ; 0000 0058         if(cuentas-cuentasEnt>=0.5)
000186 81e8      	LD   R30,Y
000187 81f9      	LDD  R31,Y+1
                +
000188 81aa     +LDD R26 , Y + 2
000189 81bb     +LDD R27 , Y + 2 + 1
00018a 818c     +LDD R24 , Y + 2 + 2
00018b 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
00018c 2766      	CLR  R22
00018d 2777      	CLR  R23
00018e 940e 0673 	CALL __CDF1
000190 940e 07f8 	CALL __SWAPD12
000192 940e 06a6 	CALL __SUBF12
000194 01df      	MOVW R26,R30
000195 01cb      	MOVW R24,R22
                +
000196 e0e0     +LDI R30 , LOW ( 0x3F000000 )
000197 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
000198 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
000199 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
00019a 940e 078b 	CALL __CMPF12
00019c f028      	BRLO _0x27
                 ; 0000 0059             cuentasEnt++;
00019d 81e8      	LD   R30,Y
00019e 81f9      	LDD  R31,Y+1
00019f 9631      	ADIW R30,1
0001a0 83e8      	ST   Y,R30
0001a1 83f9      	STD  Y+1,R31
                 ; 0000 005A         OCR1AH=(cuentasEnt-1)/256;
                 _0x27:
0001a2 81e8      	LD   R30,Y
0001a3 81f9      	LDD  R31,Y+1
0001a4 9731      	SBIW R30,1
0001a5 2fef      	MOV  R30,R31
0001a6 e0f0      	LDI  R31,0
0001a7 93e0 0089 	STS  137,R30
                 ; 0000 005B         OCR1AL=(cuentasEnt-1)%256;
0001a9 81e8      	LD   R30,Y
0001aa 50e1      	SUBI R30,LOW(1)
0001ab 93e0 0088 	STS  136,R30
                 ; 0000 005C         TCCR1A=0x40;    // Timer 1 en modo de CTC
0001ad e4e0      	LDI  R30,LOW(64)
0001ae 93e0 0080 	STS  128,R30
                 ; 0000 005D         TCCR1B=0x09;    // Timer en CK (sin pre-escalador)
0001b0 e0e9      	LDI  R30,LOW(9)
0001b1 93e0 0081 	STS  129,R30
                 ; 0000 005E     }
0001b3 9626      	ADIW R28,6
                 _0x26:
                 ; 0000 005F }
0001b4 9624      	ADIW R28,4
0001b5 9508      	RET
                 ; .FEND
                 ;
                 ;int k=0;
                 ;char kFlag=0;
                 ;
                 ;// Play tone or song function
                 ;void playTone(){
                 ; 0000 0065 void playTone(){
                 _playTone:
                 ; .FSTART _playTone
                 ; 0000 0066     tono(k);
0001b6 940e 05a1 	CALL SUBOPT_0x4
0001b8 940e 07bb 	CALL __CWD1
0001ba 940e 0673 	CALL __CDF1
0001bc 01df      	MOVW R26,R30
0001bd 01cb      	MOVW R24,R22
0001be dfa8      	RCALL _tono
                 ; 0000 0067     if(kFlag==0)
0001bf 91e0 091f 	LDS  R30,_kFlag
0001c1 30e0      	CPI  R30,0
0001c2 f421      	BRNE _0x28
                 ; 0000 0068         k+=50;
0001c3 940e 05a1 	CALL SUBOPT_0x4
0001c5 96f2      	ADIW R30,50
0001c6 c003      	RJMP _0x50
                 ; 0000 0069     else
                 _0x28:
                 ; 0000 006A         k-=50;
0001c7 940e 05a1 	CALL SUBOPT_0x4
0001c9 97f2      	SBIW R30,50
                 _0x50:
0001ca 93e0 091d 	STS  _k,R30
0001cc 93f0 091e 	STS  _k+1,R31
                 ; 0000 006B     if(k>500)
0001ce 91a0 091d 	LDS  R26,_k
0001d0 91b0 091e 	LDS  R27,_k+1
0001d2 3fa5      	CPI  R26,LOW(0x1F5)
0001d3 e0e1      	LDI  R30,HIGH(0x1F5)
0001d4 07be      	CPC  R27,R30
0001d5 f014      	BRLT _0x2A
                 ; 0000 006C         kFlag=1;
0001d6 e0e1      	LDI  R30,LOW(1)
0001d7 c007      	RJMP _0x51
                 ; 0000 006D     else if (k<=50)
                 _0x2A:
0001d8 91a0 091d 	LDS  R26,_k
0001da 91b0 091e 	LDS  R27,_k+1
0001dc 97d3      	SBIW R26,51
0001dd f41c      	BRGE _0x2C
                 ; 0000 006E         kFlag=0;
0001de e0e0      	LDI  R30,LOW(0)
                 _0x51:
0001df 93e0 091f 	STS  _kFlag,R30
                 ; 0000 006F }
                 _0x2C:
0001e1 9508      	RET
                 ; .FEND
                 ;
                 ;// LCD
                 ;void printTime(){
                 ; 0000 0072 void printTime(){
                 _printTime:
                 ; .FSTART _printTime
                 ; 0000 0073     sprintf(time, "H:%02i:%02i:%02i T:%02i", H, M, S, Temp);
0001e2 e0e5      	LDI  R30,LOW(_time)
0001e3 e0f9      	LDI  R31,HIGH(_time)
0001e4 93fa      	ST   -Y,R31
0001e5 93ea      	ST   -Y,R30
                +
0001e6 ebe6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001e7 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001e8 93fa      	ST   -Y,R31
0001e9 93ea      	ST   -Y,R30
0001ea 91e0 0902 	LDS  R30,_H
0001ec 940e 05a6 	CALL SUBOPT_0x5
0001ee 91e0 0903 	LDS  R30,_M
0001f0 940e 05a6 	CALL SUBOPT_0x5
0001f2 91e0 0904 	LDS  R30,_S
0001f4 940e 05a6 	CALL SUBOPT_0x5
0001f6 91e0 0919 	LDS  R30,_Temp
0001f8 91f0 091a 	LDS  R31,_Temp+1
0001fa 2766      	CLR  R22
0001fb 2777      	CLR  R23
0001fc 940e 07ee 	CALL __PUTPARD1
0001fe e180      	LDI  R24,16
0001ff 940e 0527 	CALL _sprintf
000201 9664      	ADIW R28,20
                 ; 0000 0074     MoveCursor(0,0);
000202 e0e0      	LDI  R30,LOW(0)
000203 93ea      	ST   -Y,R30
000204 e0a0      	LDI  R26,LOW(0)
000205 940e 05ac 	CALL SUBOPT_0x6
                 ; 0000 0075     StringLCDVar(time);
                 ; 0000 0076     sprintf(time, "A: %02i:%02i   ", AH, AM);
000207 e0e5      	LDI  R30,LOW(_time)
000208 e0f9      	LDI  R31,HIGH(_time)
000209 93fa      	ST   -Y,R31
00020a 93ea      	ST   -Y,R30
                +
00020b ecee     +LDI R30 , LOW ( 2 * _0x0 + ( 24 ) )
00020c e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 24 ) )
                 	__POINTW1FN _0x0,24
00020d 93fa      	ST   -Y,R31
00020e 93ea      	ST   -Y,R30
00020f 940e 05b2 	CALL SUBOPT_0x7
000211 940e 05a6 	CALL SUBOPT_0x5
000213 940e 05b7 	CALL SUBOPT_0x8
000215 940e 05a6 	CALL SUBOPT_0x5
000217 e088      	LDI  R24,8
000218 940e 0527 	CALL _sprintf
00021a 962c      	ADIW R28,12
                 ; 0000 0077     MoveCursor(0,1);
00021b e0e0      	LDI  R30,LOW(0)
00021c 93ea      	ST   -Y,R30
00021d e0a1      	LDI  R26,LOW(1)
00021e 940e 05ac 	CALL SUBOPT_0x6
                 ; 0000 0078     StringLCDVar(time);
                 ; 0000 0079 }
000220 9508      	RET
                 ; .FEND
                 ;
                 ;// Clock
                 ;void updateClock(){
                 ; 0000 007C void updateClock(){
                 _updateClock:
                 ; .FSTART _updateClock
                 ; 0000 007D     rtc_get_time(&H, &M, &S);
000221 940e 05bc 	CALL SUBOPT_0x9
                 ; 0000 007E }
000223 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0081 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0082 
                 ; 0000 0083 // ADC initialization
                 ; 0000 0084 // ADC Clock frequency: 125.000 kHz
                 ; 0000 0085 // ADC Voltage Reference: Int., cap. on AREF
                 ; 0000 0086 // ADC High Speed Mode: Off
                 ; 0000 0087 // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 0088 // ADC4: On, ADC5: On, ADC6: On, ADC7: Off
                 ; 0000 0089 DIDR0=(1<<ADC7D) | (0<<ADC6D) | (0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
000224 e8e0      	LDI  R30,LOW(128)
000225 93e0 007e 	STS  126,R30
                 ; 0000 008A ADMUX=ADC_VREF_TYPE;
000227 ece0      	LDI  R30,LOW(192)
000228 93e0 007c 	STS  124,R30
                 ; 0000 008B ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (0<<ADPS0);
00022a e8e6      	LDI  R30,LOW(134)
00022b 93e0 007a 	STS  122,R30
                 ; 0000 008C ADCSRB=(1<<ADHSM);
00022d e8e0      	LDI  R30,LOW(128)
00022e 93e0 007b 	STS  123,R30
                 ; 0000 008D 
                 ; 0000 008E // LCD
                 ; 0000 008F 
                 ; 0000 0090 SetupLCD();
000230 940e 008d 	CALL _SetupLCD
                 ; 0000 0091 
                 ; 0000 0092 // DS1302
                 ; 0000 0093 rtc_init(0,0,0);
000232 e0e0      	LDI  R30,LOW(0)
000233 93ea      	ST   -Y,R30
000234 93ea      	ST   -Y,R30
000235 e0a0      	LDI  R26,LOW(0)
000236 940e 035d 	CALL _rtc_init
                 ; 0000 0094 
                 ; 0000 0095 // Tone
                 ; 0000 0096 DDRB.5=1;
000238 9a25      	SBI  0x4,5
                 ; 0000 0097 
                 ; 0000 0098 // First actions
                 ; 0000 0099 PORTC = 0x0F;
000239 e0ef      	LDI  R30,LOW(15)
00023a b9e8      	OUT  0x8,R30
                 ; 0000 009A rtc_get_time(&H, &M, &S);
00023b 940e 05bc 	CALL SUBOPT_0x9
                 ; 0000 009B printTime();
00023d dfa4      	RCALL _printTime
                 ; 0000 009C 
                 ; 0000 009D while (1){
                 _0x2F:
                 ; 0000 009E     // Please write your application code here
                 ; 0000 009F 
                 ; 0000 00A0         // Counter
                 ; 0000 00A1         delay_ms(50);
00023e e3a2      	LDI  R26,LOW(50)
00023f e0b0      	LDI  R27,0
000240 940e 0603 	CALL _delay_ms
                 ; 0000 00A2         j++;
000242 91e0 091c 	LDS  R30,_j
000244 5fef      	SUBI R30,-LOW(1)
000245 93e0 091c 	STS  _j,R30
                 ; 0000 00A3 
                 ; 0000 00A4         // ADC
                 ; 0000 00A5         updateADC();
000247 defc      	RCALL _updateADC
                 ; 0000 00A6 
                 ; 0000 00A7         // 100 ms delay
                 ; 0000 00A8         if(j%2==0){
000248 91a0 091c 	LDS  R26,_j
00024a 27bb      	CLR  R27
00024b e0e2      	LDI  R30,LOW(2)
00024c e0f0      	LDI  R31,HIGH(2)
00024d 940e 07d3 	CALL __MODW21
00024f 9730      	SBIW R30,0
000250 f459      	BRNE _0x32
                 ; 0000 00A9            if(alarmFlag==1) {
000251 91a0 0901 	LDS  R26,_alarmFlag
000253 30a1      	CPI  R26,LOW(0x1)
000254 f411      	BRNE _0x33
                 ; 0000 00AA             playTone();
000255 df60      	RCALL _playTone
                 ; 0000 00AB            }
                 ; 0000 00AC            else
000256 c005      	RJMP _0x34
                 _0x33:
                 ; 0000 00AD             tono(0);
                +
000257 e0a0     +LDI R26 , LOW ( 0x0 )
000258 e0b0     +LDI R27 , HIGH ( 0x0 )
000259 e080     +LDI R24 , BYTE3 ( 0x0 )
00025a e090     +LDI R25 , BYTE4 ( 0x0 )
                 	__GETD2N 0x0
00025b df0b      	RCALL _tono
                 ; 0000 00AE         }
                 _0x34:
                 ; 0000 00AF         // 250 ms delay, add counter
                 ; 0000 00B0         if(j%5==0)
                 _0x32:
00025c 91a0 091c 	LDS  R26,_j
00025e 27bb      	CLR  R27
00025f e0e5      	LDI  R30,LOW(5)
000260 e0f0      	LDI  R31,HIGH(5)
000261 940e 07d3 	CALL __MODW21
000263 9730      	SBIW R30,0
000264 f429      	BRNE _0x35
                 ; 0000 00B1             i++;
000265 91e0 091b 	LDS  R30,_i
000267 5fef      	SUBI R30,-LOW(1)
000268 93e0 091b 	STS  _i,R30
                 ; 0000 00B2         // 500 ms delay, reset counter
                 ; 0000 00B3         if(j%10==0)
                 _0x35:
00026a 91a0 091c 	LDS  R26,_j
00026c 27bb      	CLR  R27
00026d e0ea      	LDI  R30,LOW(10)
00026e e0f0      	LDI  R31,HIGH(10)
00026f 940e 07d3 	CALL __MODW21
000271 9730      	SBIW R30,0
000272 f419      	BRNE _0x36
                 ; 0000 00B4             j=0;
000273 e0e0      	LDI  R30,LOW(0)
000274 93e0 091c 	STS  _j,R30
                 ; 0000 00B5         // Turns alarm flag on when H, M and S match
                 ; 0000 00B6         if(S==0 && M==AM && H==AH)
                 _0x36:
000276 91a0 0904 	LDS  R26,_S
000278 30a0      	CPI  R26,LOW(0x0)
000279 f461      	BRNE _0x38
00027a 940e 05b7 	CALL SUBOPT_0x8
00027c 91a0 0903 	LDS  R26,_M
00027e 17ea      	CP   R30,R26
00027f f431      	BRNE _0x38
000280 940e 05b2 	CALL SUBOPT_0x7
000282 91a0 0902 	LDS  R26,_H
000284 17ea      	CP   R30,R26
000285 f009      	BREQ _0x39
                 _0x38:
000286 c003      	RJMP _0x37
                 _0x39:
                 ; 0000 00B7             alarmFlag=1;
000287 e0e1      	LDI  R30,LOW(1)
000288 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00B8 
                 ; 0000 00B9         // 1 s delay
                 ; 0000 00BA         if (i==4)
                 _0x37:
00028a 91a0 091b 	LDS  R26,_i
00028c 30a4      	CPI  R26,LOW(0x4)
00028d f429      	BRNE _0x3A
                 ; 0000 00BB         {
                 ; 0000 00BC             i=0;
00028e e0e0      	LDI  R30,LOW(0)
00028f 93e0 091b 	STS  _i,R30
                 ; 0000 00BD             // Update clock
                 ; 0000 00BE             updateClock();
000291 df8f      	RCALL _updateClock
                 ; 0000 00BF             // Print values un LCD display
                 ; 0000 00C0             printTime();
000292 df4f      	RCALL _printTime
                 ; 0000 00C1         }
                 ; 0000 00C2 
                 ; 0000 00C3         // Clock
                 ; 0000 00C4 
                 ; 0000 00C5         // If alarm is on, switch will turn alarm off without
                 ; 0000 00C6         //  changing the default variable
                 ; 0000 00C7         if(!PINC.0){
                 _0x3A:
000293 9930      	SBIC 0x6,0
000294 c00f      	RJMP _0x3B
                 ; 0000 00C8             if(alarmFlag==1)
000295 91a0 0901 	LDS  R26,_alarmFlag
000297 30a1      	CPI  R26,LOW(0x1)
000298 f421      	BRNE _0x3C
                 ; 0000 00C9                 alarmFlag = 0;
000299 e0e0      	LDI  R30,LOW(0)
00029a 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00CA             else{
00029c c007      	RJMP _0x3D
                 _0x3C:
                 ; 0000 00CB                 H++;
00029d 91e0 0902 	LDS  R30,_H
00029f 5fef      	SUBI R30,-LOW(1)
0002a0 93e0 0902 	STS  _H,R30
                 ; 0000 00CC                 rtc_set_time(H, M, S);
0002a2 940e 05c8 	CALL SUBOPT_0xA
                 ; 0000 00CD             }
                 _0x3D:
                 ; 0000 00CE         }
                 ; 0000 00CF         // If alarm is on, switch will turn alarm off without
                 ; 0000 00D0         //  changing the default variable
                 ; 0000 00D1         if(!PINC.1){
                 _0x3B:
0002a4 9931      	SBIC 0x6,1
0002a5 c00f      	RJMP _0x3E
                 ; 0000 00D2             if(alarmFlag==1)
0002a6 91a0 0901 	LDS  R26,_alarmFlag
0002a8 30a1      	CPI  R26,LOW(0x1)
0002a9 f421      	BRNE _0x3F
                 ; 0000 00D3                 alarmFlag = 0;
0002aa e0e0      	LDI  R30,LOW(0)
0002ab 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00D4             else{
0002ad c007      	RJMP _0x40
                 _0x3F:
                 ; 0000 00D5                 M++;
0002ae 91e0 0903 	LDS  R30,_M
0002b0 5fef      	SUBI R30,-LOW(1)
0002b1 93e0 0903 	STS  _M,R30
                 ; 0000 00D6                 rtc_set_time(H, M, S);
0002b3 940e 05c8 	CALL SUBOPT_0xA
                 ; 0000 00D7             }
                 _0x40:
                 ; 0000 00D8         }
                 ; 0000 00D9         // Verify the correct range on clock time
                 ; 0000 00DA         if(S>59)
                 _0x3E:
0002b5 91a0 0904 	LDS  R26,_S
0002b7 33ac      	CPI  R26,LOW(0x3C)
0002b8 f018      	BRLO _0x41
                 ; 0000 00DB             S=0;
0002b9 e0e0      	LDI  R30,LOW(0)
0002ba 93e0 0904 	STS  _S,R30
                 ; 0000 00DC         if(M>59)
                 _0x41:
0002bc 91a0 0903 	LDS  R26,_M
0002be 33ac      	CPI  R26,LOW(0x3C)
0002bf f018      	BRLO _0x42
                 ; 0000 00DD             M=0;
0002c0 e0e0      	LDI  R30,LOW(0)
0002c1 93e0 0903 	STS  _M,R30
                 ; 0000 00DE         if(H>23)
                 _0x42:
0002c3 91a0 0902 	LDS  R26,_H
0002c5 31a8      	CPI  R26,LOW(0x18)
0002c6 f018      	BRLO _0x43
                 ; 0000 00DF             H=0;
0002c7 e0e0      	LDI  R30,LOW(0)
0002c8 93e0 0902 	STS  _H,R30
                 ; 0000 00E0         if(AM>59)
                 _0x43:
0002ca 940e 05b7 	CALL SUBOPT_0x8
0002cc 33ec      	CPI  R30,LOW(0x3C)
0002cd f028      	BRLO _0x44
                 ; 0000 00E1             AM=0;
0002ce e0a1      	LDI  R26,LOW(_AM)
0002cf e0b0      	LDI  R27,HIGH(_AM)
0002d0 e0e0      	LDI  R30,LOW(0)
0002d1 940e 0811 	CALL __EEPROMWRB
                 ; 0000 00E2         if(AH>23)
                 _0x44:
0002d3 940e 05b2 	CALL SUBOPT_0x7
0002d5 31e8      	CPI  R30,LOW(0x18)
0002d6 f028      	BRLO _0x45
                 ; 0000 00E3             AH=0;
0002d7 e0a0      	LDI  R26,LOW(_AH)
0002d8 e0b0      	LDI  R27,HIGH(_AH)
0002d9 e0e0      	LDI  R30,LOW(0)
0002da 940e 0811 	CALL __EEPROMWRB
                 ; 0000 00E4 
                 ; 0000 00E5         // Alarm
                 ; 0000 00E6 
                 ; 0000 00E7         // If alarm is on, switch will turn alarm off without
                 ; 0000 00E8         //  changing the default variable
                 ; 0000 00E9         if(!PINC.2){
                 _0x45:
0002dc 9932      	SBIC 0x6,2
0002dd c00d      	RJMP _0x46
                 ; 0000 00EA             if(alarmFlag==1)
0002de 91a0 0901 	LDS  R26,_alarmFlag
0002e0 30a1      	CPI  R26,LOW(0x1)
0002e1 f421      	BRNE _0x47
                 ; 0000 00EB                 alarmFlag = 0;
0002e2 e0e0      	LDI  R30,LOW(0)
0002e3 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00EC             else
0002e5 c005      	RJMP _0x48
                 _0x47:
                 ; 0000 00ED                 AH++;
0002e6 940e 05b2 	CALL SUBOPT_0x7
0002e8 5fef      	SUBI R30,-LOW(1)
0002e9 940e 0811 	CALL __EEPROMWRB
                 ; 0000 00EE         }
                 _0x48:
                 ; 0000 00EF         // If alarm is on, switch will turn alarm off without
                 ; 0000 00F0         //  changing the default variable
                 ; 0000 00F1         if(!PINC.3){
                 _0x46:
0002eb 9933      	SBIC 0x6,3
0002ec c00d      	RJMP _0x49
                 ; 0000 00F2             if(alarmFlag==1)
0002ed 91a0 0901 	LDS  R26,_alarmFlag
0002ef 30a1      	CPI  R26,LOW(0x1)
0002f0 f421      	BRNE _0x4A
                 ; 0000 00F3                 alarmFlag = 0;
0002f1 e0e0      	LDI  R30,LOW(0)
0002f2 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00F4             else
0002f4 c005      	RJMP _0x4B
                 _0x4A:
                 ; 0000 00F5                 AM++;
0002f5 940e 05b7 	CALL SUBOPT_0x8
0002f7 5fef      	SUBI R30,-LOW(1)
0002f8 940e 0811 	CALL __EEPROMWRB
                 ; 0000 00F6         }
                 _0x4B:
                 ; 0000 00F7         // Verify the correct range on alarm time
                 ; 0000 00F8         if(AM>59)
                 _0x49:
0002fa 940e 05b7 	CALL SUBOPT_0x8
0002fc 33ec      	CPI  R30,LOW(0x3C)
0002fd f028      	BRLO _0x4C
                 ; 0000 00F9             AM=0;
0002fe e0a1      	LDI  R26,LOW(_AM)
0002ff e0b0      	LDI  R27,HIGH(_AM)
000300 e0e0      	LDI  R30,LOW(0)
000301 940e 0811 	CALL __EEPROMWRB
                 ; 0000 00FA         if(AH>23)
                 _0x4C:
000303 940e 05b2 	CALL SUBOPT_0x7
000305 31e8      	CPI  R30,LOW(0x18)
000306 f028      	BRLO _0x4D
                 ; 0000 00FB             AH=0;
000307 e0a0      	LDI  R26,LOW(_AH)
000308 e0b0      	LDI  R27,HIGH(_AH)
000309 e0e0      	LDI  R30,LOW(0)
00030a 940e 0811 	CALL __EEPROMWRB
                 ; 0000 00FC     }
                 _0x4D:
00030c cf31      	RJMP _0x2F
                 ; 0000 00FD }
                 _0x4E:
00030d cfff      	RJMP _0x4E
                 ; .FEND
                 
                 	.CSEG
                 _ds1302_rst0_G100:
                 ; .FSTART _ds1302_rst0_G100
00030e 9858      	cbi  __ds1302_port,__ds1302_rst
                +
00030f e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000310 958a     +DEC R24
000311 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000312 9508      	RET
                 ; .FEND
                 _ds1302_write0_G100:
                 ; .FSTART _ds1302_write0_G100
000313 93aa      	ST   -Y,R26
000314 9a51          sbi  __ds1302_port-1,__ds1302_sclk
000315 9a52          sbi  __ds1302_port-1,__ds1302_io
000316 9a50          sbi  __ds1302_port-1,__ds1302_rst
000317 9a58          sbi  __ds1302_port,__ds1302_rst
                +
000318 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000319 958a     +DEC R24
00031a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00031b 81a8      	LD   R26,Y
00031c d002      	RCALL _ds1302_write1_G100
00031d 940c 034e 	JMP  _0x20A0005
                 ; .FEND
                 _ds1302_write1_G100:
                 ; .FSTART _ds1302_write1_G100
00031f 93aa      	ST   -Y,R26
000320 91e9          ld   r30,y+
000321 e0a8          ldi  r26,8
                 ds1302_write2:
000322 95e7          ror  r30
000323 985a          cbi  __ds1302_port,__ds1302_io
000324 f408          brcc ds1302_write3
000325 9a5a          sbi  __ds1302_port,__ds1302_io
                 ds1302_write3:
000326 0000          nop
000327 0000          nop
000328 0000          nop
000329 0000          nop
00032a 9a59          sbi  __ds1302_port,__ds1302_sclk
                +
00032b e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
00032c 958a     +DEC R24
00032d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
00032e 9859      	cbi  __ds1302_port,__ds1302_sclk
                +
00032f e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
000330 958a     +DEC R24
000331 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
000332 95aa          dec  r26
000333 f771          brne ds1302_write2
000334 9508          ret
                 ; .FEND
                 _ds1302_read:
                 ; .FSTART _ds1302_read
000335 93aa      	ST   -Y,R26
000336 81e8      	LD   R30,Y
000337 60e1      	ORI  R30,1
000338 2fae      	MOV  R26,R30
000339 940e 0313 	CALL _ds1302_write0_G100
00033b 985a          cbi  __ds1302_port,__ds1302_io
00033c 9852          cbi  __ds1302_port-1,__ds1302_io
00033d e0a8          ldi  r26,8
                 ds1302_read0:
00033e 9488          clc
00033f 994a      	sbic __ds1302_port-2,__ds1302_io
000340 9408          sec
000341 95e7          ror  r30
000342 9a59          sbi  __ds1302_port,__ds1302_sclk
                +
000343 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
000344 958a     +DEC R24
000345 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
000346 9859      	cbi  __ds1302_port,__ds1302_sclk
                +
000347 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
000348 958a     +DEC R24
000349 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
00034a 95aa          dec  r26
00034b f791          brne ds1302_read0
00034c 940e 030e 	CALL _ds1302_rst0_G100
                 _0x20A0005:
00034e 9621      	ADIW R28,1
00034f 9508      	RET
                 ; .FEND
                 _ds1302_write:
                 ; .FSTART _ds1302_write
000350 93aa      	ST   -Y,R26
000351 81e9      	LDD  R30,Y+1
000352 7fee      	ANDI R30,0xFE
000353 2fae      	MOV  R26,R30
000354 940e 0313 	CALL _ds1302_write0_G100
000356 81a8      	LD   R26,Y
000357 940e 031f 	CALL _ds1302_write1_G100
000359 940e 030e 	CALL _ds1302_rst0_G100
                 _0x20A0004:
00035b 9622      	ADIW R28,2
00035c 9508      	RET
                 ; .FEND
                 _rtc_init:
                 ; .FSTART _rtc_init
00035d 93aa      	ST   -Y,R26
00035e 81e8      	LD   R30,Y
00035f 70e3      	ANDI R30,LOW(0x3)
000360 83e8      	ST   Y,R30
000361 81ea      	LDD  R30,Y+2
000362 30e0      	CPI  R30,0
000363 f019      	BREQ _0x2000003
000364 81e8      	LD   R30,Y
000365 6ae0      	ORI  R30,LOW(0xA0)
000366 83e8      	ST   Y,R30
                 _0x2000003:
000367 81a9      	LDD  R26,Y+1
000368 30a1      	CPI  R26,LOW(0x1)
000369 f419      	BRNE _0x2000004
00036a 81e8      	LD   R30,Y
00036b 60e4      	ORI  R30,4
00036c c007      	RJMP _0x2000008
                 _0x2000004:
00036d 81a9      	LDD  R26,Y+1
00036e 30a2      	CPI  R26,LOW(0x2)
00036f f419      	BRNE _0x2000006
000370 81e8      	LD   R30,Y
000371 60e8      	ORI  R30,8
000372 c001      	RJMP _0x2000008
                 _0x2000006:
000373 e0e0      	LDI  R30,LOW(0)
                 _0x2000008:
000374 83e8      	ST   Y,R30
000375 e8ee      	LDI  R30,LOW(142)
000376 93ea      	ST   -Y,R30
000377 e0a0      	LDI  R26,LOW(0)
000378 dfd7      	RCALL _ds1302_write
000379 e9e0      	LDI  R30,LOW(144)
00037a 93ea      	ST   -Y,R30
00037b 81a9      	LDD  R26,Y+1
00037c c02f      	RJMP _0x20A0002
                 ; .FEND
                 _rtc_get_time:
                 ; .FSTART _rtc_get_time
00037d 93ba      	ST   -Y,R27
00037e 93aa      	ST   -Y,R26
00037f e8a5      	LDI  R26,LOW(133)
000380 940e 05d2 	CALL SUBOPT_0xB
000382 81ac      	LDD  R26,Y+4
000383 81bd      	LDD  R27,Y+4+1
000384 93ec      	ST   X,R30
000385 e8a3      	LDI  R26,LOW(131)
000386 940e 05d2 	CALL SUBOPT_0xB
000388 81aa      	LDD  R26,Y+2
000389 81bb      	LDD  R27,Y+2+1
00038a 93ec      	ST   X,R30
00038b e8a1      	LDI  R26,LOW(129)
00038c 940e 05d2 	CALL SUBOPT_0xB
00038e 81a8      	LD   R26,Y
00038f 81b9      	LDD  R27,Y+1
000390 93ec      	ST   X,R30
000391 9626      	ADIW R28,6
000392 9508      	RET
                 ; .FEND
                 _rtc_set_time:
                 ; .FSTART _rtc_set_time
000393 93aa      	ST   -Y,R26
000394 e8ee      	LDI  R30,LOW(142)
000395 93ea      	ST   -Y,R30
000396 e0a0      	LDI  R26,LOW(0)
000397 dfb8      	RCALL _ds1302_write
000398 e8e4      	LDI  R30,LOW(132)
000399 93ea      	ST   -Y,R30
00039a 81ab      	LDD  R26,Y+3
00039b 940e 0568 	CALL _bin2bcd
00039d 2fae      	MOV  R26,R30
00039e dfb1      	RCALL _ds1302_write
00039f e8e2      	LDI  R30,LOW(130)
0003a0 93ea      	ST   -Y,R30
0003a1 81aa      	LDD  R26,Y+2
0003a2 940e 0568 	CALL _bin2bcd
0003a4 2fae      	MOV  R26,R30
0003a5 dfaa      	RCALL _ds1302_write
0003a6 e8e0      	LDI  R30,LOW(128)
0003a7 93ea      	ST   -Y,R30
0003a8 81a9      	LDD  R26,Y+1
0003a9 940e 0568 	CALL _bin2bcd
0003ab 2fae      	MOV  R26,R30
                 _0x20A0002:
0003ac dfa3      	RCALL _ds1302_write
0003ad e8ee      	LDI  R30,LOW(142)
0003ae 93ea      	ST   -Y,R30
0003af e8a0      	LDI  R26,LOW(128)
0003b0 df9f      	RCALL _ds1302_write
                 _0x20A0003:
0003b1 9623      	ADIW R28,3
0003b2 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
0003b3 93ba      	ST   -Y,R27
0003b4 93aa      	ST   -Y,R26
0003b5 931a      	ST   -Y,R17
0003b6 930a      	ST   -Y,R16
0003b7 81aa      	LDD  R26,Y+2
0003b8 81bb      	LDD  R27,Y+2+1
0003b9 9612      	ADIW R26,2
0003ba 940e 07e1 	CALL __GETW1P
0003bc 9730      	SBIW R30,0
0003bd f159      	BREQ _0x2020016
0003be 81aa      	LDD  R26,Y+2
0003bf 81bb      	LDD  R27,Y+2+1
0003c0 9614      	ADIW R26,4
0003c1 940e 07e1 	CALL __GETW1P
0003c3 018f      	MOVW R16,R30
0003c4 9730      	SBIW R30,0
0003c5 f061      	BREQ _0x2020018
                +
0003c6 3002     +CPI R16 , LOW ( 2 )
0003c7 e0e0     +LDI R30 , HIGH ( 2 )
0003c8 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0003c9 f098      	BRLO _0x2020019
0003ca 01f8      	MOVW R30,R16
0003cb 9731      	SBIW R30,1
0003cc 018f      	MOVW R16,R30
                +
0003cd 81aa     +LDD R26 , Y + 2
0003ce 81bb     +LDD R27 , Y + 2 + 1
0003cf 9614     +ADIW R26 , 4
0003d0 93ed     +ST X + , R30
0003d1 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020018:
0003d2 81aa      	LDD  R26,Y+2
0003d3 81bb      	LDD  R27,Y+2+1
0003d4 9612      	ADIW R26,2
0003d5 91ed      	LD   R30,X+
0003d6 91fd      	LD   R31,X+
0003d7 9631      	ADIW R30,1
0003d8 93fe      	ST   -X,R31
0003d9 93ee      	ST   -X,R30
0003da 9731      	SBIW R30,1
0003db 81ac      	LDD  R26,Y+4
0003dc 83a0      	STD  Z+0,R26
                 _0x2020019:
0003dd 81aa      	LDD  R26,Y+2
0003de 81bb      	LDD  R27,Y+2+1
0003df 940e 07e1 	CALL __GETW1P
0003e1 23ff      	TST  R31
0003e2 f02a      	BRMI _0x202001A
0003e3 91ed      	LD   R30,X+
0003e4 91fd      	LD   R31,X+
0003e5 9631      	ADIW R30,1
0003e6 93fe      	ST   -X,R31
0003e7 93ee      	ST   -X,R30
                 _0x202001A:
0003e8 c006      	RJMP _0x202001B
                 _0x2020016:
0003e9 81aa      	LDD  R26,Y+2
0003ea 81bb      	LDD  R27,Y+2+1
0003eb efef      	LDI  R30,LOW(65535)
0003ec efff      	LDI  R31,HIGH(65535)
0003ed 93ed      	ST   X+,R30
0003ee 93fc      	ST   X,R31
                 _0x202001B:
0003ef 8119      	LDD  R17,Y+1
0003f0 8108      	LDD  R16,Y+0
0003f1 9625      	ADIW R28,5
0003f2 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0003f3 93ba      	ST   -Y,R27
0003f4 93aa      	ST   -Y,R26
0003f5 9726      	SBIW R28,6
0003f6 940e 0826 	CALL __SAVELOCR6
0003f8 e000      	LDI  R16,0
0003f9 85ac      	LDD  R26,Y+12
0003fa 85bd      	LDD  R27,Y+12+1
0003fb e0e0      	LDI  R30,LOW(0)
0003fc e0f0      	LDI  R31,HIGH(0)
0003fd 93ed      	ST   X+,R30
0003fe 93fc      	ST   X,R31
                 _0x202001C:
0003ff 89ea      	LDD  R30,Y+18
000400 89fb      	LDD  R31,Y+18+1
000401 9631      	ADIW R30,1
000402 8bea      	STD  Y+18,R30
000403 8bfb      	STD  Y+18+1,R31
000404 9731      	SBIW R30,1
000405 91e4      	LPM  R30,Z
000406 2f3e      	MOV  R19,R30
000407 30e0      	CPI  R30,0
000408 f409      	BRNE PC+2
000409 c115      	RJMP _0x202001E
00040a 2fe0      	MOV  R30,R16
00040b 30e0      	CPI  R30,0
00040c f439      	BRNE _0x2020022
00040d 3235      	CPI  R19,37
00040e f411      	BRNE _0x2020023
00040f e001      	LDI  R16,LOW(1)
000410 c002      	RJMP _0x2020024
                 _0x2020023:
000411 940e 05d7 	CALL SUBOPT_0xC
                 _0x2020024:
000413 c10a      	RJMP _0x2020021
                 _0x2020022:
000414 30e1      	CPI  R30,LOW(0x1)
000415 f4a9      	BRNE _0x2020025
000416 3235      	CPI  R19,37
000417 f419      	BRNE _0x2020026
000418 940e 05d7 	CALL SUBOPT_0xC
00041a c102      	RJMP _0x20200D2
                 _0x2020026:
00041b e002      	LDI  R16,LOW(2)
00041c e050      	LDI  R21,LOW(0)
00041d e010      	LDI  R17,LOW(0)
00041e 323d      	CPI  R19,45
00041f f411      	BRNE _0x2020027
000420 e011      	LDI  R17,LOW(1)
000421 c0fc      	RJMP _0x2020021
                 _0x2020027:
000422 323b      	CPI  R19,43
000423 f411      	BRNE _0x2020028
000424 e25b      	LDI  R21,LOW(43)
000425 c0f8      	RJMP _0x2020021
                 _0x2020028:
000426 3230      	CPI  R19,32
000427 f411      	BRNE _0x2020029
000428 e250      	LDI  R21,LOW(32)
000429 c0f4      	RJMP _0x2020021
                 _0x2020029:
00042a c002      	RJMP _0x202002A
                 _0x2020025:
00042b 30e2      	CPI  R30,LOW(0x2)
00042c f439      	BRNE _0x202002B
                 _0x202002A:
00042d e040      	LDI  R20,LOW(0)
00042e e003      	LDI  R16,LOW(3)
00042f 3330      	CPI  R19,48
000430 f411      	BRNE _0x202002C
000431 6810      	ORI  R17,LOW(128)
000432 c0eb      	RJMP _0x2020021
                 _0x202002C:
000433 c003      	RJMP _0x202002D
                 _0x202002B:
000434 30e3      	CPI  R30,LOW(0x3)
000435 f009      	BREQ PC+2
000436 c0e7      	RJMP _0x2020021
                 _0x202002D:
000437 3330      	CPI  R19,48
000438 f010      	BRLO _0x2020030
000439 333a      	CPI  R19,58
00043a f008      	BRLO _0x2020031
                 _0x2020030:
00043b c007      	RJMP _0x202002F
                 _0x2020031:
00043c e0aa      	LDI  R26,LOW(10)
00043d 9f4a      	MUL  R20,R26
00043e 2d40      	MOV  R20,R0
00043f 2fe3      	MOV  R30,R19
000440 53e0      	SUBI R30,LOW(48)
000441 0f4e      	ADD  R20,R30
000442 c0db      	RJMP _0x2020021
                 _0x202002F:
000443 2fe3      	MOV  R30,R19
000444 36e3      	CPI  R30,LOW(0x63)
000445 f449      	BRNE _0x2020035
000446 940e 05de 	CALL SUBOPT_0xD
000448 89e8      	LDD  R30,Y+16
000449 89f9      	LDD  R31,Y+16+1
00044a 81a4      	LDD  R26,Z+4
00044b 93aa      	ST   -Y,R26
00044c 940e 05e4 	CALL SUBOPT_0xE
00044e c0ce      	RJMP _0x2020036
                 _0x2020035:
00044f 37e3      	CPI  R30,LOW(0x73)
000450 f441      	BRNE _0x2020038
000451 940e 05de 	CALL SUBOPT_0xD
000453 940e 05ea 	CALL SUBOPT_0xF
000455 940e 0572 	CALL _strlen
000457 2f0e      	MOV  R16,R30
000458 c00a      	RJMP _0x2020039
                 _0x2020038:
000459 37e0      	CPI  R30,LOW(0x70)
00045a f461      	BRNE _0x202003B
00045b 940e 05de 	CALL SUBOPT_0xD
00045d 940e 05ea 	CALL SUBOPT_0xF
00045f 940e 057e 	CALL _strlenf
000461 2f0e      	MOV  R16,R30
000462 6018      	ORI  R17,LOW(8)
                 _0x2020039:
000463 6012      	ORI  R17,LOW(2)
000464 771f      	ANDI R17,LOW(127)
000465 e020      	LDI  R18,LOW(0)
000466 c034      	RJMP _0x202003C
                 _0x202003B:
000467 36e4      	CPI  R30,LOW(0x64)
000468 f011      	BREQ _0x202003F
000469 36e9      	CPI  R30,LOW(0x69)
00046a f411      	BRNE _0x2020040
                 _0x202003F:
00046b 6014      	ORI  R17,LOW(4)
00046c c002      	RJMP _0x2020041
                 _0x2020040:
00046d 37e5      	CPI  R30,LOW(0x75)
00046e f431      	BRNE _0x2020042
                 _0x2020041:
00046f e9e8      	LDI  R30,LOW(_tbl10_G101*2)
000470 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000471 83ee      	STD  Y+6,R30
000472 83ff      	STD  Y+6+1,R31
000473 e005      	LDI  R16,LOW(5)
000474 c00c      	RJMP _0x2020043
                 _0x2020042:
000475 35e8      	CPI  R30,LOW(0x58)
000476 f411      	BRNE _0x2020045
000477 6018      	ORI  R17,LOW(8)
000478 c003      	RJMP _0x2020046
                 _0x2020045:
000479 37e8      	CPI  R30,LOW(0x78)
00047a f009      	BREQ PC+2
00047b c0a1      	RJMP _0x2020077
                 _0x2020046:
00047c eae2      	LDI  R30,LOW(_tbl16_G101*2)
00047d e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
00047e 83ee      	STD  Y+6,R30
00047f 83ff      	STD  Y+6+1,R31
000480 e004      	LDI  R16,LOW(4)
                 _0x2020043:
000481 ff12      	SBRS R17,2
000482 c014      	RJMP _0x2020048
000483 940e 05de 	CALL SUBOPT_0xD
000485 940e 05f4 	CALL SUBOPT_0x10
000487 85ab      	LDD  R26,Y+11
000488 23aa      	TST  R26
000489 f43a      	BRPL _0x2020049
00048a 85ea      	LDD  R30,Y+10
00048b 85fb      	LDD  R31,Y+10+1
00048c 940e 07af 	CALL __ANEGW1
00048e 87ea      	STD  Y+10,R30
00048f 87fb      	STD  Y+10+1,R31
000490 e25d      	LDI  R21,LOW(45)
                 _0x2020049:
000491 3050      	CPI  R21,0
000492 f011      	BREQ _0x202004A
000493 5f0f      	SUBI R16,-LOW(1)
000494 c001      	RJMP _0x202004B
                 _0x202004A:
000495 7f1b      	ANDI R17,LOW(251)
                 _0x202004B:
000496 c004      	RJMP _0x202004C
                 _0x2020048:
000497 940e 05de 	CALL SUBOPT_0xD
000499 940e 05f4 	CALL SUBOPT_0x10
                 _0x202004C:
                 _0x202003C:
00049b fd10      	SBRC R17,0
00049c c011      	RJMP _0x202004D
                 _0x202004E:
00049d 1704      	CP   R16,R20
00049e f478      	BRSH _0x2020050
00049f ff17      	SBRS R17,7
0004a0 c008      	RJMP _0x2020051
0004a1 ff12      	SBRS R17,2
0004a2 c004      	RJMP _0x2020052
0004a3 7f1b      	ANDI R17,LOW(251)
0004a4 2f35      	MOV  R19,R21
0004a5 5001      	SUBI R16,LOW(1)
0004a6 c001      	RJMP _0x2020053
                 _0x2020052:
0004a7 e330      	LDI  R19,LOW(48)
                 _0x2020053:
0004a8 c001      	RJMP _0x2020054
                 _0x2020051:
0004a9 e230      	LDI  R19,LOW(32)
                 _0x2020054:
0004aa 940e 05d7 	CALL SUBOPT_0xC
0004ac 5041      	SUBI R20,LOW(1)
0004ad cfef      	RJMP _0x202004E
                 _0x2020050:
                 _0x202004D:
0004ae 2f20      	MOV  R18,R16
0004af ff11      	SBRS R17,1
0004b0 c017      	RJMP _0x2020055
                 _0x2020056:
0004b1 3020      	CPI  R18,0
0004b2 f0a1      	BREQ _0x2020058
0004b3 ff13      	SBRS R17,3
0004b4 c006      	RJMP _0x2020059
0004b5 81ee      	LDD  R30,Y+6
0004b6 81ff      	LDD  R31,Y+6+1
0004b7 9135      	LPM  R19,Z+
0004b8 83ee      	STD  Y+6,R30
0004b9 83ff      	STD  Y+6+1,R31
0004ba c005      	RJMP _0x202005A
                 _0x2020059:
0004bb 81ae      	LDD  R26,Y+6
0004bc 81bf      	LDD  R27,Y+6+1
0004bd 913d      	LD   R19,X+
0004be 83ae      	STD  Y+6,R26
0004bf 83bf      	STD  Y+6+1,R27
                 _0x202005A:
0004c0 940e 05d7 	CALL SUBOPT_0xC
0004c2 3040      	CPI  R20,0
0004c3 f009      	BREQ _0x202005B
0004c4 5041      	SUBI R20,LOW(1)
                 _0x202005B:
0004c5 5021      	SUBI R18,LOW(1)
0004c6 cfea      	RJMP _0x2020056
                 _0x2020058:
0004c7 c04b      	RJMP _0x202005C
                 _0x2020055:
                 _0x202005E:
0004c8 e330      	LDI  R19,LOW(48)
0004c9 81ee      	LDD  R30,Y+6
0004ca 81ff      	LDD  R31,Y+6+1
0004cb 940e 07e5 	CALL __GETW1PF
0004cd 87e8      	STD  Y+8,R30
0004ce 87f9      	STD  Y+8+1,R31
0004cf 81ee      	LDD  R30,Y+6
0004d0 81ff      	LDD  R31,Y+6+1
0004d1 9632      	ADIW R30,2
0004d2 83ee      	STD  Y+6,R30
0004d3 83ff      	STD  Y+6+1,R31
                 _0x2020060:
0004d4 85e8      	LDD  R30,Y+8
0004d5 85f9      	LDD  R31,Y+8+1
0004d6 85aa      	LDD  R26,Y+10
0004d7 85bb      	LDD  R27,Y+10+1
0004d8 17ae      	CP   R26,R30
0004d9 07bf      	CPC  R27,R31
0004da f050      	BRLO _0x2020062
0004db 5f3f      	SUBI R19,-LOW(1)
0004dc 85a8      	LDD  R26,Y+8
0004dd 85b9      	LDD  R27,Y+8+1
0004de 85ea      	LDD  R30,Y+10
0004df 85fb      	LDD  R31,Y+10+1
0004e0 1bea      	SUB  R30,R26
0004e1 0bfb      	SBC  R31,R27
0004e2 87ea      	STD  Y+10,R30
0004e3 87fb      	STD  Y+10+1,R31
0004e4 cfef      	RJMP _0x2020060
                 _0x2020062:
0004e5 333a      	CPI  R19,58
0004e6 f028      	BRLO _0x2020063
0004e7 ff13      	SBRS R17,3
0004e8 c002      	RJMP _0x2020064
0004e9 5f39      	SUBI R19,-LOW(7)
0004ea c001      	RJMP _0x2020065
                 _0x2020064:
0004eb 5d39      	SUBI R19,-LOW(39)
                 _0x2020065:
                 _0x2020063:
0004ec fd14      	SBRC R17,4
0004ed c01a      	RJMP _0x2020067
0004ee 3331      	CPI  R19,49
0004ef f420      	BRSH _0x2020069
0004f0 85a8      	LDD  R26,Y+8
0004f1 85b9      	LDD  R27,Y+8+1
0004f2 9711      	SBIW R26,1
0004f3 f409      	BRNE _0x2020068
                 _0x2020069:
0004f4 c009      	RJMP _0x20200D3
                 _0x2020068:
0004f5 1742      	CP   R20,R18
0004f6 f010      	BRLO _0x202006D
0004f7 ff10      	SBRS R17,0
0004f8 c001      	RJMP _0x202006E
                 _0x202006D:
0004f9 c013      	RJMP _0x202006C
                 _0x202006E:
0004fa e230      	LDI  R19,LOW(32)
0004fb ff17      	SBRS R17,7
0004fc c00b      	RJMP _0x202006F
0004fd e330      	LDI  R19,LOW(48)
                 _0x20200D3:
0004fe 6110      	ORI  R17,LOW(16)
0004ff ff12      	SBRS R17,2
000500 c007      	RJMP _0x2020070
000501 7f1b      	ANDI R17,LOW(251)
000502 935a      	ST   -Y,R21
000503 940e 05e4 	CALL SUBOPT_0xE
000505 3040      	CPI  R20,0
000506 f009      	BREQ _0x2020071
000507 5041      	SUBI R20,LOW(1)
                 _0x2020071:
                 _0x2020070:
                 _0x202006F:
                 _0x2020067:
000508 940e 05d7 	CALL SUBOPT_0xC
00050a 3040      	CPI  R20,0
00050b f009      	BREQ _0x2020072
00050c 5041      	SUBI R20,LOW(1)
                 _0x2020072:
                 _0x202006C:
00050d 5021      	SUBI R18,LOW(1)
00050e 85a8      	LDD  R26,Y+8
00050f 85b9      	LDD  R27,Y+8+1
000510 9712      	SBIW R26,2
000511 f008      	BRLO _0x202005F
000512 cfb5      	RJMP _0x202005E
                 _0x202005F:
                 _0x202005C:
000513 ff10      	SBRS R17,0
000514 c008      	RJMP _0x2020073
                 _0x2020074:
000515 3040      	CPI  R20,0
000516 f031      	BREQ _0x2020076
000517 5041      	SUBI R20,LOW(1)
000518 e2e0      	LDI  R30,LOW(32)
000519 93ea      	ST   -Y,R30
00051a 940e 05e4 	CALL SUBOPT_0xE
00051c cff8      	RJMP _0x2020074
                 _0x2020076:
                 _0x2020073:
                 _0x2020077:
                 _0x2020036:
                 _0x20200D2:
00051d e000      	LDI  R16,LOW(0)
                 _0x2020021:
00051e cee0      	RJMP _0x202001C
                 _0x202001E:
00051f 85ac      	LDD  R26,Y+12
000520 85bd      	LDD  R27,Y+12+1
000521 940e 07e1 	CALL __GETW1P
000523 940e 082d 	CALL __LOADLOCR6
000525 9664      	ADIW R28,20
000526 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000527 92ff      	PUSH R15
000528 2ef8      	MOV  R15,R24
000529 9726      	SBIW R28,6
00052a 940e 0828 	CALL __SAVELOCR4
00052c 940e 05fc 	CALL SUBOPT_0x11
00052e 9730      	SBIW R30,0
00052f f419      	BRNE _0x2020078
000530 efef      	LDI  R30,LOW(65535)
000531 efff      	LDI  R31,HIGH(65535)
000532 c023      	RJMP _0x20A0001
                 _0x2020078:
000533 01de      	MOVW R26,R28
000534 9616      	ADIW R26,6
000535 940e 07ab 	CALL __ADDW2R15
000537 018d      	MOVW R16,R26
000538 940e 05fc 	CALL SUBOPT_0x11
00053a 83ee      	STD  Y+6,R30
00053b 83ff      	STD  Y+6+1,R31
00053c e0e0      	LDI  R30,LOW(0)
00053d 87e8      	STD  Y+8,R30
00053e 87e9      	STD  Y+8+1,R30
00053f 01de      	MOVW R26,R28
000540 961a      	ADIW R26,10
000541 940e 07ab 	CALL __ADDW2R15
000543 940e 07e1 	CALL __GETW1P
000545 93fa      	ST   -Y,R31
000546 93ea      	ST   -Y,R30
000547 931a      	ST   -Y,R17
000548 930a      	ST   -Y,R16
000549 ebe3      	LDI  R30,LOW(_put_buff_G101)
00054a e0f3      	LDI  R31,HIGH(_put_buff_G101)
00054b 93fa      	ST   -Y,R31
00054c 93ea      	ST   -Y,R30
00054d 01de      	MOVW R26,R28
00054e 961a      	ADIW R26,10
00054f dea3      	RCALL __print_G101
000550 019f      	MOVW R18,R30
000551 81ae      	LDD  R26,Y+6
000552 81bf      	LDD  R27,Y+6+1
000553 e0e0      	LDI  R30,LOW(0)
000554 93ec      	ST   X,R30
000555 01f9      	MOVW R30,R18
                 _0x20A0001:
000556 940e 082f 	CALL __LOADLOCR4
000558 962a      	ADIW R28,10
000559 90ff      	POP  R15
00055a 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _bcd2bin:
                 ; .FSTART _bcd2bin
00055b 93aa      	ST   -Y,R26
00055c 81e8          ld   r30,y
00055d 95e2          swap r30
00055e 70ef          andi r30,0xf
00055f 2fae          mov  r26,r30
000560 0faa          lsl  r26
000561 0faa          lsl  r26
000562 0fea          add  r30,r26
000563 0fee          lsl  r30
000564 91a9          ld   r26,y+
000565 70af          andi r26,0xf
000566 0fea          add  r30,r26
000567 9508          ret
                 ; .FEND
                 _bin2bcd:
                 ; .FSTART _bin2bcd
000568 93aa      	ST   -Y,R26
000569 91a9          ld   r26,y+
00056a 27ee          clr  r30
                 bin2bcd0:
00056b 50aa          subi r26,10
00056c f012          brmi bin2bcd1
00056d 5fe0          subi r30,-16
00056e cffc          rjmp bin2bcd0
                 bin2bcd1:
00056f 5fa6          subi r26,-10
000570 0fea          add  r30,r26
000571 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000572 93ba      	ST   -Y,R27
000573 93aa      	ST   -Y,R26
000574 91a9          ld   r26,y+
000575 91b9          ld   r27,y+
000576 27ee          clr  r30
000577 27ff          clr  r31
                 strlen0:
000578 916d          ld   r22,x+
000579 2366          tst  r22
00057a f011          breq strlen1
00057b 9631          adiw r30,1
00057c cffb          rjmp strlen0
                 strlen1:
00057d 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00057e 93ba      	ST   -Y,R27
00057f 93aa      	ST   -Y,R26
000580 27aa          clr  r26
000581 27bb          clr  r27
000582 91e9          ld   r30,y+
000583 91f9          ld   r31,y+
                 strlenf0:
000584 9005      	lpm  r0,z+
000585 2000          tst  r0
000586 f011          breq strlenf1
000587 9611          adiw r26,1
000588 cffb          rjmp strlenf0
                 strlenf1:
000589 01fd          movw r30,r26
00058a 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _cursor:
000900           	.BYTE 0x1
                 _alarmFlag:
000901           	.BYTE 0x1
                 
                 	.ESEG
                 _AH:
000000           	.BYTE 0x1
                 _AM:
000001           	.BYTE 0x1
                 
                 	.DSEG
                 _H:
000902           	.BYTE 0x1
                 _M:
000903           	.BYTE 0x1
                 _S:
000904           	.BYTE 0x1
                 _time:
000905           	.BYTE 0x10
                 _temperature:
000915           	.BYTE 0x4
                 _Temp:
000919           	.BYTE 0x2
                 _i:
00091b           	.BYTE 0x1
                 _j:
00091c           	.BYTE 0x1
                 _k:
00091d           	.BYTE 0x2
                 _kFlag:
00091f           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
00058b e0a2      	LDI  R26,LOW(2)
00058c e0b0      	LDI  R27,0
00058d 940c 0603 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00058f 940e 00bc 	CALL _SendDataBitsLCD
000591 940c 00b9 	JMP  _PulseEn
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000593 81e9      	LDD  R30,Y+1
000594 7fe0      	ANDI R30,LOW(0xF0)
000595 2f0e      	MOV  R16,R30
000596 9502      	SWAP R16
000597 700f      	ANDI R16,0xF
000598 2fa0      	MOV  R26,R16
000599 cff5      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
00059a 81e9      	LDD  R30,Y+1
00059b 70ef      	ANDI R30,LOW(0xF)
00059c 2f0e      	MOV  R16,R30
00059d 2fa0      	MOV  R26,R16
00059e 940e 00bc 	CALL _SendDataBitsLCD
0005a0 cfea      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0005a1 91e0 091d 	LDS  R30,_k
0005a3 91f0 091e 	LDS  R31,_k+1
0005a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
0005a6 27ff      	CLR  R31
0005a7 2766      	CLR  R22
0005a8 2777      	CLR  R23
0005a9 940e 07ee 	CALL __PUTPARD1
0005ab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0005ac 940e 0109 	CALL _MoveCursor
0005ae e0a5      	LDI  R26,LOW(_time)
0005af e0b9      	LDI  R27,HIGH(_time)
0005b0 940c 00f1 	JMP  _StringLCDVar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
0005b2 e0a0      	LDI  R26,LOW(_AH)
0005b3 e0b0      	LDI  R27,HIGH(_AH)
0005b4 940e 0805 	CALL __EEPROMRDB
0005b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8:
0005b7 e0a1      	LDI  R26,LOW(_AM)
0005b8 e0b0      	LDI  R27,HIGH(_AM)
0005b9 940e 0805 	CALL __EEPROMRDB
0005bb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x9:
0005bc e0e2      	LDI  R30,LOW(_H)
0005bd e0f9      	LDI  R31,HIGH(_H)
0005be 93fa      	ST   -Y,R31
0005bf 93ea      	ST   -Y,R30
0005c0 e0e3      	LDI  R30,LOW(_M)
0005c1 e0f9      	LDI  R31,HIGH(_M)
0005c2 93fa      	ST   -Y,R31
0005c3 93ea      	ST   -Y,R30
0005c4 e0a4      	LDI  R26,LOW(_S)
0005c5 e0b9      	LDI  R27,HIGH(_S)
0005c6 940c 037d 	JMP  _rtc_get_time
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xA:
0005c8 91e0 0902 	LDS  R30,_H
0005ca 93ea      	ST   -Y,R30
0005cb 91e0 0903 	LDS  R30,_M
0005cd 93ea      	ST   -Y,R30
0005ce 91a0 0904 	LDS  R26,_S
0005d0 940c 0393 	JMP  _rtc_set_time
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
0005d2 940e 0335 	CALL _ds1302_read
0005d4 2fae      	MOV  R26,R30
0005d5 940c 055b 	JMP  _bcd2bin
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xC:
0005d7 933a      	ST   -Y,R19
0005d8 85ad      	LDD  R26,Y+13
0005d9 85be      	LDD  R27,Y+13+1
0005da 85ef      	LDD  R30,Y+15
0005db 89f8      	LDD  R31,Y+15+1
0005dc 9509      	ICALL
0005dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xD:
0005de 89e8      	LDD  R30,Y+16
0005df 89f9      	LDD  R31,Y+16+1
0005e0 9734      	SBIW R30,4
0005e1 8be8      	STD  Y+16,R30
0005e2 8bf9      	STD  Y+16+1,R31
0005e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
0005e4 85ad      	LDD  R26,Y+13
0005e5 85be      	LDD  R27,Y+13+1
0005e6 85ef      	LDD  R30,Y+15
0005e7 89f8      	LDD  R31,Y+15+1
0005e8 9509      	ICALL
0005e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xF:
0005ea 89a8      	LDD  R26,Y+16
0005eb 89b9      	LDD  R27,Y+16+1
0005ec 9614      	ADIW R26,4
0005ed 940e 07e1 	CALL __GETW1P
0005ef 83ee      	STD  Y+6,R30
0005f0 83ff      	STD  Y+6+1,R31
0005f1 81ae      	LDD  R26,Y+6
0005f2 81bf      	LDD  R27,Y+6+1
0005f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x10:
0005f4 89a8      	LDD  R26,Y+16
0005f5 89b9      	LDD  R27,Y+16+1
0005f6 9614      	ADIW R26,4
0005f7 940e 07e1 	CALL __GETW1P
0005f9 87ea      	STD  Y+10,R30
0005fa 87fb      	STD  Y+10+1,R31
0005fb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
0005fc 01de      	MOVW R26,R28
0005fd 961c      	ADIW R26,12
0005fe 940e 07ab 	CALL __ADDW2R15
000600 940e 07e1 	CALL __GETW1P
000602 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000603 9610      	adiw r26,0
000604 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000605 ed80     +LDI R24 , LOW ( 0x7D0 )
000606 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000607 9701     +SBIW R24 , 1
000608 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000609 95a8      	wdr
00060a 9711      	sbiw r26,1
00060b f7c9      	brne __delay_ms0
                 __delay_ms1:
00060c 9508      	ret
                 
                 __ROUND_REPACK:
00060d 2355      	TST  R21
00060e f442      	BRPL __REPACK
00060f 3850      	CPI  R21,0x80
000610 f411      	BRNE __ROUND_REPACK0
000611 ffe0      	SBRS R30,0
000612 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000613 9631      	ADIW R30,1
000614 1f69      	ADC  R22,R25
000615 1f79      	ADC  R23,R25
000616 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000617 e850      	LDI  R21,0x80
000618 2757      	EOR  R21,R23
000619 f411      	BRNE __REPACK0
00061a 935f      	PUSH R21
00061b c0ca      	RJMP __ZERORES
                 __REPACK0:
00061c 3f5f      	CPI  R21,0xFF
00061d f031      	BREQ __REPACK1
00061e 0f66      	LSL  R22
00061f 0c00      	LSL  R0
000620 9557      	ROR  R21
000621 9567      	ROR  R22
000622 2f75      	MOV  R23,R21
000623 9508      	RET
                 __REPACK1:
000624 935f      	PUSH R21
000625 2000      	TST  R0
000626 f00a      	BRMI __REPACK2
000627 c0ca      	RJMP __MAXRES
                 __REPACK2:
000628 c0c3      	RJMP __MINRES
                 
                 __UNPACK:
000629 e850      	LDI  R21,0x80
00062a 2e19      	MOV  R1,R25
00062b 2215      	AND  R1,R21
00062c 0f88      	LSL  R24
00062d 1f99      	ROL  R25
00062e 2795      	EOR  R25,R21
00062f 0f55      	LSL  R21
000630 9587      	ROR  R24
                 
                 __UNPACK1:
000631 e850      	LDI  R21,0x80
000632 2e07      	MOV  R0,R23
000633 2205      	AND  R0,R21
000634 0f66      	LSL  R22
000635 1f77      	ROL  R23
000636 2775      	EOR  R23,R21
000637 0f55      	LSL  R21
000638 9567      	ROR  R22
000639 9508      	RET
                 
                 __CFD1U:
00063a 9468      	SET
00063b c001      	RJMP __CFD1U0
                 __CFD1:
00063c 94e8      	CLT
                 __CFD1U0:
00063d 935f      	PUSH R21
00063e dff2      	RCALL __UNPACK1
00063f 3870      	CPI  R23,0x80
000640 f018      	BRLO __CFD10
000641 3f7f      	CPI  R23,0xFF
000642 f408      	BRCC __CFD10
000643 c0a2      	RJMP __ZERORES
                 __CFD10:
000644 e156      	LDI  R21,22
000645 1b57      	SUB  R21,R23
000646 f4aa      	BRPL __CFD11
000647 9551      	NEG  R21
000648 3058      	CPI  R21,8
000649 f40e      	BRTC __CFD19
00064a 3059      	CPI  R21,9
                 __CFD19:
00064b f030      	BRLO __CFD17
00064c efef      	SER  R30
00064d efff      	SER  R31
00064e ef6f      	SER  R22
00064f e77f      	LDI  R23,0x7F
000650 f977      	BLD  R23,7
000651 c01a      	RJMP __CFD15
                 __CFD17:
000652 2777      	CLR  R23
000653 2355      	TST  R21
000654 f0b9      	BREQ __CFD15
                 __CFD18:
000655 0fee      	LSL  R30
000656 1fff      	ROL  R31
000657 1f66      	ROL  R22
000658 1f77      	ROL  R23
000659 955a      	DEC  R21
00065a f7d1      	BRNE __CFD18
00065b c010      	RJMP __CFD15
                 __CFD11:
00065c 2777      	CLR  R23
                 __CFD12:
00065d 3058      	CPI  R21,8
00065e f028      	BRLO __CFD13
00065f 2fef      	MOV  R30,R31
000660 2ff6      	MOV  R31,R22
000661 2f67      	MOV  R22,R23
000662 5058      	SUBI R21,8
000663 cff9      	RJMP __CFD12
                 __CFD13:
000664 2355      	TST  R21
000665 f031      	BREQ __CFD15
                 __CFD14:
000666 9576      	LSR  R23
000667 9567      	ROR  R22
000668 95f7      	ROR  R31
000669 95e7      	ROR  R30
00066a 955a      	DEC  R21
00066b f7d1      	BRNE __CFD14
                 __CFD15:
00066c 2000      	TST  R0
00066d f40a      	BRPL __CFD16
00066e d144      	RCALL __ANEGD1
                 __CFD16:
00066f 915f      	POP  R21
000670 9508      	RET
                 
                 __CDF1U:
000671 9468      	SET
000672 c001      	RJMP __CDF1U0
                 __CDF1:
000673 94e8      	CLT
                 __CDF1U0:
000674 9730      	SBIW R30,0
000675 4060      	SBCI R22,0
000676 4070      	SBCI R23,0
000677 f0b1      	BREQ __CDF10
000678 2400      	CLR  R0
000679 f026      	BRTS __CDF11
00067a 2377      	TST  R23
00067b f412      	BRPL __CDF11
00067c 9400      	COM  R0
00067d d135      	RCALL __ANEGD1
                 __CDF11:
00067e 2e17      	MOV  R1,R23
00067f e17e      	LDI  R23,30
000680 2011      	TST  R1
                 __CDF12:
000681 f032      	BRMI __CDF13
000682 957a      	DEC  R23
000683 0fee      	LSL  R30
000684 1fff      	ROL  R31
000685 1f66      	ROL  R22
000686 1c11      	ROL  R1
000687 cff9      	RJMP __CDF12
                 __CDF13:
000688 2fef      	MOV  R30,R31
000689 2ff6      	MOV  R31,R22
00068a 2d61      	MOV  R22,R1
00068b 935f      	PUSH R21
00068c df8a      	RCALL __REPACK
00068d 915f      	POP  R21
                 __CDF10:
00068e 9508      	RET
                 
                 __SWAPACC:
00068f 934f      	PUSH R20
000690 01af      	MOVW R20,R30
000691 01fd      	MOVW R30,R26
000692 01da      	MOVW R26,R20
000693 01ab      	MOVW R20,R22
000694 01bc      	MOVW R22,R24
000695 01ca      	MOVW R24,R20
000696 2d40      	MOV  R20,R0
000697 2c01      	MOV  R0,R1
000698 2e14      	MOV  R1,R20
000699 914f      	POP  R20
00069a 9508      	RET
                 
                 __UADD12:
00069b 0fea      	ADD  R30,R26
00069c 1ffb      	ADC  R31,R27
00069d 1f68      	ADC  R22,R24
00069e 9508      	RET
                 
                 __NEGMAN1:
00069f 95e0      	COM  R30
0006a0 95f0      	COM  R31
0006a1 9560      	COM  R22
0006a2 5fef      	SUBI R30,-1
0006a3 4fff      	SBCI R31,-1
0006a4 4f6f      	SBCI R22,-1
0006a5 9508      	RET
                 
                 __SUBF12:
0006a6 935f      	PUSH R21
0006a7 df81      	RCALL __UNPACK
0006a8 3890      	CPI  R25,0x80
0006a9 f149      	BREQ __ADDF129
0006aa e850      	LDI  R21,0x80
0006ab 2615      	EOR  R1,R21
                 
                 __ADDF120:
0006ac 3870      	CPI  R23,0x80
0006ad f121      	BREQ __ADDF128
                 __ADDF121:
0006ae 2f57      	MOV  R21,R23
0006af 1b59      	SUB  R21,R25
0006b0 f12b      	BRVS __ADDF1211
0006b1 f412      	BRPL __ADDF122
0006b2 dfdc      	RCALL __SWAPACC
0006b3 cffa      	RJMP __ADDF121
                 __ADDF122:
0006b4 3158      	CPI  R21,24
0006b5 f018      	BRLO __ADDF123
0006b6 27aa      	CLR  R26
0006b7 27bb      	CLR  R27
0006b8 2788      	CLR  R24
                 __ADDF123:
0006b9 3058      	CPI  R21,8
0006ba f028      	BRLO __ADDF124
0006bb 2fab      	MOV  R26,R27
0006bc 2fb8      	MOV  R27,R24
0006bd 2788      	CLR  R24
0006be 5058      	SUBI R21,8
0006bf cff9      	RJMP __ADDF123
                 __ADDF124:
0006c0 2355      	TST  R21
0006c1 f029      	BREQ __ADDF126
                 __ADDF125:
0006c2 9586      	LSR  R24
0006c3 95b7      	ROR  R27
0006c4 95a7      	ROR  R26
0006c5 955a      	DEC  R21
0006c6 f7d9      	BRNE __ADDF125
                 __ADDF126:
0006c7 2d50      	MOV  R21,R0
0006c8 2551      	EOR  R21,R1
0006c9 f072      	BRMI __ADDF127
0006ca dfd0      	RCALL __UADD12
0006cb f438      	BRCC __ADDF129
0006cc 9567      	ROR  R22
0006cd 95f7      	ROR  R31
0006ce 95e7      	ROR  R30
0006cf 9573      	INC  R23
0006d0 f413      	BRVC __ADDF129
0006d1 c020      	RJMP __MAXRES
                 __ADDF128:
0006d2 dfbc      	RCALL __SWAPACC
                 __ADDF129:
0006d3 df43      	RCALL __REPACK
0006d4 915f      	POP  R21
0006d5 9508      	RET
                 __ADDF1211:
0006d6 f7d8      	BRCC __ADDF128
0006d7 cffb      	RJMP __ADDF129
                 __ADDF127:
0006d8 1bea      	SUB  R30,R26
0006d9 0bfb      	SBC  R31,R27
0006da 0b68      	SBC  R22,R24
0006db f051      	BREQ __ZERORES
0006dc f410      	BRCC __ADDF1210
0006dd 9400      	COM  R0
0006de dfc0      	RCALL __NEGMAN1
                 __ADDF1210:
0006df 2366      	TST  R22
0006e0 f392      	BRMI __ADDF129
0006e1 0fee      	LSL  R30
0006e2 1fff      	ROL  R31
0006e3 1f66      	ROL  R22
0006e4 957a      	DEC  R23
0006e5 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0006e6 27ee      	CLR  R30
0006e7 27ff      	CLR  R31
0006e8 2766      	CLR  R22
0006e9 2777      	CLR  R23
0006ea 915f      	POP  R21
0006eb 9508      	RET
                 
                 __MINRES:
0006ec efef      	SER  R30
0006ed efff      	SER  R31
0006ee e76f      	LDI  R22,0x7F
0006ef ef7f      	SER  R23
0006f0 915f      	POP  R21
0006f1 9508      	RET
                 
                 __MAXRES:
0006f2 efef      	SER  R30
0006f3 efff      	SER  R31
0006f4 e76f      	LDI  R22,0x7F
0006f5 e77f      	LDI  R23,0x7F
0006f6 915f      	POP  R21
0006f7 9508      	RET
                 
                 __MULF12:
0006f8 935f      	PUSH R21
0006f9 df2f      	RCALL __UNPACK
0006fa 3870      	CPI  R23,0x80
0006fb f351      	BREQ __ZERORES
0006fc 3890      	CPI  R25,0x80
0006fd f341      	BREQ __ZERORES
0006fe 2401      	EOR  R0,R1
0006ff 9408      	SEC
000700 1f79      	ADC  R23,R25
000701 f423      	BRVC __MULF124
000702 f31c      	BRLT __ZERORES
                 __MULF125:
000703 2000      	TST  R0
000704 f33a      	BRMI __MINRES
000705 cfec      	RJMP __MAXRES
                 __MULF124:
000706 920f      	PUSH R0
000707 931f      	PUSH R17
000708 932f      	PUSH R18
000709 933f      	PUSH R19
00070a 934f      	PUSH R20
00070b 2711      	CLR  R17
00070c 2722      	CLR  R18
00070d 2799      	CLR  R25
00070e 9f68      	MUL  R22,R24
00070f 01a0      	MOVW R20,R0
000710 9f8f      	MUL  R24,R31
000711 2d30      	MOV  R19,R0
000712 0d41      	ADD  R20,R1
000713 1f59      	ADC  R21,R25
000714 9f6b      	MUL  R22,R27
000715 0d30      	ADD  R19,R0
000716 1d41      	ADC  R20,R1
000717 1f59      	ADC  R21,R25
000718 9f8e      	MUL  R24,R30
000719 d027      	RCALL __MULF126
00071a 9fbf      	MUL  R27,R31
00071b d025      	RCALL __MULF126
00071c 9f6a      	MUL  R22,R26
00071d d023      	RCALL __MULF126
00071e 9fbe      	MUL  R27,R30
00071f d01d      	RCALL __MULF127
000720 9faf      	MUL  R26,R31
000721 d01b      	RCALL __MULF127
000722 9fae      	MUL  R26,R30
000723 0d11      	ADD  R17,R1
000724 1f29      	ADC  R18,R25
000725 1f39      	ADC  R19,R25
000726 1f49      	ADC  R20,R25
000727 1f59      	ADC  R21,R25
000728 2fe3      	MOV  R30,R19
000729 2ff4      	MOV  R31,R20
00072a 2f65      	MOV  R22,R21
00072b 2f52      	MOV  R21,R18
00072c 914f      	POP  R20
00072d 913f      	POP  R19
00072e 912f      	POP  R18
00072f 911f      	POP  R17
000730 900f      	POP  R0
000731 2366      	TST  R22
000732 f02a      	BRMI __MULF122
000733 0f55      	LSL  R21
000734 1fee      	ROL  R30
000735 1fff      	ROL  R31
000736 1f66      	ROL  R22
000737 c002      	RJMP __MULF123
                 __MULF122:
000738 9573      	INC  R23
000739 f24b      	BRVS __MULF125
                 __MULF123:
00073a ded2      	RCALL __ROUND_REPACK
00073b 915f      	POP  R21
00073c 9508      	RET
                 
                 __MULF127:
00073d 0d10      	ADD  R17,R0
00073e 1d21      	ADC  R18,R1
00073f 1f39      	ADC  R19,R25
000740 c002      	RJMP __MULF128
                 __MULF126:
000741 0d20      	ADD  R18,R0
000742 1d31      	ADC  R19,R1
                 __MULF128:
000743 1f49      	ADC  R20,R25
000744 1f59      	ADC  R21,R25
000745 9508      	RET
                 
                 __DIVF21:
000746 935f      	PUSH R21
000747 dee1      	RCALL __UNPACK
000748 3870      	CPI  R23,0x80
000749 f421      	BRNE __DIVF210
00074a 2011      	TST  R1
                 __DIVF211:
00074b f40a      	BRPL __DIVF219
00074c cf9f      	RJMP __MINRES
                 __DIVF219:
00074d cfa4      	RJMP __MAXRES
                 __DIVF210:
00074e 3890      	CPI  R25,0x80
00074f f409      	BRNE __DIVF218
                 __DIVF217:
000750 cf95      	RJMP __ZERORES
                 __DIVF218:
000751 2401      	EOR  R0,R1
000752 9408      	SEC
000753 0b97      	SBC  R25,R23
000754 f41b      	BRVC __DIVF216
000755 f3d4      	BRLT __DIVF217
000756 2000      	TST  R0
000757 cff3      	RJMP __DIVF211
                 __DIVF216:
000758 2f79      	MOV  R23,R25
000759 931f      	PUSH R17
00075a 932f      	PUSH R18
00075b 933f      	PUSH R19
00075c 934f      	PUSH R20
00075d 2411      	CLR  R1
00075e 2711      	CLR  R17
00075f 2722      	CLR  R18
000760 2733      	CLR  R19
000761 2744      	CLR  R20
000762 2755      	CLR  R21
000763 e290      	LDI  R25,32
                 __DIVF212:
000764 17ae      	CP   R26,R30
000765 07bf      	CPC  R27,R31
000766 0786      	CPC  R24,R22
000767 0741      	CPC  R20,R17
000768 f030      	BRLO __DIVF213
000769 1bae      	SUB  R26,R30
00076a 0bbf      	SBC  R27,R31
00076b 0b86      	SBC  R24,R22
00076c 0b41      	SBC  R20,R17
00076d 9408      	SEC
00076e c001      	RJMP __DIVF214
                 __DIVF213:
00076f 9488      	CLC
                 __DIVF214:
000770 1f55      	ROL  R21
000771 1f22      	ROL  R18
000772 1f33      	ROL  R19
000773 1c11      	ROL  R1
000774 1faa      	ROL  R26
000775 1fbb      	ROL  R27
000776 1f88      	ROL  R24
000777 1f44      	ROL  R20
000778 959a      	DEC  R25
000779 f751      	BRNE __DIVF212
00077a 01f9      	MOVW R30,R18
00077b 2d61      	MOV  R22,R1
00077c 914f      	POP  R20
00077d 913f      	POP  R19
00077e 912f      	POP  R18
00077f 911f      	POP  R17
000780 2366      	TST  R22
000781 f032      	BRMI __DIVF215
000782 0f55      	LSL  R21
000783 1fee      	ROL  R30
000784 1fff      	ROL  R31
000785 1f66      	ROL  R22
000786 957a      	DEC  R23
000787 f243      	BRVS __DIVF217
                 __DIVF215:
000788 de84      	RCALL __ROUND_REPACK
000789 915f      	POP  R21
00078a 9508      	RET
                 
                 __CMPF12:
00078b 2399      	TST  R25
00078c f09a      	BRMI __CMPF120
00078d 2377      	TST  R23
00078e f042      	BRMI __CMPF121
00078f 1797      	CP   R25,R23
000790 f048      	BRLO __CMPF122
000791 f429      	BRNE __CMPF121
000792 17ae      	CP   R26,R30
000793 07bf      	CPC  R27,R31
000794 0786      	CPC  R24,R22
000795 f020      	BRLO __CMPF122
000796 f031      	BREQ __CMPF123
                 __CMPF121:
000797 9498      	CLZ
000798 9488      	CLC
000799 9508      	RET
                 __CMPF122:
00079a 9498      	CLZ
00079b 9408      	SEC
00079c 9508      	RET
                 __CMPF123:
00079d 9418      	SEZ
00079e 9488      	CLC
00079f 9508      	RET
                 __CMPF120:
0007a0 2377      	TST  R23
0007a1 f7c2      	BRPL __CMPF122
0007a2 1797      	CP   R25,R23
0007a3 f398      	BRLO __CMPF121
0007a4 f7a9      	BRNE __CMPF122
0007a5 17ea      	CP   R30,R26
0007a6 07fb      	CPC  R31,R27
0007a7 0768      	CPC  R22,R24
0007a8 f388      	BRLO __CMPF122
0007a9 f399      	BREQ __CMPF123
0007aa cfec      	RJMP __CMPF121
                 
                 __ADDW2R15:
0007ab 2400      	CLR  R0
0007ac 0daf      	ADD  R26,R15
0007ad 1db0      	ADC  R27,R0
0007ae 9508      	RET
                 
                 __ANEGW1:
0007af 95f1      	NEG  R31
0007b0 95e1      	NEG  R30
0007b1 40f0      	SBCI R31,0
0007b2 9508      	RET
                 
                 __ANEGD1:
0007b3 95f0      	COM  R31
0007b4 9560      	COM  R22
0007b5 9570      	COM  R23
0007b6 95e1      	NEG  R30
0007b7 4fff      	SBCI R31,-1
0007b8 4f6f      	SBCI R22,-1
0007b9 4f7f      	SBCI R23,-1
0007ba 9508      	RET
                 
                 __CWD1:
0007bb 2f6f      	MOV  R22,R31
0007bc 0f66      	ADD  R22,R22
0007bd 0b66      	SBC  R22,R22
0007be 2f76      	MOV  R23,R22
0007bf 9508      	RET
                 
                 __DIVW21U:
0007c0 2400      	CLR  R0
0007c1 2411      	CLR  R1
0007c2 e190      	LDI  R25,16
                 __DIVW21U1:
0007c3 0faa      	LSL  R26
0007c4 1fbb      	ROL  R27
0007c5 1c00      	ROL  R0
0007c6 1c11      	ROL  R1
0007c7 1a0e      	SUB  R0,R30
0007c8 0a1f      	SBC  R1,R31
0007c9 f418      	BRCC __DIVW21U2
0007ca 0e0e      	ADD  R0,R30
0007cb 1e1f      	ADC  R1,R31
0007cc c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0007cd 60a1      	SBR  R26,1
                 __DIVW21U3:
0007ce 959a      	DEC  R25
0007cf f799      	BRNE __DIVW21U1
0007d0 01fd      	MOVW R30,R26
0007d1 01d0      	MOVW R26,R0
0007d2 9508      	RET
                 
                 __MODW21:
0007d3 94e8      	CLT
0007d4 ffb7      	SBRS R27,7
0007d5 c004      	RJMP __MODW211
0007d6 95a0      	COM  R26
0007d7 95b0      	COM  R27
0007d8 9611      	ADIW R26,1
0007d9 9468      	SET
                 __MODW211:
0007da fdf7      	SBRC R31,7
0007db dfd3      	RCALL __ANEGW1
0007dc dfe3      	RCALL __DIVW21U
0007dd 01fd      	MOVW R30,R26
0007de f40e      	BRTC __MODW212
0007df dfcf      	RCALL __ANEGW1
                 __MODW212:
0007e0 9508      	RET
                 
                 __GETW1P:
0007e1 91ed      	LD   R30,X+
0007e2 91fc      	LD   R31,X
0007e3 9711      	SBIW R26,1
0007e4 9508      	RET
                 
                 __GETW1PF:
0007e5 9005      	LPM  R0,Z+
0007e6 91f4      	LPM  R31,Z
0007e7 2de0      	MOV  R30,R0
0007e8 9508      	RET
                 
                 __GETD1S0:
0007e9 81e8      	LD   R30,Y
0007ea 81f9      	LDD  R31,Y+1
0007eb 816a      	LDD  R22,Y+2
0007ec 817b      	LDD  R23,Y+3
0007ed 9508      	RET
                 
                 __PUTPARD1:
0007ee 937a      	ST   -Y,R23
0007ef 936a      	ST   -Y,R22
0007f0 93fa      	ST   -Y,R31
0007f1 93ea      	ST   -Y,R30
0007f2 9508      	RET
                 
                 __PUTPARD2:
0007f3 939a      	ST   -Y,R25
0007f4 938a      	ST   -Y,R24
0007f5 93ba      	ST   -Y,R27
0007f6 93aa      	ST   -Y,R26
0007f7 9508      	RET
                 
                 __SWAPD12:
0007f8 2e18      	MOV  R1,R24
0007f9 2f86      	MOV  R24,R22
0007fa 2d61      	MOV  R22,R1
0007fb 2e19      	MOV  R1,R25
0007fc 2f97      	MOV  R25,R23
0007fd 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0007fe 2e1b      	MOV  R1,R27
0007ff 2fbf      	MOV  R27,R31
000800 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000801 2e1a      	MOV  R1,R26
000802 2fae      	MOV  R26,R30
000803 2de1      	MOV  R30,R1
000804 9508      	RET
                 
                 __EEPROMRDB:
000805 99f9      	SBIC EECR,EEWE
000806 cffe      	RJMP __EEPROMRDB
000807 93ff      	PUSH R31
000808 b7ff      	IN   R31,SREG
000809 94f8      	CLI
00080a bda1      	OUT  EEARL,R26
00080b bdb2      	OUT  EEARH,R27
00080c 9af8      	SBI  EECR,EERE
00080d b5e0      	IN   R30,EEDR
00080e bfff      	OUT  SREG,R31
00080f 91ff      	POP  R31
000810 9508      	RET
                 
                 __EEPROMWRB:
000811 9bf9      	SBIS EECR,EEWE
000812 c002      	RJMP __EEPROMWRB1
000813 95a8      	WDR
000814 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000815 b79f      	IN   R25,SREG
000816 94f8      	CLI
000817 bda1      	OUT  EEARL,R26
000818 bdb2      	OUT  EEARH,R27
000819 9af8      	SBI  EECR,EERE
00081a b580      	IN   R24,EEDR
00081b 17e8      	CP   R30,R24
00081c f019      	BREQ __EEPROMWRB0
00081d bde0      	OUT  EEDR,R30
00081e 9afa      	SBI  EECR,EEMWE
00081f 9af9      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000820 bf9f      	OUT  SREG,R25
000821 9508      	RET
                 
                 __CPD10:
000822 9730      	SBIW R30,0
000823 4060      	SBCI R22,0
000824 4070      	SBCI R23,0
000825 9508      	RET
                 
                 __SAVELOCR6:
000826 935a      	ST   -Y,R21
                 __SAVELOCR5:
000827 934a      	ST   -Y,R20
                 __SAVELOCR4:
000828 933a      	ST   -Y,R19
                 __SAVELOCR3:
000829 932a      	ST   -Y,R18
                 __SAVELOCR2:
00082a 931a      	ST   -Y,R17
00082b 930a      	ST   -Y,R16
00082c 9508      	RET
                 
                 __LOADLOCR6:
00082d 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00082e 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00082f 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000830 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000831 8119      	LDD  R17,Y+1
000832 8108      	LD   R16,Y
000833 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000834 0fac      	ADD  R26,R28
000835 1fbd      	ADC  R27,R29
                 __INITLOC0:
000836 9005      	LPM  R0,Z+
000837 920d      	ST   X+,R0
000838 958a      	DEC  R24
000839 f7e1      	BRNE __INITLOC0
00083a 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

AT90USB1286 register use summary:
r0 :  36 r1 :  33 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  46 r17:  40 r18:  22 r19:  39 r20:  39 r21:  71 r22:  66 r23:  56 
r24:  56 r25:  40 r26: 227 r27:  87 r28:  24 r29:   2 r30: 370 r31: 132 
x  :  32 y  : 255 z  :   8 
Registers used: 22 out of 35 (62.9%)

AT90USB1286 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  23 add   :  17 
adiw  :  34 and   :   2 andi  :  16 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   6 brcs  :   0 break :   0 breq  :  34 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  25 
brlt  :   3 brmi  :  11 brne  :  63 brpl  :   8 brsh  :   3 brtc  :   2 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   0 call  : 120 
cbi   :  12 cbr   :   0 clc   :   4 clh   :   0 cli   :   3 cln   :   0 
clr   :  43 cls   :   0 clt   :   3 clv   :   0 clz   :   2 com   :  10 
cp    :  11 cpc   :  13 cpi   :  69 cpse  :   0 dec   :  19 des   :   0 
elpm  :   0 eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   4 inc   :   2 jmp   :  52 ld    :  39 ldd   : 111 
ldi   : 197 lds   :  40 lpm   :   8 lsl   :  15 lsr   :   2 mov   :  63 
movw  :  30 mul   :  10 muls  :   0 mulsu :   0 neg   :   4 nop   :   4 
or    :   0 ori   :  13 out   :  15 pop   :  20 push  :  19 rcall :  43 
ret   :  66 reti  :   0 rjmp  : 109 rol   :  27 ror   :  14 sbc   :   9 
sbci  :  10 sbi   :  24 sbic  :   6 sbis  :   1 sbiw  :  26 sbr   :   1 
sbrc  :   3 sbrs  :  12 sec   :   5 seh   :   0 sei   :   0 sen   :   0 
ser   :   8 ses   :   0 set   :   3 sev   :   0 sez   :   1 sleep :   0 
spm   :   0 st    : 105 std   :  34 sts   :  34 sub   :   6 subi  :  32 
swap  :   2 tst   :  21 wdr   :   2 
Instructions used: 78 out of 117 (66.7%)

AT90USB1286 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001076   4144     70   4214  131072   3.2%
[.dseg] 0x000100 0x000920      0     32     32    8192   0.4%
[.eseg] 0x000000 0x000002      0      2      2    4096   0.0%

Assembly complete, 0 errors, 0 warnings

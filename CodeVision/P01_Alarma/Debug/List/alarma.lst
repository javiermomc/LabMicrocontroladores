
AVRASM ver. 2.1.30  C:\Users\980006738\Documents\Semestre 8\Lab de Micros\LabMicrocontroladores\CodeVision\P01_Alarma\Debug\List\alarma.asm Tue Feb 18 16:44:44 2020

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : AT90USB1286
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 2048 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: Off
                 ;Smart register allocation: Off
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME AT90USB1286
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 8192
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR1A=0xC8
                 	.EQU UDR1=0xCE
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x20FF
                 	.EQU __DSTACK_SIZE=0x0800
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 006f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
000046 940c 0000 	JMP  0x00
000048 940c 0000 	JMP  0x00
00004a 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00004c 2710
00004d 03e8
00004e 0064
00004f 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000050 0001      	.DB  0x1,0x0
                 _tbl16_G101:
000051 1000
000052 0100
000053 0010
000054 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000055 0303
000056 0203
000057 0c02
000058 0800      	.DB  0x3,0x3,0x3,0x2,0x2,0xC,0x0,0x8
000059 0100
00005a 0600      	.DB  0x0,0x1,0x0,0x6
                 _0x0:
00005b 3a48
00005c 3025
00005d 6932
00005e 253a      	.DB  0x48,0x3A,0x25,0x30,0x32,0x69,0x3A,0x25
00005f 3230
000060 3a69
000061 3025
000062 6932      	.DB  0x30,0x32,0x69,0x3A,0x25,0x30,0x32,0x69
000063 5420
000064 253a
000065 3230
000066 0069      	.DB  0x20,0x54,0x3A,0x25,0x30,0x32,0x69,0x0
000067 3a41
000068 2520
000069 3230
00006a 3a69      	.DB  0x41,0x3A,0x20,0x25,0x30,0x32,0x69,0x3A
00006b 3025
00006c 6932
00006d 2020
00006e 0020      	.DB  0x25,0x30,0x32,0x69,0x20,0x20,0x20,0x0
                 __RESET:
00006f 94f8      	CLI
000070 27ee      	CLR  R30
000071 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000072 e0f1      	LDI  R31,1
000073 bff5      	OUT  MCUCR,R31
000074 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000075 e08d      	LDI  R24,(14-2)+1
000076 e0a2      	LDI  R26,2
000077 27bb      	CLR  R27
                 __CLEAR_REG:
000078 93ed      	ST   X+,R30
000079 958a      	DEC  R24
00007a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00007b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00007c e290      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00007d e0a0      	LDI  R26,LOW(__SRAM_START)
00007e e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00007f 93ed      	ST   X+,R30
000080 9701      	SBIW R24,1
000081 f7e9      	BRNE __CLEAR_SRAM
                 
000082 bf8b      	OUT  RAMPZ,R24
                 
                 ;GPIOR0 INITIALIZATION
000083 e0e0      	LDI  R30,__GPIOR0_INIT
000084 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000085 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000086 bfed      	OUT  SPL,R30
000087 e2e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000088 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000089 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008a e0d9      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008b 940c 0223 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x900
                 
                 	.CSEG
                 ;/*
                 ; * alarma.c
                 ; *
                 ; * Created: 11-Feb-20 5:39:55 PM
                 ; * Author: iavie
                 ; */
                 ;
                 ;// LCD config
                 ;#asm
                     .equ __lcd_port=0x11
                     .equ __lcd_EN=4
                     .equ __lcd_RS=5
                     .equ __lcd_D4=0
                     .equ __lcd_D5=1
                     .equ __lcd_D6=2
                     .equ __lcd_D7=3
                 ; 0000 0011 #endasm
                 ;
                 ;// DS1302 config
                 ;#asm
                 	.equ __ds1302_port=0x0B
                 	.equ __ds1302_io=2
                 	.equ __ds1302_sclk=1
                 	.equ __ds1302_rst=0
                 ; 0000 0019 #endasm
                 ;
                 ;#include <90usb1286.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <ds1302.h>
                 ;#include <display.h>
                 
                 	.CSEG
                 _SetupLCD:
                 ; .FSTART _SetupLCD
00008d 972c      	SBIW R28,12
00008e e08c      	LDI  R24,12
00008f e0a0      	LDI  R26,LOW(0)
000090 e0b0      	LDI  R27,HIGH(0)
000091 eaea      	LDI  R30,LOW(_0x3*2)
000092 e0f0      	LDI  R31,HIGH(_0x3*2)
000093 940e 081e 	CALL __INITLOCB
000095 930a      	ST   -Y,R16
                 ;	TableSetup -> Y+1
                 ;	i -> R16
                 ; 0000 001D     SBI __lcd_port-1,__lcd_EN
000096 9a84          SBI __lcd_port-1,__lcd_EN
000097 9a85          SBI __lcd_port-1,__lcd_RS
000098 9a80          SBI __lcd_port-1,__lcd_D4
000099 9a81          SBI __lcd_port-1,__lcd_D5
00009a 9a82          SBI __lcd_port-1,__lcd_D6
00009b 9a83          SBI __lcd_port-1,__lcd_D7
00009c e3a2      	LDI  R26,LOW(50)
00009d e0b0      	LDI  R27,0
00009e 940e 05ed 	CALL _delay_ms
0000a0 e000      	LDI  R16,LOW(0)
                 _0x5:
0000a1 300c      	CPI  R16,12
0000a2 f468      	BRSH _0x6
0000a3 940e 0575 	CALL SUBOPT_0x0
0000a5 2fe0      	MOV  R30,R16
0000a6 e0f0      	LDI  R31,0
0000a7 01de      	MOVW R26,R28
0000a8 9611      	ADIW R26,1
0000a9 0fae      	ADD  R26,R30
0000aa 1fbf      	ADC  R27,R31
0000ab 91ac      	LD   R26,X
0000ac 940e 0579 	CALL SUBOPT_0x1
0000ae 5f0f      	SUBI R16,-1
0000af cff1      	RJMP _0x5
                 _0x6:
0000b0 e0ec      	LDI  R30,LOW(12)
0000b1 93e0 0900 	STS  _cursor,R30
0000b3 91a0 0900 	LDS  R26,_cursor
0000b5 d021      	RCALL _WriteComandLCD
0000b6 8108      	LDD  R16,Y+0
0000b7 962d      	ADIW R28,13
0000b8 9508      	RET
                 ; .FEND
                 _PulseEn:
                 ; .FSTART _PulseEn
0000b9 9a8c          SBI __lcd_port,__lcd_EN  // EN=1;
0000ba 988c          CBI __lcd_port,__lcd_EN // EN=0;
0000bb 9508      	RET
                 ; .FEND
                 _SendDataBitsLCD:
                 ; .FSTART _SendDataBitsLCD
0000bc 93aa      	ST   -Y,R26
                 ;	dato -> Y+0
0000bd 81e8      	LD   R30,Y
0000be 70e8      	ANDI R30,LOW(0x8)
0000bf f011      	BREQ _0x7
0000c0 9a8b      	SBI __lcd_port,__lcd_D7
0000c1 c001      	RJMP _0x8
                 _0x7:
0000c2 988b      	CBI __lcd_port,__lcd_D7
                 _0x8:
0000c3 81e8      	LD   R30,Y
0000c4 70e4      	ANDI R30,LOW(0x4)
0000c5 f011      	BREQ _0x9
0000c6 9a8a      	SBI __lcd_port,__lcd_D6
0000c7 c001      	RJMP _0xA
                 _0x9:
0000c8 988a      	CBI __lcd_port,__lcd_D6
                 _0xA:
0000c9 81e8      	LD   R30,Y
0000ca 70e2      	ANDI R30,LOW(0x2)
0000cb f011      	BREQ _0xB
0000cc 9a89      	SBI __lcd_port,__lcd_D5
0000cd c001      	RJMP _0xC
                 _0xB:
0000ce 9889      	CBI __lcd_port,__lcd_D5
                 _0xC:
0000cf 81e8      	LD   R30,Y
0000d0 70e1      	ANDI R30,LOW(0x1)
0000d1 f011      	BREQ _0xD
0000d2 9a88      	SBI __lcd_port,__lcd_D4
0000d3 c001      	RJMP _0xE
                 _0xD:
0000d4 9888      	CBI __lcd_port,__lcd_D4
                 _0xE:
0000d5 940c 0338 	JMP  _0x20A0005
                 ; .FEND
                 _WriteComandLCD:
                 ; .FSTART _WriteComandLCD
0000d7 93aa      	ST   -Y,R26
0000d8 930a      	ST   -Y,R16
                 ;	Comando -> Y+1
                 ;	tempComando -> R16
0000d9 988d      	CBI __lcd_port,__lcd_RS
0000da 940e 0575 	CALL SUBOPT_0x0
0000dc 940e 057d 	CALL SUBOPT_0x2
0000de 940e 0584 	CALL SUBOPT_0x3
0000e0 dfd8      	RCALL _PulseEn
0000e1 8108      	LDD  R16,Y+0
0000e2 940c 0345 	JMP  _0x20A0004
                 ; .FEND
                 _CharLCD:
                 ; .FSTART _CharLCD
0000e4 93aa      	ST   -Y,R26
0000e5 930a      	ST   -Y,R16
                 ;	dato -> Y+1
                 ;	tempdato -> R16
0000e6 9a8d      	SBI __lcd_port,__lcd_RS
0000e7 940e 0575 	CALL SUBOPT_0x0
0000e9 940e 057d 	CALL SUBOPT_0x2
0000eb 940e 0584 	CALL SUBOPT_0x3
0000ed dfcb      	RCALL _PulseEn
0000ee 8108      	LDD  R16,Y+0
0000ef 940c 0345 	JMP  _0x20A0004
                 ; .FEND
                 ;	i -> R16
                 ;	tiempo -> Y+1
                 ;	i -> R16
                 _StringLCDVar:
                 ; .FSTART _StringLCDVar
0000f1 93ba      	ST   -Y,R27
0000f2 93aa      	ST   -Y,R26
0000f3 930a      	ST   -Y,R16
                 ;	Mensaje -> Y+1
                 ;	i -> R16
0000f4 e000      	LDI  R16,LOW(0)
                 _0x16:
0000f5 2fe0      	MOV  R30,R16
0000f6 5f0f      	SUBI R16,-1
0000f7 81a9      	LDD  R26,Y+1
0000f8 81ba      	LDD  R27,Y+1+1
0000f9 e0f0      	LDI  R31,0
0000fa 0fae      	ADD  R26,R30
0000fb 1fbf      	ADC  R27,R31
0000fc 91ac      	LD   R26,X
0000fd dfe6      	RCALL _CharLCD
0000fe 81a9      	LDD  R26,Y+1
0000ff 81ba      	LDD  R27,Y+1+1
000100 27ee      	CLR  R30
000101 0fa0      	ADD  R26,R16
000102 1fbe      	ADC  R27,R30
000103 91ec      	LD   R30,X
000104 30e0      	CPI  R30,0
000105 f779      	BRNE _0x16
000106 8108      	LDD  R16,Y+0
000107 940c 039b 	JMP  _0x20A0003
                 ; .FEND
                 _MoveCursor:
                 ; .FSTART _MoveCursor
000109 93aa      	ST   -Y,R26
                 ;	x -> Y+1
                 ;	y -> Y+0
00010a 81e8      	LD   R30,Y
00010b e0f0      	LDI  R31,0
00010c 9730      	SBIW R30,0
00010d f419      	BRNE _0x1B
00010e 81a9      	LDD  R26,Y+1
00010f 58a0      	SUBI R26,-LOW(128)
000110 c014      	RJMP _0x4D
                 _0x1B:
000111 30e1      	CPI  R30,LOW(0x1)
000112 e0a0      	LDI  R26,HIGH(0x1)
000113 07fa      	CPC  R31,R26
000114 f419      	BRNE _0x1C
000115 81a9      	LDD  R26,Y+1
000116 54a0      	SUBI R26,-LOW(192)
000117 c00d      	RJMP _0x4D
                 _0x1C:
000118 30e2      	CPI  R30,LOW(0x2)
000119 e0a0      	LDI  R26,HIGH(0x2)
00011a 07fa      	CPC  R31,R26
00011b f419      	BRNE _0x1D
00011c 81a9      	LDD  R26,Y+1
00011d 56ac      	SUBI R26,-LOW(148)
00011e c006      	RJMP _0x4D
                 _0x1D:
00011f 30e3      	CPI  R30,LOW(0x3)
000120 e0a0      	LDI  R26,HIGH(0x3)
000121 07fa      	CPC  R31,R26
000122 f419      	BRNE _0x1A
000123 81a9      	LDD  R26,Y+1
000124 52ac      	SUBI R26,-LOW(212)
                 _0x4D:
000125 dfb1      	RCALL _WriteComandLCD
                 _0x1A:
000126 940c 0345 	JMP  _0x20A0004
                 ; .FEND
                 ;	NoCaracter -> Y+3
                 ;	datos -> Y+1
                 ;	i -> R16
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;// Alarm
                 ;
                 ;unsigned char alarmFlag; // Alarm flag to turn alarm on and off
                 ;eeprom unsigned char AH, AM; // Variables for alarm on EEPROM
                 ;
                 ;unsigned char H=0,M=0,S=0; // Variables for clock
                 ;
                 ;unsigned char time[16];
                 ;
                 ;// ADC
                 ;
                 ;// ADC variables
                 ;float temperature;
                 ;unsigned int Temp;
                 ;
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0035 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0036 ADMUX=adc_input | ADC_VREF_TYPE;
000128 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000129 81e8      	LD   R30,Y
00012a 93e0 007c 	STS  124,R30
                 ; 0000 0037 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0038 delay_us(10);
                +
00012c e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00012d 958a     +DEC R24
00012e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0039 // Start the AD conversion
                 ; 0000 003A ADCSRA|=(1<<ADSC);
00012f 91e0 007a 	LDS  R30,122
000131 64e0      	ORI  R30,0x40
000132 93e0 007a 	STS  122,R30
                 ; 0000 003B // Wait for the AD conversion to complete
                 ; 0000 003C while ((ADCSRA & (1<<ADIF))==0);
                 _0x22:
000134 91e0 007a 	LDS  R30,122
000136 71e0      	ANDI R30,LOW(0x10)
000137 f3e1      	BREQ _0x22
                 ; 0000 003D ADCSRA|=(1<<ADIF);
000138 91e0 007a 	LDS  R30,122
00013a 61e0      	ORI  R30,0x10
00013b 93e0 007a 	STS  122,R30
                 ; 0000 003E return ADCW;
00013d 91e0 0078 	LDS  R30,120
00013f 91f0 0079 	LDS  R31,120+1
000141 940c 0338 	JMP  _0x20A0005
                 ; 0000 003F }
                 ; .FEND
                 ;
                 ;
                 ;// Update ADC function
                 ;void updateADC(){
                 ; 0000 0043 void updateADC(){
                 _updateADC:
                 ; .FSTART _updateADC
                 ; 0000 0044     // Convert ADC values to temperature
                 ; 0000 0045     temperature = (read_adc(7)*256.0)/1024.0; // Agus nos dio esta funcion
000143 e0a7      	LDI  R26,LOW(7)
000144 dfe3      	RCALL _read_adc
000145 2766      	CLR  R22
000146 2777      	CLR  R23
000147 940e 065d 	CALL __CDF1
                +
000149 e0a0     +LDI R26 , LOW ( 0x43800000 )
00014a e0b0     +LDI R27 , HIGH ( 0x43800000 )
00014b e880     +LDI R24 , BYTE3 ( 0x43800000 )
00014c e493     +LDI R25 , BYTE4 ( 0x43800000 )
                 	__GETD2N 0x43800000
00014d 940e 06e2 	CALL __MULF12
00014f 01df      	MOVW R26,R30
000150 01cb      	MOVW R24,R22
                +
000151 e0e0     +LDI R30 , LOW ( 0x44800000 )
000152 e0f0     +LDI R31 , HIGH ( 0x44800000 )
000153 e860     +LDI R22 , BYTE3 ( 0x44800000 )
000154 e474     +LDI R23 , BYTE4 ( 0x44800000 )
                 	__GETD1N 0x44800000
000155 940e 0730 	CALL __DIVF21
000157 93e0 0915 	STS  _temperature,R30
000159 93f0 0916 	STS  _temperature+1,R31
00015b 9360 0917 	STS  _temperature+2,R22
00015d 9370 0918 	STS  _temperature+3,R23
                 ; 0000 0046     Temp = temperature;
00015f e1a9      	LDI  R26,LOW(_Temp)
000160 e0b9      	LDI  R27,HIGH(_Temp)
000161 940e 0624 	CALL __CFD1U
000163 93ed      	ST   X+,R30
000164 93fc      	ST   X,R31
                 ; 0000 0047     // TEMPORAL print statement for DEV purposes only
                 ; 0000 0048 }
000165 9508      	RET
                 ; .FEND
                 ;
                 ;// Counter
                 ;unsigned char i=0;
                 ;
                 ;// Tone
                 ;// Play frequency function
                 ;void tono(float freq){
                 ; 0000 004F void tono(float freq){
                 _tono:
                 ; .FSTART _tono
                 ; 0000 0050     if(freq == 0)
000166 940e 07dd 	CALL __PUTPARD2
                 ;	freq -> Y+0
000168 940e 07d3 	CALL __GETD1S0
00016a 940e 080c 	CALL __CPD10
00016c f421      	BRNE _0x25
                 ; 0000 0051         TCCR1B=0x00;
00016d e0e0      	LDI  R30,LOW(0)
00016e 93e0 0081 	STS  129,R30
                 ; 0000 0052     else{
000170 c042      	RJMP _0x26
                 _0x25:
                 ; 0000 0053         float cuentas;
                 ; 0000 0054         unsigned int cuentasEnt;
                 ; 0000 0055 
                 ; 0000 0056         cuentas = 500000.0/freq;
000171 9726      	SBIW R28,6
                 ;	freq -> Y+6
                 ;	cuentas -> Y+2
                 ;	cuentasEnt -> Y+0
                +
000172 81ee     +LDD R30 , Y + 6
000173 81ff     +LDD R31 , Y + 6 + 1
000174 8568     +LDD R22 , Y + 6 + 2
000175 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
000176 e0a0     +LDI R26 , LOW ( 0x48F42400 )
000177 e2b4     +LDI R27 , HIGH ( 0x48F42400 )
000178 ef84     +LDI R24 , BYTE3 ( 0x48F42400 )
000179 e498     +LDI R25 , BYTE4 ( 0x48F42400 )
                 	__GETD2N 0x48F42400
00017a 940e 0730 	CALL __DIVF21
                +
00017c 83ea     +STD Y + 2 , R30
00017d 83fb     +STD Y + 2 + 1 , R31
00017e 836c     +STD Y + 2 + 2 , R22
00017f 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 0057         cuentasEnt = cuentas;
000180 01de      	MOVW R26,R28
000181 940e 0624 	CALL __CFD1U
000183 93ed      	ST   X+,R30
000184 93fc      	ST   X,R31
                 ; 0000 0058         if(cuentas-cuentasEnt>=0.5)
000185 81e8      	LD   R30,Y
000186 81f9      	LDD  R31,Y+1
                +
000187 81aa     +LDD R26 , Y + 2
000188 81bb     +LDD R27 , Y + 2 + 1
000189 818c     +LDD R24 , Y + 2 + 2
00018a 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
00018b 2766      	CLR  R22
00018c 2777      	CLR  R23
00018d 940e 065d 	CALL __CDF1
00018f 940e 07e2 	CALL __SWAPD12
000191 940e 0690 	CALL __SUBF12
000193 01df      	MOVW R26,R30
000194 01cb      	MOVW R24,R22
                +
000195 e0e0     +LDI R30 , LOW ( 0x3F000000 )
000196 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
000197 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
000198 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
000199 940e 0775 	CALL __CMPF12
00019b f028      	BRLO _0x27
                 ; 0000 0059             cuentasEnt++;
00019c 81e8      	LD   R30,Y
00019d 81f9      	LDD  R31,Y+1
00019e 9631      	ADIW R30,1
00019f 83e8      	ST   Y,R30
0001a0 83f9      	STD  Y+1,R31
                 ; 0000 005A         OCR1AH=(cuentasEnt-1)/256;
                 _0x27:
0001a1 81e8      	LD   R30,Y
0001a2 81f9      	LDD  R31,Y+1
0001a3 9731      	SBIW R30,1
0001a4 2fef      	MOV  R30,R31
0001a5 e0f0      	LDI  R31,0
0001a6 93e0 0089 	STS  137,R30
                 ; 0000 005B         OCR1AL=(cuentasEnt-1)%256;
0001a8 81e8      	LD   R30,Y
0001a9 50e1      	SUBI R30,LOW(1)
0001aa 93e0 0088 	STS  136,R30
                 ; 0000 005C         TCCR1A=0x40;    // Timer 1 en modo de CTC
0001ac e4e0      	LDI  R30,LOW(64)
0001ad 93e0 0080 	STS  128,R30
                 ; 0000 005D         TCCR1B=0x09;    // Timer en CK (sin pre-escalador)
0001af e0e9      	LDI  R30,LOW(9)
0001b0 93e0 0081 	STS  129,R30
                 ; 0000 005E     }
0001b2 9626      	ADIW R28,6
                 _0x26:
                 ; 0000 005F }
0001b3 9624      	ADIW R28,4
0001b4 9508      	RET
                 ; .FEND
                 ;
                 ;int k=0;
                 ;char kFlag=0;
                 ;
                 ;// Play tone or song function
                 ;void playTone(){
                 ; 0000 0065 void playTone(){
                 _playTone:
                 ; .FSTART _playTone
                 ; 0000 0066     tono(k);
0001b5 940e 058b 	CALL SUBOPT_0x4
0001b7 940e 07a5 	CALL __CWD1
0001b9 940e 065d 	CALL __CDF1
0001bb 01df      	MOVW R26,R30
0001bc 01cb      	MOVW R24,R22
0001bd dfa8      	RCALL _tono
                 ; 0000 0067     if(kFlag==0)
0001be 91e0 091e 	LDS  R30,_kFlag
0001c0 30e0      	CPI  R30,0
0001c1 f421      	BRNE _0x28
                 ; 0000 0068         k+=50;
0001c2 940e 058b 	CALL SUBOPT_0x4
0001c4 96f2      	ADIW R30,50
0001c5 c003      	RJMP _0x4E
                 ; 0000 0069     else
                 _0x28:
                 ; 0000 006A         k-=50;
0001c6 940e 058b 	CALL SUBOPT_0x4
0001c8 97f2      	SBIW R30,50
                 _0x4E:
0001c9 93e0 091c 	STS  _k,R30
0001cb 93f0 091d 	STS  _k+1,R31
                 ; 0000 006B     if(k>500)
0001cd 91a0 091c 	LDS  R26,_k
0001cf 91b0 091d 	LDS  R27,_k+1
0001d1 3fa5      	CPI  R26,LOW(0x1F5)
0001d2 e0e1      	LDI  R30,HIGH(0x1F5)
0001d3 07be      	CPC  R27,R30
0001d4 f014      	BRLT _0x2A
                 ; 0000 006C         kFlag=1;
0001d5 e0e1      	LDI  R30,LOW(1)
0001d6 c007      	RJMP _0x4F
                 ; 0000 006D     else if (k<=50)
                 _0x2A:
0001d7 91a0 091c 	LDS  R26,_k
0001d9 91b0 091d 	LDS  R27,_k+1
0001db 97d3      	SBIW R26,51
0001dc f41c      	BRGE _0x2C
                 ; 0000 006E         kFlag=0;
0001dd e0e0      	LDI  R30,LOW(0)
                 _0x4F:
0001de 93e0 091e 	STS  _kFlag,R30
                 ; 0000 006F }
                 _0x2C:
0001e0 9508      	RET
                 ; .FEND
                 ;
                 ;// LCD
                 ;void printTime(){
                 ; 0000 0072 void printTime(){
                 _printTime:
                 ; .FSTART _printTime
                 ; 0000 0073     sprintf(time, "H:%02i:%02i:%02i T:%02i", H, M, S, Temp);
0001e1 e0e5      	LDI  R30,LOW(_time)
0001e2 e0f9      	LDI  R31,HIGH(_time)
0001e3 93fa      	ST   -Y,R31
0001e4 93ea      	ST   -Y,R30
                +
0001e5 ebe6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001e6 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001e7 93fa      	ST   -Y,R31
0001e8 93ea      	ST   -Y,R30
0001e9 91e0 0902 	LDS  R30,_H
0001eb 940e 0590 	CALL SUBOPT_0x5
0001ed 91e0 0903 	LDS  R30,_M
0001ef 940e 0590 	CALL SUBOPT_0x5
0001f1 91e0 0904 	LDS  R30,_S
0001f3 940e 0590 	CALL SUBOPT_0x5
0001f5 91e0 0919 	LDS  R30,_Temp
0001f7 91f0 091a 	LDS  R31,_Temp+1
0001f9 2766      	CLR  R22
0001fa 2777      	CLR  R23
0001fb 940e 07d8 	CALL __PUTPARD1
0001fd e180      	LDI  R24,16
0001fe 940e 0511 	CALL _sprintf
000200 9664      	ADIW R28,20
                 ; 0000 0074     MoveCursor(0,0);
000201 e0e0      	LDI  R30,LOW(0)
000202 93ea      	ST   -Y,R30
000203 e0a0      	LDI  R26,LOW(0)
000204 940e 0596 	CALL SUBOPT_0x6
                 ; 0000 0075     StringLCDVar(time);
                 ; 0000 0076     sprintf(time, "A: %02i:%02i   ", AH, AM);
000206 e0e5      	LDI  R30,LOW(_time)
000207 e0f9      	LDI  R31,HIGH(_time)
000208 93fa      	ST   -Y,R31
000209 93ea      	ST   -Y,R30
                +
00020a ecee     +LDI R30 , LOW ( 2 * _0x0 + ( 24 ) )
00020b e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 24 ) )
                 	__POINTW1FN _0x0,24
00020c 93fa      	ST   -Y,R31
00020d 93ea      	ST   -Y,R30
00020e 940e 059c 	CALL SUBOPT_0x7
000210 940e 0590 	CALL SUBOPT_0x5
000212 940e 05a1 	CALL SUBOPT_0x8
000214 940e 0590 	CALL SUBOPT_0x5
000216 e088      	LDI  R24,8
000217 940e 0511 	CALL _sprintf
000219 962c      	ADIW R28,12
                 ; 0000 0077     MoveCursor(0,1);
00021a e0e0      	LDI  R30,LOW(0)
00021b 93ea      	ST   -Y,R30
00021c e0a1      	LDI  R26,LOW(1)
00021d 940e 0596 	CALL SUBOPT_0x6
                 ; 0000 0078     StringLCDVar(time);
                 ; 0000 0079 }
00021f 9508      	RET
                 ; .FEND
                 ;
                 ;// Clock
                 ;void updateClock(){
                 ; 0000 007C void updateClock(){
                 _updateClock:
                 ; .FSTART _updateClock
                 ; 0000 007D     rtc_get_time(&H, &M, &S);
000220 940e 05a6 	CALL SUBOPT_0x9
                 ; 0000 007E }
000222 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0081 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0082 
                 ; 0000 0083 // ADC initialization
                 ; 0000 0084 // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0085 // ADC Voltage Reference: AREF pin
                 ; 0000 0086 // ADC High Speed Mode: On
                 ; 0000 0087 // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 0088 // ADC4: On, ADC5: On, ADC6: On, ADC7: Off
                 ; 0000 0089 DIDR0=(1<<ADC7D) | (0<<ADC6D) | (0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
000223 e8e0      	LDI  R30,LOW(128)
000224 93e0 007e 	STS  126,R30
                 ; 0000 008A ADMUX=ADC_VREF_TYPE;
000226 e0e0      	LDI  R30,LOW(0)
000227 93e0 007c 	STS  124,R30
                 ; 0000 008B ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
000229 e8e3      	LDI  R30,LOW(131)
00022a 93e0 007a 	STS  122,R30
                 ; 0000 008C ADCSRB=(1<<ADHSM);
00022c e8e0      	LDI  R30,LOW(128)
00022d 93e0 007b 	STS  123,R30
                 ; 0000 008D 
                 ; 0000 008E // LCD
                 ; 0000 008F 
                 ; 0000 0090 SetupLCD();
00022f 940e 008d 	CALL _SetupLCD
                 ; 0000 0091 
                 ; 0000 0092 // DS1302
                 ; 0000 0093 rtc_init(0,0,0);
000231 e0e0      	LDI  R30,LOW(0)
000232 93ea      	ST   -Y,R30
000233 93ea      	ST   -Y,R30
000234 e0a0      	LDI  R26,LOW(0)
000235 940e 0347 	CALL _rtc_init
                 ; 0000 0094 
                 ; 0000 0095 // Tone
                 ; 0000 0096 DDRB.5=1;
000237 9a25      	SBI  0x4,5
                 ; 0000 0097 
                 ; 0000 0098 // First actions
                 ; 0000 0099 PORTC = 0x0F;
000238 e0ef      	LDI  R30,LOW(15)
000239 b9e8      	OUT  0x8,R30
                 ; 0000 009A rtc_get_time(&H, &M, &S);
00023a 940e 05a6 	CALL SUBOPT_0x9
                 ; 0000 009B printTime();
00023c dfa4      	RCALL _printTime
                 ; 0000 009C 
                 ; 0000 009D while (1){
                 _0x2F:
                 ; 0000 009E     // Please write your application code here
                 ; 0000 009F 
                 ; 0000 00A0         // Counter
                 ; 0000 00A1         delay_ms(50);
00023d e3a2      	LDI  R26,LOW(50)
00023e e0b0      	LDI  R27,0
00023f 940e 05ed 	CALL _delay_ms
                 ; 0000 00A2         i++;
000241 91e0 091b 	LDS  R30,_i
000243 5fef      	SUBI R30,-LOW(1)
000244 93e0 091b 	STS  _i,R30
                 ; 0000 00A3 
                 ; 0000 00A4         // ADC
                 ; 0000 00A5         updateADC();
000246 defc      	RCALL _updateADC
                 ; 0000 00A6 
                 ; 0000 00A7         // Update clock
                 ; 0000 00A8         updateClock();
000247 dfd8      	RCALL _updateClock
                 ; 0000 00A9         // Print values un LCD display
                 ; 0000 00AA         printTime();
000248 df98      	RCALL _printTime
                 ; 0000 00AB 
                 ; 0000 00AC         // 100 ms delay
                 ; 0000 00AD         if(i%2==0){
000249 91a0 091b 	LDS  R26,_i
00024b 27bb      	CLR  R27
00024c e0e2      	LDI  R30,LOW(2)
00024d e0f0      	LDI  R31,HIGH(2)
00024e 940e 07bd 	CALL __MODW21
000250 9730      	SBIW R30,0
000251 f459      	BRNE _0x32
                 ; 0000 00AE            if(alarmFlag==1) {
000252 91a0 0901 	LDS  R26,_alarmFlag
000254 30a1      	CPI  R26,LOW(0x1)
000255 f411      	BRNE _0x33
                 ; 0000 00AF             playTone();
000256 df5e      	RCALL _playTone
                 ; 0000 00B0            }
                 ; 0000 00B1            else
000257 c005      	RJMP _0x34
                 _0x33:
                 ; 0000 00B2             tono(0);
                +
000258 e0a0     +LDI R26 , LOW ( 0x0 )
000259 e0b0     +LDI R27 , HIGH ( 0x0 )
00025a e080     +LDI R24 , BYTE3 ( 0x0 )
00025b e090     +LDI R25 , BYTE4 ( 0x0 )
                 	__GETD2N 0x0
00025c df09      	RCALL _tono
                 ; 0000 00B3         }
                 _0x34:
                 ; 0000 00B4 
                 ; 0000 00B5         // 500 ms delay, reset counter
                 ; 0000 00B6         if(i%10==0)
                 _0x32:
00025d 91a0 091b 	LDS  R26,_i
00025f 27bb      	CLR  R27
000260 e0ea      	LDI  R30,LOW(10)
000261 e0f0      	LDI  R31,HIGH(10)
000262 940e 07bd 	CALL __MODW21
000264 9730      	SBIW R30,0
000265 f419      	BRNE _0x35
                 ; 0000 00B7             i=0;
000266 e0e0      	LDI  R30,LOW(0)
000267 93e0 091b 	STS  _i,R30
                 ; 0000 00B8         // Turns alarm flag on when H, M and S match
                 ; 0000 00B9         if(S==0 && M==AM && H==AH)
                 _0x35:
000269 91a0 0904 	LDS  R26,_S
00026b 30a0      	CPI  R26,LOW(0x0)
00026c f461      	BRNE _0x37
00026d 940e 05a1 	CALL SUBOPT_0x8
00026f 91a0 0903 	LDS  R26,_M
000271 17ea      	CP   R30,R26
000272 f431      	BRNE _0x37
000273 940e 059c 	CALL SUBOPT_0x7
000275 91a0 0902 	LDS  R26,_H
000277 17ea      	CP   R30,R26
000278 f009      	BREQ _0x38
                 _0x37:
000279 c003      	RJMP _0x36
                 _0x38:
                 ; 0000 00BA             alarmFlag=1;
00027a e0e1      	LDI  R30,LOW(1)
00027b 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00BB 
                 ; 0000 00BC         // Clock
                 ; 0000 00BD 
                 ; 0000 00BE         // If alarm is on, switch will turn alarm off without
                 ; 0000 00BF         //  changing the default variable
                 ; 0000 00C0         if(!PINC.0){
                 _0x36:
00027d 9930      	SBIC 0x6,0
00027e c00f      	RJMP _0x39
                 ; 0000 00C1             if(alarmFlag==1)
00027f 91a0 0901 	LDS  R26,_alarmFlag
000281 30a1      	CPI  R26,LOW(0x1)
000282 f421      	BRNE _0x3A
                 ; 0000 00C2                 alarmFlag = 0;
000283 e0e0      	LDI  R30,LOW(0)
000284 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00C3             else{
000286 c007      	RJMP _0x3B
                 _0x3A:
                 ; 0000 00C4                 H++;
000287 91e0 0902 	LDS  R30,_H
000289 5fef      	SUBI R30,-LOW(1)
00028a 93e0 0902 	STS  _H,R30
                 ; 0000 00C5                 rtc_set_time(H, M, S);
00028c 940e 05b2 	CALL SUBOPT_0xA
                 ; 0000 00C6             }
                 _0x3B:
                 ; 0000 00C7         }
                 ; 0000 00C8         // If alarm is on, switch will turn alarm off without
                 ; 0000 00C9         //  changing the default variable
                 ; 0000 00CA         if(!PINC.1){
                 _0x39:
00028e 9931      	SBIC 0x6,1
00028f c00f      	RJMP _0x3C
                 ; 0000 00CB             if(alarmFlag==1)
000290 91a0 0901 	LDS  R26,_alarmFlag
000292 30a1      	CPI  R26,LOW(0x1)
000293 f421      	BRNE _0x3D
                 ; 0000 00CC                 alarmFlag = 0;
000294 e0e0      	LDI  R30,LOW(0)
000295 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00CD             else{
000297 c007      	RJMP _0x3E
                 _0x3D:
                 ; 0000 00CE                 M++;
000298 91e0 0903 	LDS  R30,_M
00029a 5fef      	SUBI R30,-LOW(1)
00029b 93e0 0903 	STS  _M,R30
                 ; 0000 00CF                 rtc_set_time(H, M, S);
00029d 940e 05b2 	CALL SUBOPT_0xA
                 ; 0000 00D0             }
                 _0x3E:
                 ; 0000 00D1         }
                 ; 0000 00D2         // Verify the correct range on clock time
                 ; 0000 00D3         if(S>59)
                 _0x3C:
00029f 91a0 0904 	LDS  R26,_S
0002a1 33ac      	CPI  R26,LOW(0x3C)
0002a2 f018      	BRLO _0x3F
                 ; 0000 00D4             S=0;
0002a3 e0e0      	LDI  R30,LOW(0)
0002a4 93e0 0904 	STS  _S,R30
                 ; 0000 00D5         if(M>59)
                 _0x3F:
0002a6 91a0 0903 	LDS  R26,_M
0002a8 33ac      	CPI  R26,LOW(0x3C)
0002a9 f018      	BRLO _0x40
                 ; 0000 00D6             M=0;
0002aa e0e0      	LDI  R30,LOW(0)
0002ab 93e0 0903 	STS  _M,R30
                 ; 0000 00D7         if(H>23)
                 _0x40:
0002ad 91a0 0902 	LDS  R26,_H
0002af 31a8      	CPI  R26,LOW(0x18)
0002b0 f018      	BRLO _0x41
                 ; 0000 00D8             H=0;
0002b1 e0e0      	LDI  R30,LOW(0)
0002b2 93e0 0902 	STS  _H,R30
                 ; 0000 00D9         if(AM>59)
                 _0x41:
0002b4 940e 05a1 	CALL SUBOPT_0x8
0002b6 33ec      	CPI  R30,LOW(0x3C)
0002b7 f028      	BRLO _0x42
                 ; 0000 00DA             AM=0;
0002b8 e0a1      	LDI  R26,LOW(_AM)
0002b9 e0b0      	LDI  R27,HIGH(_AM)
0002ba e0e0      	LDI  R30,LOW(0)
0002bb 940e 07fb 	CALL __EEPROMWRB
                 ; 0000 00DB         if(AH>23)
                 _0x42:
0002bd 940e 059c 	CALL SUBOPT_0x7
0002bf 31e8      	CPI  R30,LOW(0x18)
0002c0 f028      	BRLO _0x43
                 ; 0000 00DC             AH=0;
0002c1 e0a0      	LDI  R26,LOW(_AH)
0002c2 e0b0      	LDI  R27,HIGH(_AH)
0002c3 e0e0      	LDI  R30,LOW(0)
0002c4 940e 07fb 	CALL __EEPROMWRB
                 ; 0000 00DD 
                 ; 0000 00DE         // Alarm
                 ; 0000 00DF 
                 ; 0000 00E0         // If alarm is on, switch will turn alarm off without
                 ; 0000 00E1         //  changing the default variable
                 ; 0000 00E2         if(!PINC.2){
                 _0x43:
0002c6 9932      	SBIC 0x6,2
0002c7 c00d      	RJMP _0x44
                 ; 0000 00E3             if(alarmFlag==1)
0002c8 91a0 0901 	LDS  R26,_alarmFlag
0002ca 30a1      	CPI  R26,LOW(0x1)
0002cb f421      	BRNE _0x45
                 ; 0000 00E4                 alarmFlag = 0;
0002cc e0e0      	LDI  R30,LOW(0)
0002cd 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00E5             else
0002cf c005      	RJMP _0x46
                 _0x45:
                 ; 0000 00E6                 AH++;
0002d0 940e 059c 	CALL SUBOPT_0x7
0002d2 5fef      	SUBI R30,-LOW(1)
0002d3 940e 07fb 	CALL __EEPROMWRB
                 ; 0000 00E7         }
                 _0x46:
                 ; 0000 00E8         // If alarm is on, switch will turn alarm off without
                 ; 0000 00E9         //  changing the default variable
                 ; 0000 00EA         if(!PINC.3){
                 _0x44:
0002d5 9933      	SBIC 0x6,3
0002d6 c00d      	RJMP _0x47
                 ; 0000 00EB             if(alarmFlag==1)
0002d7 91a0 0901 	LDS  R26,_alarmFlag
0002d9 30a1      	CPI  R26,LOW(0x1)
0002da f421      	BRNE _0x48
                 ; 0000 00EC                 alarmFlag = 0;
0002db e0e0      	LDI  R30,LOW(0)
0002dc 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00ED             else
0002de c005      	RJMP _0x49
                 _0x48:
                 ; 0000 00EE                 AM++;
0002df 940e 05a1 	CALL SUBOPT_0x8
0002e1 5fef      	SUBI R30,-LOW(1)
0002e2 940e 07fb 	CALL __EEPROMWRB
                 ; 0000 00EF         }
                 _0x49:
                 ; 0000 00F0         // Verify the correct range on alarm time
                 ; 0000 00F1         if(AM>59)
                 _0x47:
0002e4 940e 05a1 	CALL SUBOPT_0x8
0002e6 33ec      	CPI  R30,LOW(0x3C)
0002e7 f028      	BRLO _0x4A
                 ; 0000 00F2             AM=0;
0002e8 e0a1      	LDI  R26,LOW(_AM)
0002e9 e0b0      	LDI  R27,HIGH(_AM)
0002ea e0e0      	LDI  R30,LOW(0)
0002eb 940e 07fb 	CALL __EEPROMWRB
                 ; 0000 00F3         if(AH>23)
                 _0x4A:
0002ed 940e 059c 	CALL SUBOPT_0x7
0002ef 31e8      	CPI  R30,LOW(0x18)
0002f0 f028      	BRLO _0x4B
                 ; 0000 00F4             AH=0;
0002f1 e0a0      	LDI  R26,LOW(_AH)
0002f2 e0b0      	LDI  R27,HIGH(_AH)
0002f3 e0e0      	LDI  R30,LOW(0)
0002f4 940e 07fb 	CALL __EEPROMWRB
                 ; 0000 00F5     }
                 _0x4B:
0002f6 cf46      	RJMP _0x2F
                 ; 0000 00F6 }
                 _0x4C:
0002f7 cfff      	RJMP _0x4C
                 ; .FEND
                 
                 	.CSEG
                 _ds1302_rst0_G100:
                 ; .FSTART _ds1302_rst0_G100
0002f8 9858      	cbi  __ds1302_port,__ds1302_rst
                +
0002f9 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002fa 958a     +DEC R24
0002fb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002fc 9508      	RET
                 ; .FEND
                 _ds1302_write0_G100:
                 ; .FSTART _ds1302_write0_G100
0002fd 93aa      	ST   -Y,R26
0002fe 9a51          sbi  __ds1302_port-1,__ds1302_sclk
0002ff 9a52          sbi  __ds1302_port-1,__ds1302_io
000300 9a50          sbi  __ds1302_port-1,__ds1302_rst
000301 9a58          sbi  __ds1302_port,__ds1302_rst
                +
000302 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000303 958a     +DEC R24
000304 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000305 81a8      	LD   R26,Y
000306 d002      	RCALL _ds1302_write1_G100
000307 940c 0338 	JMP  _0x20A0005
                 ; .FEND
                 _ds1302_write1_G100:
                 ; .FSTART _ds1302_write1_G100
000309 93aa      	ST   -Y,R26
00030a 91e9          ld   r30,y+
00030b e0a8          ldi  r26,8
                 ds1302_write2:
00030c 95e7          ror  r30
00030d 985a          cbi  __ds1302_port,__ds1302_io
00030e f408          brcc ds1302_write3
00030f 9a5a          sbi  __ds1302_port,__ds1302_io
                 ds1302_write3:
000310 0000          nop
000311 0000          nop
000312 0000          nop
000313 0000          nop
000314 9a59          sbi  __ds1302_port,__ds1302_sclk
                +
000315 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
000316 958a     +DEC R24
000317 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
000318 9859      	cbi  __ds1302_port,__ds1302_sclk
                +
000319 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
00031a 958a     +DEC R24
00031b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
00031c 95aa          dec  r26
00031d f771          brne ds1302_write2
00031e 9508          ret
                 ; .FEND
                 _ds1302_read:
                 ; .FSTART _ds1302_read
00031f 93aa      	ST   -Y,R26
000320 81e8      	LD   R30,Y
000321 60e1      	ORI  R30,1
000322 2fae      	MOV  R26,R30
000323 940e 02fd 	CALL _ds1302_write0_G100
000325 985a          cbi  __ds1302_port,__ds1302_io
000326 9852          cbi  __ds1302_port-1,__ds1302_io
000327 e0a8          ldi  r26,8
                 ds1302_read0:
000328 9488          clc
000329 994a      	sbic __ds1302_port-2,__ds1302_io
00032a 9408          sec
00032b 95e7          ror  r30
00032c 9a59          sbi  __ds1302_port,__ds1302_sclk
                +
00032d e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
00032e 958a     +DEC R24
00032f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
000330 9859      	cbi  __ds1302_port,__ds1302_sclk
                +
000331 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
000332 958a     +DEC R24
000333 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
000334 95aa          dec  r26
000335 f791          brne ds1302_read0
000336 940e 02f8 	CALL _ds1302_rst0_G100
                 _0x20A0005:
000338 9621      	ADIW R28,1
000339 9508      	RET
                 ; .FEND
                 _ds1302_write:
                 ; .FSTART _ds1302_write
00033a 93aa      	ST   -Y,R26
00033b 81e9      	LDD  R30,Y+1
00033c 7fee      	ANDI R30,0xFE
00033d 2fae      	MOV  R26,R30
00033e 940e 02fd 	CALL _ds1302_write0_G100
000340 81a8      	LD   R26,Y
000341 940e 0309 	CALL _ds1302_write1_G100
000343 940e 02f8 	CALL _ds1302_rst0_G100
                 _0x20A0004:
000345 9622      	ADIW R28,2
000346 9508      	RET
                 ; .FEND
                 _rtc_init:
                 ; .FSTART _rtc_init
000347 93aa      	ST   -Y,R26
000348 81e8      	LD   R30,Y
000349 70e3      	ANDI R30,LOW(0x3)
00034a 83e8      	ST   Y,R30
00034b 81ea      	LDD  R30,Y+2
00034c 30e0      	CPI  R30,0
00034d f019      	BREQ _0x2000003
00034e 81e8      	LD   R30,Y
00034f 6ae0      	ORI  R30,LOW(0xA0)
000350 83e8      	ST   Y,R30
                 _0x2000003:
000351 81a9      	LDD  R26,Y+1
000352 30a1      	CPI  R26,LOW(0x1)
000353 f419      	BRNE _0x2000004
000354 81e8      	LD   R30,Y
000355 60e4      	ORI  R30,4
000356 c007      	RJMP _0x2000008
                 _0x2000004:
000357 81a9      	LDD  R26,Y+1
000358 30a2      	CPI  R26,LOW(0x2)
000359 f419      	BRNE _0x2000006
00035a 81e8      	LD   R30,Y
00035b 60e8      	ORI  R30,8
00035c c001      	RJMP _0x2000008
                 _0x2000006:
00035d e0e0      	LDI  R30,LOW(0)
                 _0x2000008:
00035e 83e8      	ST   Y,R30
00035f e8ee      	LDI  R30,LOW(142)
000360 93ea      	ST   -Y,R30
000361 e0a0      	LDI  R26,LOW(0)
000362 dfd7      	RCALL _ds1302_write
000363 e9e0      	LDI  R30,LOW(144)
000364 93ea      	ST   -Y,R30
000365 81a9      	LDD  R26,Y+1
000366 c02f      	RJMP _0x20A0002
                 ; .FEND
                 _rtc_get_time:
                 ; .FSTART _rtc_get_time
000367 93ba      	ST   -Y,R27
000368 93aa      	ST   -Y,R26
000369 e8a5      	LDI  R26,LOW(133)
00036a 940e 05bc 	CALL SUBOPT_0xB
00036c 81ac      	LDD  R26,Y+4
00036d 81bd      	LDD  R27,Y+4+1
00036e 93ec      	ST   X,R30
00036f e8a3      	LDI  R26,LOW(131)
000370 940e 05bc 	CALL SUBOPT_0xB
000372 81aa      	LDD  R26,Y+2
000373 81bb      	LDD  R27,Y+2+1
000374 93ec      	ST   X,R30
000375 e8a1      	LDI  R26,LOW(129)
000376 940e 05bc 	CALL SUBOPT_0xB
000378 81a8      	LD   R26,Y
000379 81b9      	LDD  R27,Y+1
00037a 93ec      	ST   X,R30
00037b 9626      	ADIW R28,6
00037c 9508      	RET
                 ; .FEND
                 _rtc_set_time:
                 ; .FSTART _rtc_set_time
00037d 93aa      	ST   -Y,R26
00037e e8ee      	LDI  R30,LOW(142)
00037f 93ea      	ST   -Y,R30
000380 e0a0      	LDI  R26,LOW(0)
000381 dfb8      	RCALL _ds1302_write
000382 e8e4      	LDI  R30,LOW(132)
000383 93ea      	ST   -Y,R30
000384 81ab      	LDD  R26,Y+3
000385 940e 0552 	CALL _bin2bcd
000387 2fae      	MOV  R26,R30
000388 dfb1      	RCALL _ds1302_write
000389 e8e2      	LDI  R30,LOW(130)
00038a 93ea      	ST   -Y,R30
00038b 81aa      	LDD  R26,Y+2
00038c 940e 0552 	CALL _bin2bcd
00038e 2fae      	MOV  R26,R30
00038f dfaa      	RCALL _ds1302_write
000390 e8e0      	LDI  R30,LOW(128)
000391 93ea      	ST   -Y,R30
000392 81a9      	LDD  R26,Y+1
000393 940e 0552 	CALL _bin2bcd
000395 2fae      	MOV  R26,R30
                 _0x20A0002:
000396 dfa3      	RCALL _ds1302_write
000397 e8ee      	LDI  R30,LOW(142)
000398 93ea      	ST   -Y,R30
000399 e8a0      	LDI  R26,LOW(128)
00039a df9f      	RCALL _ds1302_write
                 _0x20A0003:
00039b 9623      	ADIW R28,3
00039c 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
00039d 93ba      	ST   -Y,R27
00039e 93aa      	ST   -Y,R26
00039f 931a      	ST   -Y,R17
0003a0 930a      	ST   -Y,R16
0003a1 81aa      	LDD  R26,Y+2
0003a2 81bb      	LDD  R27,Y+2+1
0003a3 9612      	ADIW R26,2
0003a4 940e 07cb 	CALL __GETW1P
0003a6 9730      	SBIW R30,0
0003a7 f159      	BREQ _0x2020016
0003a8 81aa      	LDD  R26,Y+2
0003a9 81bb      	LDD  R27,Y+2+1
0003aa 9614      	ADIW R26,4
0003ab 940e 07cb 	CALL __GETW1P
0003ad 018f      	MOVW R16,R30
0003ae 9730      	SBIW R30,0
0003af f061      	BREQ _0x2020018
                +
0003b0 3002     +CPI R16 , LOW ( 2 )
0003b1 e0e0     +LDI R30 , HIGH ( 2 )
0003b2 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0003b3 f098      	BRLO _0x2020019
0003b4 01f8      	MOVW R30,R16
0003b5 9731      	SBIW R30,1
0003b6 018f      	MOVW R16,R30
                +
0003b7 81aa     +LDD R26 , Y + 2
0003b8 81bb     +LDD R27 , Y + 2 + 1
0003b9 9614     +ADIW R26 , 4
0003ba 93ed     +ST X + , R30
0003bb 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020018:
0003bc 81aa      	LDD  R26,Y+2
0003bd 81bb      	LDD  R27,Y+2+1
0003be 9612      	ADIW R26,2
0003bf 91ed      	LD   R30,X+
0003c0 91fd      	LD   R31,X+
0003c1 9631      	ADIW R30,1
0003c2 93fe      	ST   -X,R31
0003c3 93ee      	ST   -X,R30
0003c4 9731      	SBIW R30,1
0003c5 81ac      	LDD  R26,Y+4
0003c6 83a0      	STD  Z+0,R26
                 _0x2020019:
0003c7 81aa      	LDD  R26,Y+2
0003c8 81bb      	LDD  R27,Y+2+1
0003c9 940e 07cb 	CALL __GETW1P
0003cb 23ff      	TST  R31
0003cc f02a      	BRMI _0x202001A
0003cd 91ed      	LD   R30,X+
0003ce 91fd      	LD   R31,X+
0003cf 9631      	ADIW R30,1
0003d0 93fe      	ST   -X,R31
0003d1 93ee      	ST   -X,R30
                 _0x202001A:
0003d2 c006      	RJMP _0x202001B
                 _0x2020016:
0003d3 81aa      	LDD  R26,Y+2
0003d4 81bb      	LDD  R27,Y+2+1
0003d5 efef      	LDI  R30,LOW(65535)
0003d6 efff      	LDI  R31,HIGH(65535)
0003d7 93ed      	ST   X+,R30
0003d8 93fc      	ST   X,R31
                 _0x202001B:
0003d9 8119      	LDD  R17,Y+1
0003da 8108      	LDD  R16,Y+0
0003db 9625      	ADIW R28,5
0003dc 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0003dd 93ba      	ST   -Y,R27
0003de 93aa      	ST   -Y,R26
0003df 9726      	SBIW R28,6
0003e0 940e 0810 	CALL __SAVELOCR6
0003e2 e000      	LDI  R16,0
0003e3 85ac      	LDD  R26,Y+12
0003e4 85bd      	LDD  R27,Y+12+1
0003e5 e0e0      	LDI  R30,LOW(0)
0003e6 e0f0      	LDI  R31,HIGH(0)
0003e7 93ed      	ST   X+,R30
0003e8 93fc      	ST   X,R31
                 _0x202001C:
0003e9 89ea      	LDD  R30,Y+18
0003ea 89fb      	LDD  R31,Y+18+1
0003eb 9631      	ADIW R30,1
0003ec 8bea      	STD  Y+18,R30
0003ed 8bfb      	STD  Y+18+1,R31
0003ee 9731      	SBIW R30,1
0003ef 91e4      	LPM  R30,Z
0003f0 2f3e      	MOV  R19,R30
0003f1 30e0      	CPI  R30,0
0003f2 f409      	BRNE PC+2
0003f3 c115      	RJMP _0x202001E
0003f4 2fe0      	MOV  R30,R16
0003f5 30e0      	CPI  R30,0
0003f6 f439      	BRNE _0x2020022
0003f7 3235      	CPI  R19,37
0003f8 f411      	BRNE _0x2020023
0003f9 e001      	LDI  R16,LOW(1)
0003fa c002      	RJMP _0x2020024
                 _0x2020023:
0003fb 940e 05c1 	CALL SUBOPT_0xC
                 _0x2020024:
0003fd c10a      	RJMP _0x2020021
                 _0x2020022:
0003fe 30e1      	CPI  R30,LOW(0x1)
0003ff f4a9      	BRNE _0x2020025
000400 3235      	CPI  R19,37
000401 f419      	BRNE _0x2020026
000402 940e 05c1 	CALL SUBOPT_0xC
000404 c102      	RJMP _0x20200D2
                 _0x2020026:
000405 e002      	LDI  R16,LOW(2)
000406 e050      	LDI  R21,LOW(0)
000407 e010      	LDI  R17,LOW(0)
000408 323d      	CPI  R19,45
000409 f411      	BRNE _0x2020027
00040a e011      	LDI  R17,LOW(1)
00040b c0fc      	RJMP _0x2020021
                 _0x2020027:
00040c 323b      	CPI  R19,43
00040d f411      	BRNE _0x2020028
00040e e25b      	LDI  R21,LOW(43)
00040f c0f8      	RJMP _0x2020021
                 _0x2020028:
000410 3230      	CPI  R19,32
000411 f411      	BRNE _0x2020029
000412 e250      	LDI  R21,LOW(32)
000413 c0f4      	RJMP _0x2020021
                 _0x2020029:
000414 c002      	RJMP _0x202002A
                 _0x2020025:
000415 30e2      	CPI  R30,LOW(0x2)
000416 f439      	BRNE _0x202002B
                 _0x202002A:
000417 e040      	LDI  R20,LOW(0)
000418 e003      	LDI  R16,LOW(3)
000419 3330      	CPI  R19,48
00041a f411      	BRNE _0x202002C
00041b 6810      	ORI  R17,LOW(128)
00041c c0eb      	RJMP _0x2020021
                 _0x202002C:
00041d c003      	RJMP _0x202002D
                 _0x202002B:
00041e 30e3      	CPI  R30,LOW(0x3)
00041f f009      	BREQ PC+2
000420 c0e7      	RJMP _0x2020021
                 _0x202002D:
000421 3330      	CPI  R19,48
000422 f010      	BRLO _0x2020030
000423 333a      	CPI  R19,58
000424 f008      	BRLO _0x2020031
                 _0x2020030:
000425 c007      	RJMP _0x202002F
                 _0x2020031:
000426 e0aa      	LDI  R26,LOW(10)
000427 9f4a      	MUL  R20,R26
000428 2d40      	MOV  R20,R0
000429 2fe3      	MOV  R30,R19
00042a 53e0      	SUBI R30,LOW(48)
00042b 0f4e      	ADD  R20,R30
00042c c0db      	RJMP _0x2020021
                 _0x202002F:
00042d 2fe3      	MOV  R30,R19
00042e 36e3      	CPI  R30,LOW(0x63)
00042f f449      	BRNE _0x2020035
000430 940e 05c8 	CALL SUBOPT_0xD
000432 89e8      	LDD  R30,Y+16
000433 89f9      	LDD  R31,Y+16+1
000434 81a4      	LDD  R26,Z+4
000435 93aa      	ST   -Y,R26
000436 940e 05ce 	CALL SUBOPT_0xE
000438 c0ce      	RJMP _0x2020036
                 _0x2020035:
000439 37e3      	CPI  R30,LOW(0x73)
00043a f441      	BRNE _0x2020038
00043b 940e 05c8 	CALL SUBOPT_0xD
00043d 940e 05d4 	CALL SUBOPT_0xF
00043f 940e 055c 	CALL _strlen
000441 2f0e      	MOV  R16,R30
000442 c00a      	RJMP _0x2020039
                 _0x2020038:
000443 37e0      	CPI  R30,LOW(0x70)
000444 f461      	BRNE _0x202003B
000445 940e 05c8 	CALL SUBOPT_0xD
000447 940e 05d4 	CALL SUBOPT_0xF
000449 940e 0568 	CALL _strlenf
00044b 2f0e      	MOV  R16,R30
00044c 6018      	ORI  R17,LOW(8)
                 _0x2020039:
00044d 6012      	ORI  R17,LOW(2)
00044e 771f      	ANDI R17,LOW(127)
00044f e020      	LDI  R18,LOW(0)
000450 c034      	RJMP _0x202003C
                 _0x202003B:
000451 36e4      	CPI  R30,LOW(0x64)
000452 f011      	BREQ _0x202003F
000453 36e9      	CPI  R30,LOW(0x69)
000454 f411      	BRNE _0x2020040
                 _0x202003F:
000455 6014      	ORI  R17,LOW(4)
000456 c002      	RJMP _0x2020041
                 _0x2020040:
000457 37e5      	CPI  R30,LOW(0x75)
000458 f431      	BRNE _0x2020042
                 _0x2020041:
000459 e9e8      	LDI  R30,LOW(_tbl10_G101*2)
00045a e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
00045b 83ee      	STD  Y+6,R30
00045c 83ff      	STD  Y+6+1,R31
00045d e005      	LDI  R16,LOW(5)
00045e c00c      	RJMP _0x2020043
                 _0x2020042:
00045f 35e8      	CPI  R30,LOW(0x58)
000460 f411      	BRNE _0x2020045
000461 6018      	ORI  R17,LOW(8)
000462 c003      	RJMP _0x2020046
                 _0x2020045:
000463 37e8      	CPI  R30,LOW(0x78)
000464 f009      	BREQ PC+2
000465 c0a1      	RJMP _0x2020077
                 _0x2020046:
000466 eae2      	LDI  R30,LOW(_tbl16_G101*2)
000467 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000468 83ee      	STD  Y+6,R30
000469 83ff      	STD  Y+6+1,R31
00046a e004      	LDI  R16,LOW(4)
                 _0x2020043:
00046b ff12      	SBRS R17,2
00046c c014      	RJMP _0x2020048
00046d 940e 05c8 	CALL SUBOPT_0xD
00046f 940e 05de 	CALL SUBOPT_0x10
000471 85ab      	LDD  R26,Y+11
000472 23aa      	TST  R26
000473 f43a      	BRPL _0x2020049
000474 85ea      	LDD  R30,Y+10
000475 85fb      	LDD  R31,Y+10+1
000476 940e 0799 	CALL __ANEGW1
000478 87ea      	STD  Y+10,R30
000479 87fb      	STD  Y+10+1,R31
00047a e25d      	LDI  R21,LOW(45)
                 _0x2020049:
00047b 3050      	CPI  R21,0
00047c f011      	BREQ _0x202004A
00047d 5f0f      	SUBI R16,-LOW(1)
00047e c001      	RJMP _0x202004B
                 _0x202004A:
00047f 7f1b      	ANDI R17,LOW(251)
                 _0x202004B:
000480 c004      	RJMP _0x202004C
                 _0x2020048:
000481 940e 05c8 	CALL SUBOPT_0xD
000483 940e 05de 	CALL SUBOPT_0x10
                 _0x202004C:
                 _0x202003C:
000485 fd10      	SBRC R17,0
000486 c011      	RJMP _0x202004D
                 _0x202004E:
000487 1704      	CP   R16,R20
000488 f478      	BRSH _0x2020050
000489 ff17      	SBRS R17,7
00048a c008      	RJMP _0x2020051
00048b ff12      	SBRS R17,2
00048c c004      	RJMP _0x2020052
00048d 7f1b      	ANDI R17,LOW(251)
00048e 2f35      	MOV  R19,R21
00048f 5001      	SUBI R16,LOW(1)
000490 c001      	RJMP _0x2020053
                 _0x2020052:
000491 e330      	LDI  R19,LOW(48)
                 _0x2020053:
000492 c001      	RJMP _0x2020054
                 _0x2020051:
000493 e230      	LDI  R19,LOW(32)
                 _0x2020054:
000494 940e 05c1 	CALL SUBOPT_0xC
000496 5041      	SUBI R20,LOW(1)
000497 cfef      	RJMP _0x202004E
                 _0x2020050:
                 _0x202004D:
000498 2f20      	MOV  R18,R16
000499 ff11      	SBRS R17,1
00049a c017      	RJMP _0x2020055
                 _0x2020056:
00049b 3020      	CPI  R18,0
00049c f0a1      	BREQ _0x2020058
00049d ff13      	SBRS R17,3
00049e c006      	RJMP _0x2020059
00049f 81ee      	LDD  R30,Y+6
0004a0 81ff      	LDD  R31,Y+6+1
0004a1 9135      	LPM  R19,Z+
0004a2 83ee      	STD  Y+6,R30
0004a3 83ff      	STD  Y+6+1,R31
0004a4 c005      	RJMP _0x202005A
                 _0x2020059:
0004a5 81ae      	LDD  R26,Y+6
0004a6 81bf      	LDD  R27,Y+6+1
0004a7 913d      	LD   R19,X+
0004a8 83ae      	STD  Y+6,R26
0004a9 83bf      	STD  Y+6+1,R27
                 _0x202005A:
0004aa 940e 05c1 	CALL SUBOPT_0xC
0004ac 3040      	CPI  R20,0
0004ad f009      	BREQ _0x202005B
0004ae 5041      	SUBI R20,LOW(1)
                 _0x202005B:
0004af 5021      	SUBI R18,LOW(1)
0004b0 cfea      	RJMP _0x2020056
                 _0x2020058:
0004b1 c04b      	RJMP _0x202005C
                 _0x2020055:
                 _0x202005E:
0004b2 e330      	LDI  R19,LOW(48)
0004b3 81ee      	LDD  R30,Y+6
0004b4 81ff      	LDD  R31,Y+6+1
0004b5 940e 07cf 	CALL __GETW1PF
0004b7 87e8      	STD  Y+8,R30
0004b8 87f9      	STD  Y+8+1,R31
0004b9 81ee      	LDD  R30,Y+6
0004ba 81ff      	LDD  R31,Y+6+1
0004bb 9632      	ADIW R30,2
0004bc 83ee      	STD  Y+6,R30
0004bd 83ff      	STD  Y+6+1,R31
                 _0x2020060:
0004be 85e8      	LDD  R30,Y+8
0004bf 85f9      	LDD  R31,Y+8+1
0004c0 85aa      	LDD  R26,Y+10
0004c1 85bb      	LDD  R27,Y+10+1
0004c2 17ae      	CP   R26,R30
0004c3 07bf      	CPC  R27,R31
0004c4 f050      	BRLO _0x2020062
0004c5 5f3f      	SUBI R19,-LOW(1)
0004c6 85a8      	LDD  R26,Y+8
0004c7 85b9      	LDD  R27,Y+8+1
0004c8 85ea      	LDD  R30,Y+10
0004c9 85fb      	LDD  R31,Y+10+1
0004ca 1bea      	SUB  R30,R26
0004cb 0bfb      	SBC  R31,R27
0004cc 87ea      	STD  Y+10,R30
0004cd 87fb      	STD  Y+10+1,R31
0004ce cfef      	RJMP _0x2020060
                 _0x2020062:
0004cf 333a      	CPI  R19,58
0004d0 f028      	BRLO _0x2020063
0004d1 ff13      	SBRS R17,3
0004d2 c002      	RJMP _0x2020064
0004d3 5f39      	SUBI R19,-LOW(7)
0004d4 c001      	RJMP _0x2020065
                 _0x2020064:
0004d5 5d39      	SUBI R19,-LOW(39)
                 _0x2020065:
                 _0x2020063:
0004d6 fd14      	SBRC R17,4
0004d7 c01a      	RJMP _0x2020067
0004d8 3331      	CPI  R19,49
0004d9 f420      	BRSH _0x2020069
0004da 85a8      	LDD  R26,Y+8
0004db 85b9      	LDD  R27,Y+8+1
0004dc 9711      	SBIW R26,1
0004dd f409      	BRNE _0x2020068
                 _0x2020069:
0004de c009      	RJMP _0x20200D3
                 _0x2020068:
0004df 1742      	CP   R20,R18
0004e0 f010      	BRLO _0x202006D
0004e1 ff10      	SBRS R17,0
0004e2 c001      	RJMP _0x202006E
                 _0x202006D:
0004e3 c013      	RJMP _0x202006C
                 _0x202006E:
0004e4 e230      	LDI  R19,LOW(32)
0004e5 ff17      	SBRS R17,7
0004e6 c00b      	RJMP _0x202006F
0004e7 e330      	LDI  R19,LOW(48)
                 _0x20200D3:
0004e8 6110      	ORI  R17,LOW(16)
0004e9 ff12      	SBRS R17,2
0004ea c007      	RJMP _0x2020070
0004eb 7f1b      	ANDI R17,LOW(251)
0004ec 935a      	ST   -Y,R21
0004ed 940e 05ce 	CALL SUBOPT_0xE
0004ef 3040      	CPI  R20,0
0004f0 f009      	BREQ _0x2020071
0004f1 5041      	SUBI R20,LOW(1)
                 _0x2020071:
                 _0x2020070:
                 _0x202006F:
                 _0x2020067:
0004f2 940e 05c1 	CALL SUBOPT_0xC
0004f4 3040      	CPI  R20,0
0004f5 f009      	BREQ _0x2020072
0004f6 5041      	SUBI R20,LOW(1)
                 _0x2020072:
                 _0x202006C:
0004f7 5021      	SUBI R18,LOW(1)
0004f8 85a8      	LDD  R26,Y+8
0004f9 85b9      	LDD  R27,Y+8+1
0004fa 9712      	SBIW R26,2
0004fb f008      	BRLO _0x202005F
0004fc cfb5      	RJMP _0x202005E
                 _0x202005F:
                 _0x202005C:
0004fd ff10      	SBRS R17,0
0004fe c008      	RJMP _0x2020073
                 _0x2020074:
0004ff 3040      	CPI  R20,0
000500 f031      	BREQ _0x2020076
000501 5041      	SUBI R20,LOW(1)
000502 e2e0      	LDI  R30,LOW(32)
000503 93ea      	ST   -Y,R30
000504 940e 05ce 	CALL SUBOPT_0xE
000506 cff8      	RJMP _0x2020074
                 _0x2020076:
                 _0x2020073:
                 _0x2020077:
                 _0x2020036:
                 _0x20200D2:
000507 e000      	LDI  R16,LOW(0)
                 _0x2020021:
000508 cee0      	RJMP _0x202001C
                 _0x202001E:
000509 85ac      	LDD  R26,Y+12
00050a 85bd      	LDD  R27,Y+12+1
00050b 940e 07cb 	CALL __GETW1P
00050d 940e 0817 	CALL __LOADLOCR6
00050f 9664      	ADIW R28,20
000510 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000511 92ff      	PUSH R15
000512 2ef8      	MOV  R15,R24
000513 9726      	SBIW R28,6
000514 940e 0812 	CALL __SAVELOCR4
000516 940e 05e6 	CALL SUBOPT_0x11
000518 9730      	SBIW R30,0
000519 f419      	BRNE _0x2020078
00051a efef      	LDI  R30,LOW(65535)
00051b efff      	LDI  R31,HIGH(65535)
00051c c023      	RJMP _0x20A0001
                 _0x2020078:
00051d 01de      	MOVW R26,R28
00051e 9616      	ADIW R26,6
00051f 940e 0795 	CALL __ADDW2R15
000521 018d      	MOVW R16,R26
000522 940e 05e6 	CALL SUBOPT_0x11
000524 83ee      	STD  Y+6,R30
000525 83ff      	STD  Y+6+1,R31
000526 e0e0      	LDI  R30,LOW(0)
000527 87e8      	STD  Y+8,R30
000528 87e9      	STD  Y+8+1,R30
000529 01de      	MOVW R26,R28
00052a 961a      	ADIW R26,10
00052b 940e 0795 	CALL __ADDW2R15
00052d 940e 07cb 	CALL __GETW1P
00052f 93fa      	ST   -Y,R31
000530 93ea      	ST   -Y,R30
000531 931a      	ST   -Y,R17
000532 930a      	ST   -Y,R16
000533 e9ed      	LDI  R30,LOW(_put_buff_G101)
000534 e0f3      	LDI  R31,HIGH(_put_buff_G101)
000535 93fa      	ST   -Y,R31
000536 93ea      	ST   -Y,R30
000537 01de      	MOVW R26,R28
000538 961a      	ADIW R26,10
000539 dea3      	RCALL __print_G101
00053a 019f      	MOVW R18,R30
00053b 81ae      	LDD  R26,Y+6
00053c 81bf      	LDD  R27,Y+6+1
00053d e0e0      	LDI  R30,LOW(0)
00053e 93ec      	ST   X,R30
00053f 01f9      	MOVW R30,R18
                 _0x20A0001:
000540 940e 0819 	CALL __LOADLOCR4
000542 962a      	ADIW R28,10
000543 90ff      	POP  R15
000544 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _bcd2bin:
                 ; .FSTART _bcd2bin
000545 93aa      	ST   -Y,R26
000546 81e8          ld   r30,y
000547 95e2          swap r30
000548 70ef          andi r30,0xf
000549 2fae          mov  r26,r30
00054a 0faa          lsl  r26
00054b 0faa          lsl  r26
00054c 0fea          add  r30,r26
00054d 0fee          lsl  r30
00054e 91a9          ld   r26,y+
00054f 70af          andi r26,0xf
000550 0fea          add  r30,r26
000551 9508          ret
                 ; .FEND
                 _bin2bcd:
                 ; .FSTART _bin2bcd
000552 93aa      	ST   -Y,R26
000553 91a9          ld   r26,y+
000554 27ee          clr  r30
                 bin2bcd0:
000555 50aa          subi r26,10
000556 f012          brmi bin2bcd1
000557 5fe0          subi r30,-16
000558 cffc          rjmp bin2bcd0
                 bin2bcd1:
000559 5fa6          subi r26,-10
00055a 0fea          add  r30,r26
00055b 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00055c 93ba      	ST   -Y,R27
00055d 93aa      	ST   -Y,R26
00055e 91a9          ld   r26,y+
00055f 91b9          ld   r27,y+
000560 27ee          clr  r30
000561 27ff          clr  r31
                 strlen0:
000562 916d          ld   r22,x+
000563 2366          tst  r22
000564 f011          breq strlen1
000565 9631          adiw r30,1
000566 cffb          rjmp strlen0
                 strlen1:
000567 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000568 93ba      	ST   -Y,R27
000569 93aa      	ST   -Y,R26
00056a 27aa          clr  r26
00056b 27bb          clr  r27
00056c 91e9          ld   r30,y+
00056d 91f9          ld   r31,y+
                 strlenf0:
00056e 9005      	lpm  r0,z+
00056f 2000          tst  r0
000570 f011          breq strlenf1
000571 9611          adiw r26,1
000572 cffb          rjmp strlenf0
                 strlenf1:
000573 01fd          movw r30,r26
000574 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _cursor:
000900           	.BYTE 0x1
                 _alarmFlag:
000901           	.BYTE 0x1
                 
                 	.ESEG
                 _AH:
000000           	.BYTE 0x1
                 _AM:
000001           	.BYTE 0x1
                 
                 	.DSEG
                 _H:
000902           	.BYTE 0x1
                 _M:
000903           	.BYTE 0x1
                 _S:
000904           	.BYTE 0x1
                 _time:
000905           	.BYTE 0x10
                 _temperature:
000915           	.BYTE 0x4
                 _Temp:
000919           	.BYTE 0x2
                 _i:
00091b           	.BYTE 0x1
                 _k:
00091c           	.BYTE 0x2
                 _kFlag:
00091e           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
000575 e0a2      	LDI  R26,LOW(2)
000576 e0b0      	LDI  R27,0
000577 940c 05ed 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000579 940e 00bc 	CALL _SendDataBitsLCD
00057b 940c 00b9 	JMP  _PulseEn
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
00057d 81e9      	LDD  R30,Y+1
00057e 7fe0      	ANDI R30,LOW(0xF0)
00057f 2f0e      	MOV  R16,R30
000580 9502      	SWAP R16
000581 700f      	ANDI R16,0xF
000582 2fa0      	MOV  R26,R16
000583 cff5      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000584 81e9      	LDD  R30,Y+1
000585 70ef      	ANDI R30,LOW(0xF)
000586 2f0e      	MOV  R16,R30
000587 2fa0      	MOV  R26,R16
000588 940e 00bc 	CALL _SendDataBitsLCD
00058a cfea      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
00058b 91e0 091c 	LDS  R30,_k
00058d 91f0 091d 	LDS  R31,_k+1
00058f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
000590 27ff      	CLR  R31
000591 2766      	CLR  R22
000592 2777      	CLR  R23
000593 940e 07d8 	CALL __PUTPARD1
000595 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000596 940e 0109 	CALL _MoveCursor
000598 e0a5      	LDI  R26,LOW(_time)
000599 e0b9      	LDI  R27,HIGH(_time)
00059a 940c 00f1 	JMP  _StringLCDVar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
00059c e0a0      	LDI  R26,LOW(_AH)
00059d e0b0      	LDI  R27,HIGH(_AH)
00059e 940e 07ef 	CALL __EEPROMRDB
0005a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8:
0005a1 e0a1      	LDI  R26,LOW(_AM)
0005a2 e0b0      	LDI  R27,HIGH(_AM)
0005a3 940e 07ef 	CALL __EEPROMRDB
0005a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x9:
0005a6 e0e2      	LDI  R30,LOW(_H)
0005a7 e0f9      	LDI  R31,HIGH(_H)
0005a8 93fa      	ST   -Y,R31
0005a9 93ea      	ST   -Y,R30
0005aa e0e3      	LDI  R30,LOW(_M)
0005ab e0f9      	LDI  R31,HIGH(_M)
0005ac 93fa      	ST   -Y,R31
0005ad 93ea      	ST   -Y,R30
0005ae e0a4      	LDI  R26,LOW(_S)
0005af e0b9      	LDI  R27,HIGH(_S)
0005b0 940c 0367 	JMP  _rtc_get_time
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xA:
0005b2 91e0 0902 	LDS  R30,_H
0005b4 93ea      	ST   -Y,R30
0005b5 91e0 0903 	LDS  R30,_M
0005b7 93ea      	ST   -Y,R30
0005b8 91a0 0904 	LDS  R26,_S
0005ba 940c 037d 	JMP  _rtc_set_time
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
0005bc 940e 031f 	CALL _ds1302_read
0005be 2fae      	MOV  R26,R30
0005bf 940c 0545 	JMP  _bcd2bin
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xC:
0005c1 933a      	ST   -Y,R19
0005c2 85ad      	LDD  R26,Y+13
0005c3 85be      	LDD  R27,Y+13+1
0005c4 85ef      	LDD  R30,Y+15
0005c5 89f8      	LDD  R31,Y+15+1
0005c6 9509      	ICALL
0005c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xD:
0005c8 89e8      	LDD  R30,Y+16
0005c9 89f9      	LDD  R31,Y+16+1
0005ca 9734      	SBIW R30,4
0005cb 8be8      	STD  Y+16,R30
0005cc 8bf9      	STD  Y+16+1,R31
0005cd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
0005ce 85ad      	LDD  R26,Y+13
0005cf 85be      	LDD  R27,Y+13+1
0005d0 85ef      	LDD  R30,Y+15
0005d1 89f8      	LDD  R31,Y+15+1
0005d2 9509      	ICALL
0005d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xF:
0005d4 89a8      	LDD  R26,Y+16
0005d5 89b9      	LDD  R27,Y+16+1
0005d6 9614      	ADIW R26,4
0005d7 940e 07cb 	CALL __GETW1P
0005d9 83ee      	STD  Y+6,R30
0005da 83ff      	STD  Y+6+1,R31
0005db 81ae      	LDD  R26,Y+6
0005dc 81bf      	LDD  R27,Y+6+1
0005dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x10:
0005de 89a8      	LDD  R26,Y+16
0005df 89b9      	LDD  R27,Y+16+1
0005e0 9614      	ADIW R26,4
0005e1 940e 07cb 	CALL __GETW1P
0005e3 87ea      	STD  Y+10,R30
0005e4 87fb      	STD  Y+10+1,R31
0005e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
0005e6 01de      	MOVW R26,R28
0005e7 961c      	ADIW R26,12
0005e8 940e 0795 	CALL __ADDW2R15
0005ea 940e 07cb 	CALL __GETW1P
0005ec 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0005ed 9610      	adiw r26,0
0005ee f039      	breq __delay_ms1
                 __delay_ms0:
                +
0005ef ed80     +LDI R24 , LOW ( 0x7D0 )
0005f0 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0005f1 9701     +SBIW R24 , 1
0005f2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0005f3 95a8      	wdr
0005f4 9711      	sbiw r26,1
0005f5 f7c9      	brne __delay_ms0
                 __delay_ms1:
0005f6 9508      	ret
                 
                 __ROUND_REPACK:
0005f7 2355      	TST  R21
0005f8 f442      	BRPL __REPACK
0005f9 3850      	CPI  R21,0x80
0005fa f411      	BRNE __ROUND_REPACK0
0005fb ffe0      	SBRS R30,0
0005fc c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0005fd 9631      	ADIW R30,1
0005fe 1f69      	ADC  R22,R25
0005ff 1f79      	ADC  R23,R25
000600 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000601 e850      	LDI  R21,0x80
000602 2757      	EOR  R21,R23
000603 f411      	BRNE __REPACK0
000604 935f      	PUSH R21
000605 c0ca      	RJMP __ZERORES
                 __REPACK0:
000606 3f5f      	CPI  R21,0xFF
000607 f031      	BREQ __REPACK1
000608 0f66      	LSL  R22
000609 0c00      	LSL  R0
00060a 9557      	ROR  R21
00060b 9567      	ROR  R22
00060c 2f75      	MOV  R23,R21
00060d 9508      	RET
                 __REPACK1:
00060e 935f      	PUSH R21
00060f 2000      	TST  R0
000610 f00a      	BRMI __REPACK2
000611 c0ca      	RJMP __MAXRES
                 __REPACK2:
000612 c0c3      	RJMP __MINRES
                 
                 __UNPACK:
000613 e850      	LDI  R21,0x80
000614 2e19      	MOV  R1,R25
000615 2215      	AND  R1,R21
000616 0f88      	LSL  R24
000617 1f99      	ROL  R25
000618 2795      	EOR  R25,R21
000619 0f55      	LSL  R21
00061a 9587      	ROR  R24
                 
                 __UNPACK1:
00061b e850      	LDI  R21,0x80
00061c 2e07      	MOV  R0,R23
00061d 2205      	AND  R0,R21
00061e 0f66      	LSL  R22
00061f 1f77      	ROL  R23
000620 2775      	EOR  R23,R21
000621 0f55      	LSL  R21
000622 9567      	ROR  R22
000623 9508      	RET
                 
                 __CFD1U:
000624 9468      	SET
000625 c001      	RJMP __CFD1U0
                 __CFD1:
000626 94e8      	CLT
                 __CFD1U0:
000627 935f      	PUSH R21
000628 dff2      	RCALL __UNPACK1
000629 3870      	CPI  R23,0x80
00062a f018      	BRLO __CFD10
00062b 3f7f      	CPI  R23,0xFF
00062c f408      	BRCC __CFD10
00062d c0a2      	RJMP __ZERORES
                 __CFD10:
00062e e156      	LDI  R21,22
00062f 1b57      	SUB  R21,R23
000630 f4aa      	BRPL __CFD11
000631 9551      	NEG  R21
000632 3058      	CPI  R21,8
000633 f40e      	BRTC __CFD19
000634 3059      	CPI  R21,9
                 __CFD19:
000635 f030      	BRLO __CFD17
000636 efef      	SER  R30
000637 efff      	SER  R31
000638 ef6f      	SER  R22
000639 e77f      	LDI  R23,0x7F
00063a f977      	BLD  R23,7
00063b c01a      	RJMP __CFD15
                 __CFD17:
00063c 2777      	CLR  R23
00063d 2355      	TST  R21
00063e f0b9      	BREQ __CFD15
                 __CFD18:
00063f 0fee      	LSL  R30
000640 1fff      	ROL  R31
000641 1f66      	ROL  R22
000642 1f77      	ROL  R23
000643 955a      	DEC  R21
000644 f7d1      	BRNE __CFD18
000645 c010      	RJMP __CFD15
                 __CFD11:
000646 2777      	CLR  R23
                 __CFD12:
000647 3058      	CPI  R21,8
000648 f028      	BRLO __CFD13
000649 2fef      	MOV  R30,R31
00064a 2ff6      	MOV  R31,R22
00064b 2f67      	MOV  R22,R23
00064c 5058      	SUBI R21,8
00064d cff9      	RJMP __CFD12
                 __CFD13:
00064e 2355      	TST  R21
00064f f031      	BREQ __CFD15
                 __CFD14:
000650 9576      	LSR  R23
000651 9567      	ROR  R22
000652 95f7      	ROR  R31
000653 95e7      	ROR  R30
000654 955a      	DEC  R21
000655 f7d1      	BRNE __CFD14
                 __CFD15:
000656 2000      	TST  R0
000657 f40a      	BRPL __CFD16
000658 d144      	RCALL __ANEGD1
                 __CFD16:
000659 915f      	POP  R21
00065a 9508      	RET
                 
                 __CDF1U:
00065b 9468      	SET
00065c c001      	RJMP __CDF1U0
                 __CDF1:
00065d 94e8      	CLT
                 __CDF1U0:
00065e 9730      	SBIW R30,0
00065f 4060      	SBCI R22,0
000660 4070      	SBCI R23,0
000661 f0b1      	BREQ __CDF10
000662 2400      	CLR  R0
000663 f026      	BRTS __CDF11
000664 2377      	TST  R23
000665 f412      	BRPL __CDF11
000666 9400      	COM  R0
000667 d135      	RCALL __ANEGD1
                 __CDF11:
000668 2e17      	MOV  R1,R23
000669 e17e      	LDI  R23,30
00066a 2011      	TST  R1
                 __CDF12:
00066b f032      	BRMI __CDF13
00066c 957a      	DEC  R23
00066d 0fee      	LSL  R30
00066e 1fff      	ROL  R31
00066f 1f66      	ROL  R22
000670 1c11      	ROL  R1
000671 cff9      	RJMP __CDF12
                 __CDF13:
000672 2fef      	MOV  R30,R31
000673 2ff6      	MOV  R31,R22
000674 2d61      	MOV  R22,R1
000675 935f      	PUSH R21
000676 df8a      	RCALL __REPACK
000677 915f      	POP  R21
                 __CDF10:
000678 9508      	RET
                 
                 __SWAPACC:
000679 934f      	PUSH R20
00067a 01af      	MOVW R20,R30
00067b 01fd      	MOVW R30,R26
00067c 01da      	MOVW R26,R20
00067d 01ab      	MOVW R20,R22
00067e 01bc      	MOVW R22,R24
00067f 01ca      	MOVW R24,R20
000680 2d40      	MOV  R20,R0
000681 2c01      	MOV  R0,R1
000682 2e14      	MOV  R1,R20
000683 914f      	POP  R20
000684 9508      	RET
                 
                 __UADD12:
000685 0fea      	ADD  R30,R26
000686 1ffb      	ADC  R31,R27
000687 1f68      	ADC  R22,R24
000688 9508      	RET
                 
                 __NEGMAN1:
000689 95e0      	COM  R30
00068a 95f0      	COM  R31
00068b 9560      	COM  R22
00068c 5fef      	SUBI R30,-1
00068d 4fff      	SBCI R31,-1
00068e 4f6f      	SBCI R22,-1
00068f 9508      	RET
                 
                 __SUBF12:
000690 935f      	PUSH R21
000691 df81      	RCALL __UNPACK
000692 3890      	CPI  R25,0x80
000693 f149      	BREQ __ADDF129
000694 e850      	LDI  R21,0x80
000695 2615      	EOR  R1,R21
                 
                 __ADDF120:
000696 3870      	CPI  R23,0x80
000697 f121      	BREQ __ADDF128
                 __ADDF121:
000698 2f57      	MOV  R21,R23
000699 1b59      	SUB  R21,R25
00069a f12b      	BRVS __ADDF1211
00069b f412      	BRPL __ADDF122
00069c dfdc      	RCALL __SWAPACC
00069d cffa      	RJMP __ADDF121
                 __ADDF122:
00069e 3158      	CPI  R21,24
00069f f018      	BRLO __ADDF123
0006a0 27aa      	CLR  R26
0006a1 27bb      	CLR  R27
0006a2 2788      	CLR  R24
                 __ADDF123:
0006a3 3058      	CPI  R21,8
0006a4 f028      	BRLO __ADDF124
0006a5 2fab      	MOV  R26,R27
0006a6 2fb8      	MOV  R27,R24
0006a7 2788      	CLR  R24
0006a8 5058      	SUBI R21,8
0006a9 cff9      	RJMP __ADDF123
                 __ADDF124:
0006aa 2355      	TST  R21
0006ab f029      	BREQ __ADDF126
                 __ADDF125:
0006ac 9586      	LSR  R24
0006ad 95b7      	ROR  R27
0006ae 95a7      	ROR  R26
0006af 955a      	DEC  R21
0006b0 f7d9      	BRNE __ADDF125
                 __ADDF126:
0006b1 2d50      	MOV  R21,R0
0006b2 2551      	EOR  R21,R1
0006b3 f072      	BRMI __ADDF127
0006b4 dfd0      	RCALL __UADD12
0006b5 f438      	BRCC __ADDF129
0006b6 9567      	ROR  R22
0006b7 95f7      	ROR  R31
0006b8 95e7      	ROR  R30
0006b9 9573      	INC  R23
0006ba f413      	BRVC __ADDF129
0006bb c020      	RJMP __MAXRES
                 __ADDF128:
0006bc dfbc      	RCALL __SWAPACC
                 __ADDF129:
0006bd df43      	RCALL __REPACK
0006be 915f      	POP  R21
0006bf 9508      	RET
                 __ADDF1211:
0006c0 f7d8      	BRCC __ADDF128
0006c1 cffb      	RJMP __ADDF129
                 __ADDF127:
0006c2 1bea      	SUB  R30,R26
0006c3 0bfb      	SBC  R31,R27
0006c4 0b68      	SBC  R22,R24
0006c5 f051      	BREQ __ZERORES
0006c6 f410      	BRCC __ADDF1210
0006c7 9400      	COM  R0
0006c8 dfc0      	RCALL __NEGMAN1
                 __ADDF1210:
0006c9 2366      	TST  R22
0006ca f392      	BRMI __ADDF129
0006cb 0fee      	LSL  R30
0006cc 1fff      	ROL  R31
0006cd 1f66      	ROL  R22
0006ce 957a      	DEC  R23
0006cf f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0006d0 27ee      	CLR  R30
0006d1 27ff      	CLR  R31
0006d2 2766      	CLR  R22
0006d3 2777      	CLR  R23
0006d4 915f      	POP  R21
0006d5 9508      	RET
                 
                 __MINRES:
0006d6 efef      	SER  R30
0006d7 efff      	SER  R31
0006d8 e76f      	LDI  R22,0x7F
0006d9 ef7f      	SER  R23
0006da 915f      	POP  R21
0006db 9508      	RET
                 
                 __MAXRES:
0006dc efef      	SER  R30
0006dd efff      	SER  R31
0006de e76f      	LDI  R22,0x7F
0006df e77f      	LDI  R23,0x7F
0006e0 915f      	POP  R21
0006e1 9508      	RET
                 
                 __MULF12:
0006e2 935f      	PUSH R21
0006e3 df2f      	RCALL __UNPACK
0006e4 3870      	CPI  R23,0x80
0006e5 f351      	BREQ __ZERORES
0006e6 3890      	CPI  R25,0x80
0006e7 f341      	BREQ __ZERORES
0006e8 2401      	EOR  R0,R1
0006e9 9408      	SEC
0006ea 1f79      	ADC  R23,R25
0006eb f423      	BRVC __MULF124
0006ec f31c      	BRLT __ZERORES
                 __MULF125:
0006ed 2000      	TST  R0
0006ee f33a      	BRMI __MINRES
0006ef cfec      	RJMP __MAXRES
                 __MULF124:
0006f0 920f      	PUSH R0
0006f1 931f      	PUSH R17
0006f2 932f      	PUSH R18
0006f3 933f      	PUSH R19
0006f4 934f      	PUSH R20
0006f5 2711      	CLR  R17
0006f6 2722      	CLR  R18
0006f7 2799      	CLR  R25
0006f8 9f68      	MUL  R22,R24
0006f9 01a0      	MOVW R20,R0
0006fa 9f8f      	MUL  R24,R31
0006fb 2d30      	MOV  R19,R0
0006fc 0d41      	ADD  R20,R1
0006fd 1f59      	ADC  R21,R25
0006fe 9f6b      	MUL  R22,R27
0006ff 0d30      	ADD  R19,R0
000700 1d41      	ADC  R20,R1
000701 1f59      	ADC  R21,R25
000702 9f8e      	MUL  R24,R30
000703 d027      	RCALL __MULF126
000704 9fbf      	MUL  R27,R31
000705 d025      	RCALL __MULF126
000706 9f6a      	MUL  R22,R26
000707 d023      	RCALL __MULF126
000708 9fbe      	MUL  R27,R30
000709 d01d      	RCALL __MULF127
00070a 9faf      	MUL  R26,R31
00070b d01b      	RCALL __MULF127
00070c 9fae      	MUL  R26,R30
00070d 0d11      	ADD  R17,R1
00070e 1f29      	ADC  R18,R25
00070f 1f39      	ADC  R19,R25
000710 1f49      	ADC  R20,R25
000711 1f59      	ADC  R21,R25
000712 2fe3      	MOV  R30,R19
000713 2ff4      	MOV  R31,R20
000714 2f65      	MOV  R22,R21
000715 2f52      	MOV  R21,R18
000716 914f      	POP  R20
000717 913f      	POP  R19
000718 912f      	POP  R18
000719 911f      	POP  R17
00071a 900f      	POP  R0
00071b 2366      	TST  R22
00071c f02a      	BRMI __MULF122
00071d 0f55      	LSL  R21
00071e 1fee      	ROL  R30
00071f 1fff      	ROL  R31
000720 1f66      	ROL  R22
000721 c002      	RJMP __MULF123
                 __MULF122:
000722 9573      	INC  R23
000723 f24b      	BRVS __MULF125
                 __MULF123:
000724 ded2      	RCALL __ROUND_REPACK
000725 915f      	POP  R21
000726 9508      	RET
                 
                 __MULF127:
000727 0d10      	ADD  R17,R0
000728 1d21      	ADC  R18,R1
000729 1f39      	ADC  R19,R25
00072a c002      	RJMP __MULF128
                 __MULF126:
00072b 0d20      	ADD  R18,R0
00072c 1d31      	ADC  R19,R1
                 __MULF128:
00072d 1f49      	ADC  R20,R25
00072e 1f59      	ADC  R21,R25
00072f 9508      	RET
                 
                 __DIVF21:
000730 935f      	PUSH R21
000731 dee1      	RCALL __UNPACK
000732 3870      	CPI  R23,0x80
000733 f421      	BRNE __DIVF210
000734 2011      	TST  R1
                 __DIVF211:
000735 f40a      	BRPL __DIVF219
000736 cf9f      	RJMP __MINRES
                 __DIVF219:
000737 cfa4      	RJMP __MAXRES
                 __DIVF210:
000738 3890      	CPI  R25,0x80
000739 f409      	BRNE __DIVF218
                 __DIVF217:
00073a cf95      	RJMP __ZERORES
                 __DIVF218:
00073b 2401      	EOR  R0,R1
00073c 9408      	SEC
00073d 0b97      	SBC  R25,R23
00073e f41b      	BRVC __DIVF216
00073f f3d4      	BRLT __DIVF217
000740 2000      	TST  R0
000741 cff3      	RJMP __DIVF211
                 __DIVF216:
000742 2f79      	MOV  R23,R25
000743 931f      	PUSH R17
000744 932f      	PUSH R18
000745 933f      	PUSH R19
000746 934f      	PUSH R20
000747 2411      	CLR  R1
000748 2711      	CLR  R17
000749 2722      	CLR  R18
00074a 2733      	CLR  R19
00074b 2744      	CLR  R20
00074c 2755      	CLR  R21
00074d e290      	LDI  R25,32
                 __DIVF212:
00074e 17ae      	CP   R26,R30
00074f 07bf      	CPC  R27,R31
000750 0786      	CPC  R24,R22
000751 0741      	CPC  R20,R17
000752 f030      	BRLO __DIVF213
000753 1bae      	SUB  R26,R30
000754 0bbf      	SBC  R27,R31
000755 0b86      	SBC  R24,R22
000756 0b41      	SBC  R20,R17
000757 9408      	SEC
000758 c001      	RJMP __DIVF214
                 __DIVF213:
000759 9488      	CLC
                 __DIVF214:
00075a 1f55      	ROL  R21
00075b 1f22      	ROL  R18
00075c 1f33      	ROL  R19
00075d 1c11      	ROL  R1
00075e 1faa      	ROL  R26
00075f 1fbb      	ROL  R27
000760 1f88      	ROL  R24
000761 1f44      	ROL  R20
000762 959a      	DEC  R25
000763 f751      	BRNE __DIVF212
000764 01f9      	MOVW R30,R18
000765 2d61      	MOV  R22,R1
000766 914f      	POP  R20
000767 913f      	POP  R19
000768 912f      	POP  R18
000769 911f      	POP  R17
00076a 2366      	TST  R22
00076b f032      	BRMI __DIVF215
00076c 0f55      	LSL  R21
00076d 1fee      	ROL  R30
00076e 1fff      	ROL  R31
00076f 1f66      	ROL  R22
000770 957a      	DEC  R23
000771 f243      	BRVS __DIVF217
                 __DIVF215:
000772 de84      	RCALL __ROUND_REPACK
000773 915f      	POP  R21
000774 9508      	RET
                 
                 __CMPF12:
000775 2399      	TST  R25
000776 f09a      	BRMI __CMPF120
000777 2377      	TST  R23
000778 f042      	BRMI __CMPF121
000779 1797      	CP   R25,R23
00077a f048      	BRLO __CMPF122
00077b f429      	BRNE __CMPF121
00077c 17ae      	CP   R26,R30
00077d 07bf      	CPC  R27,R31
00077e 0786      	CPC  R24,R22
00077f f020      	BRLO __CMPF122
000780 f031      	BREQ __CMPF123
                 __CMPF121:
000781 9498      	CLZ
000782 9488      	CLC
000783 9508      	RET
                 __CMPF122:
000784 9498      	CLZ
000785 9408      	SEC
000786 9508      	RET
                 __CMPF123:
000787 9418      	SEZ
000788 9488      	CLC
000789 9508      	RET
                 __CMPF120:
00078a 2377      	TST  R23
00078b f7c2      	BRPL __CMPF122
00078c 1797      	CP   R25,R23
00078d f398      	BRLO __CMPF121
00078e f7a9      	BRNE __CMPF122
00078f 17ea      	CP   R30,R26
000790 07fb      	CPC  R31,R27
000791 0768      	CPC  R22,R24
000792 f388      	BRLO __CMPF122
000793 f399      	BREQ __CMPF123
000794 cfec      	RJMP __CMPF121
                 
                 __ADDW2R15:
000795 2400      	CLR  R0
000796 0daf      	ADD  R26,R15
000797 1db0      	ADC  R27,R0
000798 9508      	RET
                 
                 __ANEGW1:
000799 95f1      	NEG  R31
00079a 95e1      	NEG  R30
00079b 40f0      	SBCI R31,0
00079c 9508      	RET
                 
                 __ANEGD1:
00079d 95f0      	COM  R31
00079e 9560      	COM  R22
00079f 9570      	COM  R23
0007a0 95e1      	NEG  R30
0007a1 4fff      	SBCI R31,-1
0007a2 4f6f      	SBCI R22,-1
0007a3 4f7f      	SBCI R23,-1
0007a4 9508      	RET
                 
                 __CWD1:
0007a5 2f6f      	MOV  R22,R31
0007a6 0f66      	ADD  R22,R22
0007a7 0b66      	SBC  R22,R22
0007a8 2f76      	MOV  R23,R22
0007a9 9508      	RET
                 
                 __DIVW21U:
0007aa 2400      	CLR  R0
0007ab 2411      	CLR  R1
0007ac e190      	LDI  R25,16
                 __DIVW21U1:
0007ad 0faa      	LSL  R26
0007ae 1fbb      	ROL  R27
0007af 1c00      	ROL  R0
0007b0 1c11      	ROL  R1
0007b1 1a0e      	SUB  R0,R30
0007b2 0a1f      	SBC  R1,R31
0007b3 f418      	BRCC __DIVW21U2
0007b4 0e0e      	ADD  R0,R30
0007b5 1e1f      	ADC  R1,R31
0007b6 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0007b7 60a1      	SBR  R26,1
                 __DIVW21U3:
0007b8 959a      	DEC  R25
0007b9 f799      	BRNE __DIVW21U1
0007ba 01fd      	MOVW R30,R26
0007bb 01d0      	MOVW R26,R0
0007bc 9508      	RET
                 
                 __MODW21:
0007bd 94e8      	CLT
0007be ffb7      	SBRS R27,7
0007bf c004      	RJMP __MODW211
0007c0 95a0      	COM  R26
0007c1 95b0      	COM  R27
0007c2 9611      	ADIW R26,1
0007c3 9468      	SET
                 __MODW211:
0007c4 fdf7      	SBRC R31,7
0007c5 dfd3      	RCALL __ANEGW1
0007c6 dfe3      	RCALL __DIVW21U
0007c7 01fd      	MOVW R30,R26
0007c8 f40e      	BRTC __MODW212
0007c9 dfcf      	RCALL __ANEGW1
                 __MODW212:
0007ca 9508      	RET
                 
                 __GETW1P:
0007cb 91ed      	LD   R30,X+
0007cc 91fc      	LD   R31,X
0007cd 9711      	SBIW R26,1
0007ce 9508      	RET
                 
                 __GETW1PF:
0007cf 9005      	LPM  R0,Z+
0007d0 91f4      	LPM  R31,Z
0007d1 2de0      	MOV  R30,R0
0007d2 9508      	RET
                 
                 __GETD1S0:
0007d3 81e8      	LD   R30,Y
0007d4 81f9      	LDD  R31,Y+1
0007d5 816a      	LDD  R22,Y+2
0007d6 817b      	LDD  R23,Y+3
0007d7 9508      	RET
                 
                 __PUTPARD1:
0007d8 937a      	ST   -Y,R23
0007d9 936a      	ST   -Y,R22
0007da 93fa      	ST   -Y,R31
0007db 93ea      	ST   -Y,R30
0007dc 9508      	RET
                 
                 __PUTPARD2:
0007dd 939a      	ST   -Y,R25
0007de 938a      	ST   -Y,R24
0007df 93ba      	ST   -Y,R27
0007e0 93aa      	ST   -Y,R26
0007e1 9508      	RET
                 
                 __SWAPD12:
0007e2 2e18      	MOV  R1,R24
0007e3 2f86      	MOV  R24,R22
0007e4 2d61      	MOV  R22,R1
0007e5 2e19      	MOV  R1,R25
0007e6 2f97      	MOV  R25,R23
0007e7 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0007e8 2e1b      	MOV  R1,R27
0007e9 2fbf      	MOV  R27,R31
0007ea 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0007eb 2e1a      	MOV  R1,R26
0007ec 2fae      	MOV  R26,R30
0007ed 2de1      	MOV  R30,R1
0007ee 9508      	RET
                 
                 __EEPROMRDB:
0007ef 99f9      	SBIC EECR,EEWE
0007f0 cffe      	RJMP __EEPROMRDB
0007f1 93ff      	PUSH R31
0007f2 b7ff      	IN   R31,SREG
0007f3 94f8      	CLI
0007f4 bda1      	OUT  EEARL,R26
0007f5 bdb2      	OUT  EEARH,R27
0007f6 9af8      	SBI  EECR,EERE
0007f7 b5e0      	IN   R30,EEDR
0007f8 bfff      	OUT  SREG,R31
0007f9 91ff      	POP  R31
0007fa 9508      	RET
                 
                 __EEPROMWRB:
0007fb 9bf9      	SBIS EECR,EEWE
0007fc c002      	RJMP __EEPROMWRB1
0007fd 95a8      	WDR
0007fe cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
0007ff b79f      	IN   R25,SREG
000800 94f8      	CLI
000801 bda1      	OUT  EEARL,R26
000802 bdb2      	OUT  EEARH,R27
000803 9af8      	SBI  EECR,EERE
000804 b580      	IN   R24,EEDR
000805 17e8      	CP   R30,R24
000806 f019      	BREQ __EEPROMWRB0
000807 bde0      	OUT  EEDR,R30
000808 9afa      	SBI  EECR,EEMWE
000809 9af9      	SBI  EECR,EEWE
                 __EEPROMWRB0:
00080a bf9f      	OUT  SREG,R25
00080b 9508      	RET
                 
                 __CPD10:
00080c 9730      	SBIW R30,0
00080d 4060      	SBCI R22,0
00080e 4070      	SBCI R23,0
00080f 9508      	RET
                 
                 __SAVELOCR6:
000810 935a      	ST   -Y,R21
                 __SAVELOCR5:
000811 934a      	ST   -Y,R20
                 __SAVELOCR4:
000812 933a      	ST   -Y,R19
                 __SAVELOCR3:
000813 932a      	ST   -Y,R18
                 __SAVELOCR2:
000814 931a      	ST   -Y,R17
000815 930a      	ST   -Y,R16
000816 9508      	RET
                 
                 __LOADLOCR6:
000817 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000818 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000819 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00081a 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00081b 8119      	LDD  R17,Y+1
00081c 8108      	LD   R16,Y
00081d 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
00081e 0fac      	ADD  R26,R28
00081f 1fbd      	ADC  R27,R29
                 __INITLOC0:
000820 9005      	LPM  R0,Z+
000821 920d      	ST   X+,R0
000822 958a      	DEC  R24
000823 f7e1      	BRNE __INITLOC0
000824 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

AT90USB1286 register use summary:
r0 :  36 r1 :  33 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  46 r17:  40 r18:  22 r19:  39 r20:  39 r21:  71 r22:  66 r23:  56 
r24:  56 r25:  40 r26: 224 r27:  86 r28:  24 r29:   2 r30: 362 r31: 131 
x  :  32 y  : 255 z  :   8 
Registers used: 22 out of 35 (62.9%)

AT90USB1286 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  23 add   :  17 
adiw  :  34 and   :   2 andi  :  16 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   6 brcs  :   0 break :   0 breq  :  34 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  25 
brlt  :   3 brmi  :  11 brne  :  61 brpl  :   8 brsh  :   3 brtc  :   2 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   0 call  : 119 
cbi   :  12 cbr   :   0 clc   :   4 clh   :   0 cli   :   3 cln   :   0 
clr   :  42 cls   :   0 clt   :   3 clv   :   0 clz   :   2 com   :  10 
cp    :  11 cpc   :  13 cpi   :  68 cpse  :   0 dec   :  19 des   :   0 
elpm  :   0 eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   4 inc   :   2 jmp   :  52 ld    :  39 ldd   : 111 
ldi   : 194 lds   :  37 lpm   :   8 lsl   :  15 lsr   :   2 mov   :  63 
movw  :  30 mul   :  10 muls  :   0 mulsu :   0 neg   :   4 nop   :   4 
or    :   0 ori   :  12 out   :  15 pop   :  20 push  :  19 rcall :  43 
ret   :  66 reti  :   0 rjmp  : 109 rol   :  27 ror   :  14 sbc   :   9 
sbci  :  10 sbi   :  24 sbic  :   6 sbis  :   1 sbiw  :  25 sbr   :   1 
sbrc  :   3 sbrs  :  12 sec   :   5 seh   :   0 sei   :   0 sen   :   0 
ser   :   8 ses   :   0 set   :   3 sev   :   0 sez   :   1 sleep :   0 
spm   :   0 st    : 105 std   :  34 sts   :  32 sub   :   6 subi  :  31 
swap  :   2 tst   :  21 wdr   :   2 
Instructions used: 78 out of 117 (66.7%)

AT90USB1286 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00104a   4100     70   4170  131072   3.2%
[.dseg] 0x000100 0x00091f      0     31     31    8192   0.4%
[.eseg] 0x000000 0x000002      0      2      2    4096   0.0%

Assembly complete, 0 errors, 0 warnings

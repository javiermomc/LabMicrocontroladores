
AVRASM ver. 2.1.30  D:\JavierJr\Documents\ISD\FebJun20\LabMicrocontroladores\CodeVision\P01_Alarma\Debug\List\alarma.asm Wed Feb 12 12:21:52 2020

                 
                 
                 ;CodeVisionAVR C Compiler V3.38 Evaluation
                 ;(C) Copyright 1998-2019 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : AT90USB1286
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 2048 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: Off
                 ;Smart register allocation: Off
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME AT90USB1286
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 8192
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR1A=0xC8
                 	.EQU UDR1=0xCE
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x20FF
                 	.EQU __DSTACK_SIZE=0x0800
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0063 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
000046 940c 0000 	JMP  0x00
000048 940c 0000 	JMP  0x00
00004a 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00004c 2710
00004d 03e8
00004e 0064
00004f 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000050 0001      	.DB  0x1,0x0
                 _tbl16_G101:
000051 1000
000052 0100
000053 0010
000054 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000055 0303
000056 0203
000057 0c02
000058 0800      	.DB  0x3,0x3,0x3,0x2,0x2,0xC,0x0,0x8
000059 0100
00005a 0600      	.DB  0x0,0x1,0x0,0x6
                 _0x0:
00005b 6554
00005c 706d
00005d 203a
00005e 6425      	.DB  0x54,0x65,0x6D,0x70,0x3A,0x20,0x25,0x64
00005f 2020
000060 2020
000061 2020
D:\JavierJr\Documents\ISD\FebJun20\LabMicrocontroladores\CodeVision\P01_Alarma\Debug\List\alarma.asm(1157): warning: .cseg .db misalignment - padding zero byte
000062 0000      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x0
                 __RESET:
000063 94f8      	CLI
000064 27ee      	CLR  R30
000065 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000066 e0f1      	LDI  R31,1
000067 bff5      	OUT  MCUCR,R31
000068 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000069 e08d      	LDI  R24,(14-2)+1
00006a e0a2      	LDI  R26,2
00006b 27bb      	CLR  R27
                 __CLEAR_REG:
00006c 93ed      	ST   X+,R30
00006d 958a      	DEC  R24
00006e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000070 e290      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000071 e0a0      	LDI  R26,LOW(__SRAM_START)
000072 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000073 93ed      	ST   X+,R30
000074 9701      	SBIW R24,1
000075 f7e9      	BRNE __CLEAR_SRAM
                 
000076 bf8b      	OUT  RAMPZ,R24
                 
                 ;GPIOR0 INITIALIZATION
000077 e0e0      	LDI  R30,__GPIOR0_INIT
000078 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000079 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007a bfed      	OUT  SPL,R30
00007b e2e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00007c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00007d e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007e e0d9      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007f 940c 01d3 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x900
                 
                 	.CSEG
                 ;/*
                 ; * alarma.c
                 ; *
                 ; * Created: 11-Feb-20 5:39:55 PM
                 ; * Author: javie
                 ; */
                 ;
                 ;// LCD config
                 ;#asm
                     .equ __lcd_port=0x11
                     .equ __lcd_EN=4
                     .equ __lcd_RS=5
                     .equ __lcd_D4=0
                     .equ __lcd_D5=1
                     .equ __lcd_D6=2
                     .equ __lcd_D7=3
                 ; 0000 0011 #endasm
                 ;
                 ;// DS1302 config
                 ;#asm
                 	.equ __ds1302_port=0x0B
                 	.equ __ds1302_io=2
                 	.equ __ds1302_sclk=1
                 	.equ __ds1302_rst=0
                 ; 0000 0019 #endasm
                 ;
                 ;#include <90usb1286.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <ds1302.h>
                 ;#include <display.h>
                 
                 	.CSEG
                 _SetupLCD:
                 ; .FSTART _SetupLCD
000081 972c      	SBIW R28,12
000082 e08c      	LDI  R24,12
                +
000083 e060     +LDI R22 , LOW ( 0 )
000084 e070     +LDI R23 , HIGH ( 0 )
                 	__GETWRN 22,23,0
000085 eaea      	LDI  R30,LOW(_0x3*2)
000086 e0f0      	LDI  R31,HIGH(_0x3*2)
000087 d4cc      	RCALL __INITLOCB
000088 930a      	ST   -Y,R16
                 ;	TableSetup -> Y+1
                 ;	i -> R16
                 ; 0000 001D     SBI __lcd_port-1,__lcd_EN
000089 9a84          SBI __lcd_port-1,__lcd_EN
00008a 9a85          SBI __lcd_port-1,__lcd_RS
00008b 9a80          SBI __lcd_port-1,__lcd_D4
00008c 9a81          SBI __lcd_port-1,__lcd_D5
00008d 9a82          SBI __lcd_port-1,__lcd_D6
00008e 9a83          SBI __lcd_port-1,__lcd_D7
00008f e3a2      	LDI  R26,LOW(50)
000090 e0b0      	LDI  R27,0
000091 d6e9      	RCALL _delay_ms
000092 e000      	LDI  R16,LOW(0)
                 _0x5:
000093 300c      	CPI  R16,12
000094 f470      	BRSH _0x6
000095 e0a2      	LDI  R26,LOW(2)
000096 e0b0      	LDI  R27,0
000097 d6e3      	RCALL _delay_ms
000098 2fe0      	MOV  R30,R16
000099 e0f0      	LDI  R31,0
00009a 01de      	MOVW R26,R28
00009b 9611      	ADIW R26,1
00009c 0fae      	ADD  R26,R30
00009d 1fbf      	ADC  R27,R31
00009e 91ac      	LD   R26,X
00009f d00f      	RCALL _SendDataBitsLCD
0000a0 d00b      	RCALL _PulseEn
0000a1 5f0f      	SUBI R16,-1
0000a2 cff0      	RJMP _0x5
                 _0x6:
0000a3 e0ec      	LDI  R30,LOW(12)
0000a4 93e0 0900 	STS  _cursor,R30
0000a6 91a0 0900 	LDS  R26,_cursor
0000a8 d01e      	RCALL _WriteComandLCD
0000a9 8108      	LDD  R16,Y+0
0000aa 962d      	ADIW R28,13
0000ab 9508      	RET
                 ; .FEND
                 _PulseEn:
                 ; .FSTART _PulseEn
0000ac 9a8c          SBI __lcd_port,__lcd_EN  // EN=1;
0000ad 988c          CBI __lcd_port,__lcd_EN // EN=0;
0000ae 9508      	RET
                 ; .FEND
                 _SendDataBitsLCD:
                 ; .FSTART _SendDataBitsLCD
0000af 930a      	ST   -Y,R16
0000b0 2f0a      	MOV  R16,R26
                 ;	dato -> R16
0000b1 ff03      	SBRS R16,3
0000b2 c002      	RJMP _0x7
0000b3 9a8b      	SBI __lcd_port,__lcd_D7
0000b4 c001      	RJMP _0x8
                 _0x7:
0000b5 988b      	CBI __lcd_port,__lcd_D7
                 _0x8:
0000b6 ff02      	SBRS R16,2
0000b7 c002      	RJMP _0x9
0000b8 9a8a      	SBI __lcd_port,__lcd_D6
0000b9 c001      	RJMP _0xA
                 _0x9:
0000ba 988a      	CBI __lcd_port,__lcd_D6
                 _0xA:
0000bb ff01      	SBRS R16,1
0000bc c002      	RJMP _0xB
0000bd 9a89      	SBI __lcd_port,__lcd_D5
0000be c001      	RJMP _0xC
                 _0xB:
0000bf 9889      	CBI __lcd_port,__lcd_D5
                 _0xC:
0000c0 ff00      	SBRS R16,0
0000c1 c002      	RJMP _0xD
0000c2 9a88      	SBI __lcd_port,__lcd_D4
0000c3 c001      	RJMP _0xE
                 _0xD:
0000c4 9888      	CBI __lcd_port,__lcd_D4
                 _0xE:
0000c5 940c 02da 	JMP  _0x20A0005
                 ; .FEND
                 _WriteComandLCD:
                 ; .FSTART _WriteComandLCD
0000c7 931a      	ST   -Y,R17
0000c8 930a      	ST   -Y,R16
0000c9 2f1a      	MOV  R17,R26
                 ;	Comando -> R17
                 ;	tempComando -> R16
0000ca 988d      	CBI __lcd_port,__lcd_RS
0000cb c004      	RJMP _0x20A0006
                 ; .FEND
                 _CharLCD:
                 ; .FSTART _CharLCD
0000cc 931a      	ST   -Y,R17
0000cd 930a      	ST   -Y,R16
0000ce 2f1a      	MOV  R17,R26
                 ;	dato -> R17
                 ;	tempdato -> R16
0000cf 9a8d      	SBI __lcd_port,__lcd_RS
                 _0x20A0006:
0000d0 e0a2      	LDI  R26,LOW(2)
0000d1 e0b0      	LDI  R27,0
0000d2 d6a8      	RCALL _delay_ms
0000d3 2fe1      	MOV  R30,R17
0000d4 7fe0      	ANDI R30,LOW(0xF0)
0000d5 2f0e      	MOV  R16,R30
0000d6 9502      	SWAP R16
0000d7 700f      	ANDI R16,0xF
0000d8 2fa0      	MOV  R26,R16
0000d9 dfd5      	RCALL _SendDataBitsLCD
0000da dfd1      	RCALL _PulseEn
0000db 2fe1      	MOV  R30,R17
0000dc 70ef      	ANDI R30,LOW(0xF)
0000dd 2f0e      	MOV  R16,R30
0000de 2fa0      	MOV  R26,R16
0000df dfcf      	RCALL _SendDataBitsLCD
0000e0 e0a2      	LDI  R26,LOW(2)
0000e1 e0b0      	LDI  R27,0
0000e2 d698      	RCALL _delay_ms
0000e3 dfc8      	RCALL _PulseEn
0000e4 9109      	LD   R16,Y+
0000e5 9119      	LD   R17,Y+
0000e6 9508      	RET
                 ; .FEND
                 ;	Mensaje -> R17,R18
                 ;	i -> R16
                 ;	Mensaje -> R19,R20
                 ;	tiempo -> R17,R18
                 ;	i -> R16
                 _StringLCDVar:
                 ; .FSTART _StringLCDVar
0000e7 d461      	RCALL __SAVELOCR3
                +
0000e8 2f1a     +MOV R17 , R26
0000e9 2f2b     +MOV R18 , R27
                 	__PUTW2R 17,18
                 ;	Mensaje -> R17,R18
                 ;	i -> R16
0000ea e000      	LDI  R16,LOW(0)
                 _0x16:
0000eb 2fe0      	MOV  R30,R16
0000ec 5f0f      	SUBI R16,-1
0000ed e0f0      	LDI  R31,0
0000ee 0fe1      	ADD  R30,R17
0000ef 1ff2      	ADC  R31,R18
0000f0 81a0      	LD   R26,Z
0000f1 dfda      	RCALL _CharLCD
                +
0000f2 2fa1     +MOV R26 , R17
0000f3 2fb2     +MOV R27 , R18
                 	__GETW2R 17,18
0000f4 27ee      	CLR  R30
0000f5 0fa0      	ADD  R26,R16
0000f6 1fbe      	ADC  R27,R30
0000f7 91ec      	LD   R30,X
0000f8 30e0      	CPI  R30,0
0000f9 f789      	BRNE _0x16
0000fa d455      	RCALL __LOADLOCR3
0000fb 940c 02e6 	JMP  _0x20A0004
                 ; .FEND
                 _MoveCursor:
                 ; .FSTART _MoveCursor
0000fd d3e5      	RCALL SUBOPT_0x0
                 ;	x -> R17
                 ;	y -> R16
0000fe 2fe0      	MOV  R30,R16
0000ff e0f0      	LDI  R31,0
000100 9730      	SBIW R30,0
000101 f419      	BRNE _0x1B
000102 2fa1      	MOV  R26,R17
000103 58a0      	SUBI R26,-LOW(128)
000104 c014      	RJMP _0x4F
                 _0x1B:
000105 30e1      	CPI  R30,LOW(0x1)
000106 e0a0      	LDI  R26,HIGH(0x1)
000107 07fa      	CPC  R31,R26
000108 f419      	BRNE _0x1C
000109 2fa1      	MOV  R26,R17
00010a 54a0      	SUBI R26,-LOW(192)
00010b c00d      	RJMP _0x4F
                 _0x1C:
00010c 30e2      	CPI  R30,LOW(0x2)
00010d e0a0      	LDI  R26,HIGH(0x2)
00010e 07fa      	CPC  R31,R26
00010f f419      	BRNE _0x1D
000110 2fa1      	MOV  R26,R17
000111 56ac      	SUBI R26,-LOW(148)
000112 c006      	RJMP _0x4F
                 _0x1D:
000113 30e3      	CPI  R30,LOW(0x3)
000114 e0a0      	LDI  R26,HIGH(0x3)
000115 07fa      	CPC  R31,R26
000116 f419      	BRNE _0x1A
000117 2fa1      	MOV  R26,R17
000118 52ac      	SUBI R26,-LOW(212)
                 _0x4F:
000119 dfad      	RCALL _WriteComandLCD
                 _0x1A:
00011a 940c 02e4 	JMP  _0x20A0003
                 ; .FEND
                 ;	NoCaracter -> R19
                 ;	datos -> R17,R18
                 ;	i -> R16
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;// Alarm
                 ;
                 ;unsigned char alarmFlag; // Alarm flag to turn alarm on and off
                 ;eeprom unsigned char AH, AM; // Variables for alarm on EEPROM
                 ;
                 ;unsigned char H=0,M=0,S=0; // Variables for clock
                 ;
                 ;unsigned char time[16];
                 ;
                 ;// ADC
                 ;
                 ;// ADC variables
                 ;float temperature = 0;
                 ;
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0034 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0035 ADMUX=adc_input | ADC_VREF_TYPE;
00011c 930a      	ST   -Y,R16
00011d 2f0a      	MOV  R16,R26
                 ;	adc_input -> R16
00011e 2fe0      	MOV  R30,R16
00011f 93e0 007c 	STS  124,R30
                 ; 0000 0036 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0037 delay_us(10);
                +
000121 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000122 958a     +DEC R24
000123 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0038 // Start the AD conversion
                 ; 0000 0039 ADCSRA|=(1<<ADSC);
000124 91e0 007a 	LDS  R30,122
000126 64e0      	ORI  R30,0x40
000127 93e0 007a 	STS  122,R30
                 ; 0000 003A // Wait for the AD conversion to complete
                 ; 0000 003B while ((ADCSRA & (1<<ADIF))==0);
                 _0x22:
000129 91e0 007a 	LDS  R30,122
00012b 71e0      	ANDI R30,LOW(0x10)
00012c f3e1      	BREQ _0x22
                 ; 0000 003C ADCSRA|=(1<<ADIF);
00012d 91e0 007a 	LDS  R30,122
00012f 61e0      	ORI  R30,0x10
000130 93e0 007a 	STS  122,R30
                 ; 0000 003D return ADCW;
000132 91e0 0078 	LDS  R30,120
000134 91f0 0079 	LDS  R31,120+1
000136 940c 02da 	JMP  _0x20A0005
                 ; 0000 003E }
                 ; .FEND
                 ;
                 ;
                 ;// Update ADC function
                 ;void updateADC(){
                 ; 0000 0042 void updateADC(){
                 _updateADC:
                 ; .FSTART _updateADC
                 ; 0000 0043     // Convert ADC values to temperature
                 ; 0000 0044     temperature = (read_adc(7)*256.0)/1024.0; // Agus nos dio esta funcion
000138 e0a7      	LDI  R26,LOW(7)
000139 dfe2      	RCALL _read_adc
00013a 2766      	CLR  R22
00013b 2777      	CLR  R23
00013c d508      	RCALL __CDF1
                +
00013d e0a0     +LDI R26 , LOW ( 0x43800000 )
00013e e0b0     +LDI R27 , HIGH ( 0x43800000 )
00013f e880     +LDI R24 , BYTE3 ( 0x43800000 )
000140 e493     +LDI R25 , BYTE4 ( 0x43800000 )
                 	__GETD2N 0x43800000
000141 d587      	RCALL __MULF12
000142 01df      	MOVW R26,R30
000143 01cb      	MOVW R24,R22
                +
000144 e0e0     +LDI R30 , LOW ( 0x44800000 )
000145 e0f0     +LDI R31 , HIGH ( 0x44800000 )
000146 e860     +LDI R22 , BYTE3 ( 0x44800000 )
000147 e474     +LDI R23 , BYTE4 ( 0x44800000 )
                 	__GETD1N 0x44800000
000148 d5ce      	RCALL __DIVF21
000149 93e0 0915 	STS  _temperature,R30
00014b 93f0 0916 	STS  _temperature+1,R31
00014d 9360 0917 	STS  _temperature+2,R22
00014f 9370 0918 	STS  _temperature+3,R23
                 ; 0000 0045     // TEMPORAL print statement for DEV purposes only
                 ; 0000 0046     sprintf(time, "Temp: %d      ",read_adc(7));
000151 e0e5      	LDI  R30,LOW(_time)
000152 e0f9      	LDI  R31,HIGH(_time)
000153 93fa      	ST   -Y,R31
000154 93ea      	ST   -Y,R30
                +
000155 ebe6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000156 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000157 93fa      	ST   -Y,R31
000158 93ea      	ST   -Y,R30
000159 e0a7      	LDI  R26,LOW(7)
00015a dfc1      	RCALL _read_adc
00015b 2766      	CLR  R22
00015c 2777      	CLR  R23
00015d d449      	RCALL __PUTPARD1
00015e e084      	LDI  R24,4
00015f d322      	RCALL _sprintf
000160 9628      	ADIW R28,8
                 ; 0000 0047     MoveCursor(0,0);
000161 e0e0      	LDI  R30,LOW(0)
000162 93ea      	ST   -Y,R30
000163 e0a0      	LDI  R26,LOW(0)
000164 df98      	RCALL _MoveCursor
                 ; 0000 0048     StringLCDVar(time);
000165 e0a5      	LDI  R26,LOW(_time)
000166 e0b9      	LDI  R27,HIGH(_time)
000167 df7f      	RCALL _StringLCDVar
                 ; 0000 0049 }
000168 9508      	RET
                 ; .FEND
                 ;
                 ;// Counter
                 ;
                 ;unsigned char i=0, j=0;
                 ;
                 ;// Tone
                 ;
                 ;// Play frequency function
                 ;void tono(float freq){
                 ; 0000 0052 void tono(float freq){
                 _tono:
                 ; .FSTART _tono
                 ; 0000 0053     if(freq == 0)
000169 d442      	RCALL __PUTPARD2
                 ;	freq -> Y+0
00016a d437      	RCALL __GETD1S0
00016b d46f      	RCALL __CPD10
00016c f421      	BRNE _0x25
                 ; 0000 0054         TCCR1B=0x00;
00016d e0e0      	LDI  R30,LOW(0)
00016e 93e0 0081 	STS  129,R30
                 ; 0000 0055     else{
000170 c03c      	RJMP _0x26
                 _0x25:
                 ; 0000 0056         float cuentas;
                 ; 0000 0057         unsigned int cuentasEnt;
                 ; 0000 0058 
                 ; 0000 0059         cuentas = 500000.0/freq;
000171 9726      	SBIW R28,6
                 ;	freq -> Y+6
                 ;	cuentas -> Y+2
                 ;	cuentasEnt -> Y+0
                +
000172 81ee     +LDD R30 , Y + 6
000173 81ff     +LDD R31 , Y + 6 + 1
000174 8568     +LDD R22 , Y + 6 + 2
000175 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
000176 e0a0     +LDI R26 , LOW ( 0x48F42400 )
000177 e2b4     +LDI R27 , HIGH ( 0x48F42400 )
000178 ef84     +LDI R24 , BYTE3 ( 0x48F42400 )
000179 e498     +LDI R25 , BYTE4 ( 0x48F42400 )
                 	__GETD2N 0x48F42400
00017a d59c      	RCALL __DIVF21
                +
00017b 83ea     +STD Y + 2 , R30
00017c 83fb     +STD Y + 2 + 1 , R31
00017d 836c     +STD Y + 2 + 2 , R22
00017e 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 005A         cuentasEnt = cuentas;
00017f 01de      	MOVW R26,R28
000180 d48b      	RCALL __CFD1U
000181 93ed      	ST   X+,R30
000182 93fc      	ST   X,R31
                 ; 0000 005B         if(cuentas-cuentasEnt>=0.5)
000183 81e8      	LD   R30,Y
000184 81f9      	LDD  R31,Y+1
                +
000185 81aa     +LDD R26 , Y + 2
000186 81bb     +LDD R27 , Y + 2 + 1
000187 818c     +LDD R24 , Y + 2 + 2
000188 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000189 2766      	CLR  R22
00018a 2777      	CLR  R23
00018b d4b9      	RCALL __CDF1
00018c d424      	RCALL __SWAPD12
00018d d4ea      	RCALL __SUBF12
00018e 01df      	MOVW R26,R30
00018f 01cb      	MOVW R24,R22
                +
000190 e0e0     +LDI R30 , LOW ( 0x3F000000 )
000191 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
000192 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
000193 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
000194 d5c6      	RCALL __CMPF12
000195 f028      	BRLO _0x27
                 ; 0000 005C             cuentasEnt++;
000196 81e8      	LD   R30,Y
000197 81f9      	LDD  R31,Y+1
000198 9631      	ADIW R30,1
000199 83e8      	ST   Y,R30
00019a 83f9      	STD  Y+1,R31
                 ; 0000 005D         OCR1AH=(cuentasEnt-1)/256;
                 _0x27:
00019b 81e8      	LD   R30,Y
00019c 81f9      	LDD  R31,Y+1
00019d 9731      	SBIW R30,1
00019e 2fef      	MOV  R30,R31
00019f e0f0      	LDI  R31,0
0001a0 93e0 0089 	STS  137,R30
                 ; 0000 005E         OCR1AL=(cuentasEnt-1)%256;
0001a2 81e8      	LD   R30,Y
0001a3 50e1      	SUBI R30,LOW(1)
0001a4 93e0 0088 	STS  136,R30
                 ; 0000 005F         TCCR1A=0x40;    // Timer 1 en modo de CTC
0001a6 e4e0      	LDI  R30,LOW(64)
0001a7 93e0 0080 	STS  128,R30
                 ; 0000 0060         TCCR1B=0x09;    // Timer en CK (sin pre-escalador)
0001a9 e0e9      	LDI  R30,LOW(9)
0001aa 93e0 0081 	STS  129,R30
                 ; 0000 0061     }
0001ac 9626      	ADIW R28,6
                 _0x26:
                 ; 0000 0062 }
0001ad 9624      	ADIW R28,4
0001ae 9508      	RET
                 ; .FEND
                 ;
                 ;int k=0;
                 ;char kFlag=0;
                 ;
                 ;// Play tone or song function
                 ;void playTone(){
                 ; 0000 0068 void playTone(){
                 _playTone:
                 ; .FSTART _playTone
                 ; 0000 0069     tono(k);
0001af d338      	RCALL SUBOPT_0x1
0001b0 d3c3      	RCALL __CWD1
0001b1 d493      	RCALL __CDF1
0001b2 01df      	MOVW R26,R30
0001b3 01cb      	MOVW R24,R22
0001b4 dfb4      	RCALL _tono
                 ; 0000 006A     if(kFlag==0)
0001b5 91e0 091d 	LDS  R30,_kFlag
0001b7 30e0      	CPI  R30,0
0001b8 f419      	BRNE _0x28
                 ; 0000 006B         k+=50;
0001b9 d32e      	RCALL SUBOPT_0x1
0001ba 96f2      	ADIW R30,50
0001bb c002      	RJMP _0x50
                 ; 0000 006C     else
                 _0x28:
                 ; 0000 006D         k-=50;
0001bc d32b      	RCALL SUBOPT_0x1
0001bd 97f2      	SBIW R30,50
                 _0x50:
0001be 93e0 091b 	STS  _k,R30
0001c0 93f0 091c 	STS  _k+1,R31
                 ; 0000 006E     if(k>500)
0001c2 d32a      	RCALL SUBOPT_0x2
0001c3 3fa5      	CPI  R26,LOW(0x1F5)
0001c4 e0e1      	LDI  R30,HIGH(0x1F5)
0001c5 07be      	CPC  R27,R30
0001c6 f014      	BRLT _0x2A
                 ; 0000 006F         kFlag=1;
0001c7 e0e1      	LDI  R30,LOW(1)
0001c8 c004      	RJMP _0x51
                 ; 0000 0070     else if (k<=50)
                 _0x2A:
0001c9 d323      	RCALL SUBOPT_0x2
0001ca 97d3      	SBIW R26,51
0001cb f41c      	BRGE _0x2C
                 ; 0000 0071         kFlag=0;
0001cc e0e0      	LDI  R30,LOW(0)
                 _0x51:
0001cd 93e0 091d 	STS  _kFlag,R30
                 ; 0000 0072 }
                 _0x2C:
0001cf 9508      	RET
                 ; .FEND
                 ;
                 ;// LCD
                 ;
                 ;void printTime(){
                 ; 0000 0076 void printTime(){
                 _printTime:
                 ; .FSTART _printTime
                 ; 0000 0077 //    sprintf(time, "Hora: %02i:%02i:%02i Temp: %f", H, M, S, temperature);
                 ; 0000 0078 //    MoveCursor(0,0);
                 ; 0000 0079 //    StringLCDVar(time);
                 ; 0000 007A //    sprintf(time, "Alarma: %02i:%02i   ", AH, AM);
                 ; 0000 007B //    MoveCursor(0,1);
                 ; 0000 007C //    StringLCDVar(time);
                 ; 0000 007D }
0001d0 9508      	RET
                 ; .FEND
                 ;
                 ;// Clock
                 ;void updateClock(){
                 ; 0000 0080 void updateClock(){
                 _updateClock:
                 ; .FSTART _updateClock
                 ; 0000 0081     rtc_get_time(&H, &M, &S);
0001d1 d320      	RCALL SUBOPT_0x3
                 ; 0000 0082 }
0001d2 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0085 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0086 
                 ; 0000 0087 // ADC
                 ; 0000 0088 
                 ; 0000 0089 // ADC initialization
                 ; 0000 008A // ADC Clock frequency: 1000.000 kHz
                 ; 0000 008B // ADC Voltage Reference: AREF pin
                 ; 0000 008C // ADC High Speed Mode: On
                 ; 0000 008D // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 008E // ADC4: On, ADC5: On, ADC6: On, ADC7: On
                 ; 0000 008F DIDR0=(0<<ADC7D) | (0<<ADC6D) | (0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
0001d3 e0e0      	LDI  R30,LOW(0)
0001d4 93e0 007e 	STS  126,R30
                 ; 0000 0090 ADMUX=ADC_VREF_TYPE;
0001d6 93e0 007c 	STS  124,R30
                 ; 0000 0091 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0001d8 e8e3      	LDI  R30,LOW(131)
0001d9 93e0 007a 	STS  122,R30
                 ; 0000 0092 ADCSRB=(1<<ADHSM);
0001db e8e0      	LDI  R30,LOW(128)
0001dc 93e0 007b 	STS  123,R30
                 ; 0000 0093 
                 ; 0000 0094 // LCD
                 ; 0000 0095 
                 ; 0000 0096 SetupLCD();
0001de dea2      	RCALL _SetupLCD
                 ; 0000 0097 
                 ; 0000 0098 // DS1302
                 ; 0000 0099 rtc_init(0,0,0);
0001df e0e0      	LDI  R30,LOW(0)
0001e0 93ea      	ST   -Y,R30
0001e1 93ea      	ST   -Y,R30
0001e2 e0a0      	LDI  R26,LOW(0)
0001e3 d104      	RCALL _rtc_init
                 ; 0000 009A 
                 ; 0000 009B // Tone
                 ; 0000 009C DDRB.5=1;
0001e4 9a25      	SBI  0x4,5
                 ; 0000 009D 
                 ; 0000 009E // First actions
                 ; 0000 009F printTime();
0001e5 dfea      	RCALL _printTime
                 ; 0000 00A0 PORTC = 0x0F;
0001e6 e0ef      	LDI  R30,LOW(15)
0001e7 b9e8      	OUT  0x8,R30
                 ; 0000 00A1 rtc_get_time(&H, &M, &S);
0001e8 d309      	RCALL SUBOPT_0x3
                 ; 0000 00A2 
                 ; 0000 00A3 while (1){
                 _0x2F:
                 ; 0000 00A4     // Please write your application code here
                 ; 0000 00A5         // Counter
                 ; 0000 00A6         delay_ms(50);
0001e9 e3a2      	LDI  R26,LOW(50)
0001ea e0b0      	LDI  R27,0
0001eb d58f      	RCALL _delay_ms
                 ; 0000 00A7         j++;
0001ec 91e0 091a 	LDS  R30,_j
0001ee 5fef      	SUBI R30,-LOW(1)
0001ef 93e0 091a 	STS  _j,R30
                 ; 0000 00A8 
                 ; 0000 00A9         // ADC
                 ; 0000 00AA         updateADC();
0001f1 df46      	RCALL _updateADC
                 ; 0000 00AB 
                 ; 0000 00AC 
                 ; 0000 00AD         // 100 ms delay
                 ; 0000 00AE         if(j%2==0){
0001f2 91a0 091a 	LDS  R26,_j
0001f4 27bb      	CLR  R27
0001f5 e0e2      	LDI  R30,LOW(2)
0001f6 e0f0      	LDI  R31,HIGH(2)
0001f7 d394      	RCALL __MODW21
0001f8 9730      	SBIW R30,0
0001f9 f459      	BRNE _0x32
                 ; 0000 00AF            if(alarmFlag==1) {
0001fa 91a0 0901 	LDS  R26,_alarmFlag
0001fc 30a1      	CPI  R26,LOW(0x1)
0001fd f411      	BRNE _0x33
                 ; 0000 00B0             playTone();
0001fe dfb0      	RCALL _playTone
                 ; 0000 00B1            }
                 ; 0000 00B2            else
0001ff c005      	RJMP _0x34
                 _0x33:
                 ; 0000 00B3             tono(0);
                +
000200 e0a0     +LDI R26 , LOW ( 0x0 )
000201 e0b0     +LDI R27 , HIGH ( 0x0 )
000202 e080     +LDI R24 , BYTE3 ( 0x0 )
000203 e090     +LDI R25 , BYTE4 ( 0x0 )
                 	__GETD2N 0x0
000204 df64      	RCALL _tono
                 ; 0000 00B4         }
                 _0x34:
                 ; 0000 00B5         // 250 ms delay, add counter
                 ; 0000 00B6         if(j%5==0)
                 _0x32:
000205 91a0 091a 	LDS  R26,_j
000207 27bb      	CLR  R27
000208 e0e5      	LDI  R30,LOW(5)
000209 e0f0      	LDI  R31,HIGH(5)
00020a d381      	RCALL __MODW21
00020b 9730      	SBIW R30,0
00020c f429      	BRNE _0x35
                 ; 0000 00B7             i++;
00020d 91e0 0919 	LDS  R30,_i
00020f 5fef      	SUBI R30,-LOW(1)
000210 93e0 0919 	STS  _i,R30
                 ; 0000 00B8         // 500 ms delay, reset counter
                 ; 0000 00B9         if(j%10==0)
                 _0x35:
000212 91a0 091a 	LDS  R26,_j
000214 27bb      	CLR  R27
000215 e0ea      	LDI  R30,LOW(10)
000216 e0f0      	LDI  R31,HIGH(10)
000217 d374      	RCALL __MODW21
000218 9730      	SBIW R30,0
000219 f419      	BRNE _0x36
                 ; 0000 00BA             j=0;
00021a e0e0      	LDI  R30,LOW(0)
00021b 93e0 091a 	STS  _j,R30
                 ; 0000 00BB         // Turns alarm flag on when H, M and S match
                 ; 0000 00BC         if(S==0 && M==AM && H==AH)
                 _0x36:
00021d 91a0 0904 	LDS  R26,_S
00021f 30a0      	CPI  R26,LOW(0x0)
000220 f471      	BRNE _0x38
000221 e0a1      	LDI  R26,LOW(_AM)
000222 e0b0      	LDI  R27,HIGH(_AM)
000223 d39a      	RCALL __EEPROMRDB
000224 91a0 0903 	LDS  R26,_M
000226 17ea      	CP   R30,R26
000227 f439      	BRNE _0x38
000228 e0a0      	LDI  R26,LOW(_AH)
000229 e0b0      	LDI  R27,HIGH(_AH)
00022a d393      	RCALL __EEPROMRDB
00022b 91a0 0902 	LDS  R26,_H
00022d 17ea      	CP   R30,R26
00022e f009      	BREQ _0x39
                 _0x38:
00022f c003      	RJMP _0x37
                 _0x39:
                 ; 0000 00BD             alarmFlag=1;
000230 e0e1      	LDI  R30,LOW(1)
000231 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00BE 
                 ; 0000 00BF         // 1 s delay
                 ; 0000 00C0         if (i==4)
                 _0x37:
000233 91a0 0919 	LDS  R26,_i
000235 30a4      	CPI  R26,LOW(0x4)
000236 f411      	BRNE _0x3A
                 ; 0000 00C1         {
                 ; 0000 00C2             // Update clock
                 ; 0000 00C3             updateClock();
000237 df99      	RCALL _updateClock
                 ; 0000 00C4             // Print values un LCD display
                 ; 0000 00C5             printTime();
000238 df97      	RCALL _printTime
                 ; 0000 00C6         }
                 ; 0000 00C7 
                 ; 0000 00C8         // Clock
                 ; 0000 00C9 
                 ; 0000 00CA         // If alarm is on, switch will turn alarm off without
                 ; 0000 00CB         //  changing the default variable
                 ; 0000 00CC         if(!PINC.0){
                 _0x3A:
000239 9930      	SBIC 0x6,0
00023a c00e      	RJMP _0x3B
                 ; 0000 00CD             if(alarmFlag==1)
00023b 91a0 0901 	LDS  R26,_alarmFlag
00023d 30a1      	CPI  R26,LOW(0x1)
00023e f421      	BRNE _0x3C
                 ; 0000 00CE                 alarmFlag = 0;
00023f e0e0      	LDI  R30,LOW(0)
000240 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00CF             else{
000242 c006      	RJMP _0x3D
                 _0x3C:
                 ; 0000 00D0                 H++;
000243 91e0 0902 	LDS  R30,_H
000245 5fef      	SUBI R30,-LOW(1)
000246 93e0 0902 	STS  _H,R30
                 ; 0000 00D1                 rtc_set_time(H, M, S);
000248 d2b4      	RCALL SUBOPT_0x4
                 ; 0000 00D2             }
                 _0x3D:
                 ; 0000 00D3         }
                 ; 0000 00D4         // If alarm is on, switch will turn alarm off without
                 ; 0000 00D5         //  changing the default variable
                 ; 0000 00D6         if(!PINC.1){
                 _0x3B:
000249 9931      	SBIC 0x6,1
00024a c00e      	RJMP _0x3E
                 ; 0000 00D7             if(alarmFlag==1)
00024b 91a0 0901 	LDS  R26,_alarmFlag
00024d 30a1      	CPI  R26,LOW(0x1)
00024e f421      	BRNE _0x3F
                 ; 0000 00D8                 alarmFlag = 0;
00024f e0e0      	LDI  R30,LOW(0)
000250 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00D9             else{
000252 c006      	RJMP _0x40
                 _0x3F:
                 ; 0000 00DA                 M++;
000253 91e0 0903 	LDS  R30,_M
000255 5fef      	SUBI R30,-LOW(1)
000256 93e0 0903 	STS  _M,R30
                 ; 0000 00DB                 rtc_set_time(H, M, S);
000258 d2a4      	RCALL SUBOPT_0x4
                 ; 0000 00DC             }
                 _0x40:
                 ; 0000 00DD         }
                 ; 0000 00DE         // Verify the correct range on clock time
                 ; 0000 00DF         if(S>59)
                 _0x3E:
000259 91a0 0904 	LDS  R26,_S
00025b 33ac      	CPI  R26,LOW(0x3C)
00025c f018      	BRLO _0x41
                 ; 0000 00E0             S=0;
00025d e0e0      	LDI  R30,LOW(0)
00025e 93e0 0904 	STS  _S,R30
                 ; 0000 00E1         if(M>59)
                 _0x41:
000260 91a0 0903 	LDS  R26,_M
000262 33ac      	CPI  R26,LOW(0x3C)
000263 f018      	BRLO _0x42
                 ; 0000 00E2             M=0;
000264 e0e0      	LDI  R30,LOW(0)
000265 93e0 0903 	STS  _M,R30
                 ; 0000 00E3         if(H>23)
                 _0x42:
000267 91a0 0902 	LDS  R26,_H
000269 31a8      	CPI  R26,LOW(0x18)
00026a f018      	BRLO _0x43
                 ; 0000 00E4             H=0;
00026b e0e0      	LDI  R30,LOW(0)
00026c 93e0 0902 	STS  _H,R30
                 ; 0000 00E5         if(AM>59)
                 _0x43:
00026e d297      	RCALL SUBOPT_0x5
00026f f008      	BRLO _0x44
                 ; 0000 00E6             AM=0;
000270 d29a      	RCALL SUBOPT_0x6
                 ; 0000 00E7         if(AH>23)
                 _0x44:
000271 d29e      	RCALL SUBOPT_0x7
000272 f008      	BRLO _0x45
                 ; 0000 00E8             AH=0;
000273 d2a1      	RCALL SUBOPT_0x8
                 ; 0000 00E9 
                 ; 0000 00EA         // Alarm
                 ; 0000 00EB 
                 ; 0000 00EC         // If alarm is on, switch will turn alarm off without
                 ; 0000 00ED         //  changing the default variable
                 ; 0000 00EE         if(!PINC.2){
                 _0x45:
000274 9932      	SBIC 0x6,2
000275 c00d      	RJMP _0x46
                 ; 0000 00EF             if(alarmFlag==1)
000276 91a0 0901 	LDS  R26,_alarmFlag
000278 30a1      	CPI  R26,LOW(0x1)
000279 f421      	BRNE _0x47
                 ; 0000 00F0                 alarmFlag = 0;
00027a e0e0      	LDI  R30,LOW(0)
00027b 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00F1             else
00027d c005      	RJMP _0x48
                 _0x47:
                 ; 0000 00F2                 AH++;
00027e e0a0      	LDI  R26,LOW(_AH)
00027f e0b0      	LDI  R27,HIGH(_AH)
000280 d33d      	RCALL __EEPROMRDB
000281 5fef      	SUBI R30,-LOW(1)
000282 d347      	RCALL __EEPROMWRB
                 ; 0000 00F3         }
                 _0x48:
                 ; 0000 00F4         // If alarm is on, switch will turn alarm off without
                 ; 0000 00F5         //  changing the default variable
                 ; 0000 00F6         if(!PINC.3){
                 _0x46:
000283 9933      	SBIC 0x6,3
000284 c00d      	RJMP _0x49
                 ; 0000 00F7             if(alarmFlag==1)
000285 91a0 0901 	LDS  R26,_alarmFlag
000287 30a1      	CPI  R26,LOW(0x1)
000288 f421      	BRNE _0x4A
                 ; 0000 00F8                 alarmFlag = 0;
000289 e0e0      	LDI  R30,LOW(0)
00028a 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00F9             else
00028c c005      	RJMP _0x4B
                 _0x4A:
                 ; 0000 00FA                 AM++;
00028d e0a1      	LDI  R26,LOW(_AM)
00028e e0b0      	LDI  R27,HIGH(_AM)
00028f d32e      	RCALL __EEPROMRDB
000290 5fef      	SUBI R30,-LOW(1)
000291 d338      	RCALL __EEPROMWRB
                 ; 0000 00FB         }
                 _0x4B:
                 ; 0000 00FC         // Verify the correct range on alarm time
                 ; 0000 00FD         if(AM>59)
                 _0x49:
000292 d273      	RCALL SUBOPT_0x5
000293 f008      	BRLO _0x4C
                 ; 0000 00FE             AM=0;
000294 d276      	RCALL SUBOPT_0x6
                 ; 0000 00FF         if(AH>23)
                 _0x4C:
000295 d27a      	RCALL SUBOPT_0x7
000296 f008      	BRLO _0x4D
                 ; 0000 0100             AH=0;
000297 d27d      	RCALL SUBOPT_0x8
                 ; 0000 0101     }
                 _0x4D:
000298 cf50      	RJMP _0x2F
                 ; 0000 0102 }
                 _0x4E:
000299 cfff      	RJMP _0x4E
                 ; .FEND
                 
                 	.CSEG
                 _ds1302_rst0_G100:
                 ; .FSTART _ds1302_rst0_G100
00029a 9858      	cbi  __ds1302_port,__ds1302_rst
                +
00029b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00029c 958a     +DEC R24
00029d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00029e 9508      	RET
                 ; .FEND
                 _ds1302_write0_G100:
                 ; .FSTART _ds1302_write0_G100
00029f 930a      	ST   -Y,R16
0002a0 2f0a      	MOV  R16,R26
0002a1 9a51          sbi  __ds1302_port-1,__ds1302_sclk
0002a2 9a52          sbi  __ds1302_port-1,__ds1302_io
0002a3 9a50          sbi  __ds1302_port-1,__ds1302_rst
0002a4 9a58          sbi  __ds1302_port,__ds1302_rst
                +
0002a5 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002a6 958a     +DEC R24
0002a7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002a8 2fa0      	MOV  R26,R16
0002a9 d002      	RCALL _ds1302_write1_G100
0002aa 940c 02da 	JMP  _0x20A0005
                 ; .FEND
                 _ds1302_write1_G100:
                 ; .FSTART _ds1302_write1_G100
0002ac 93aa      	ST   -Y,R26
0002ad 91e9          ld   r30,y+
0002ae e0a8          ldi  r26,8
                 ds1302_write2:
0002af 95e7          ror  r30
0002b0 985a          cbi  __ds1302_port,__ds1302_io
0002b1 f408          brcc ds1302_write3
0002b2 9a5a          sbi  __ds1302_port,__ds1302_io
                 ds1302_write3:
0002b3 0000          nop
0002b4 0000          nop
0002b5 0000          nop
0002b6 0000          nop
0002b7 9a59          sbi  __ds1302_port,__ds1302_sclk
                +
0002b8 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
0002b9 958a     +DEC R24
0002ba f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
0002bb 9859      	cbi  __ds1302_port,__ds1302_sclk
                +
0002bc e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
0002bd 958a     +DEC R24
0002be f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
0002bf 95aa          dec  r26
0002c0 f771          brne ds1302_write2
0002c1 9508          ret
                 ; .FEND
                 _ds1302_read:
                 ; .FSTART _ds1302_read
0002c2 930a      	ST   -Y,R16
0002c3 2f0a      	MOV  R16,R26
0002c4 2fe0      	MOV  R30,R16
0002c5 60e1      	ORI  R30,1
0002c6 2fae      	MOV  R26,R30
0002c7 dfd7      	RCALL _ds1302_write0_G100
0002c8 985a          cbi  __ds1302_port,__ds1302_io
0002c9 9852          cbi  __ds1302_port-1,__ds1302_io
0002ca e0a8          ldi  r26,8
                 ds1302_read0:
0002cb 9488          clc
0002cc 994a      	sbic __ds1302_port-2,__ds1302_io
0002cd 9408          sec
0002ce 95e7          ror  r30
0002cf 9a59          sbi  __ds1302_port,__ds1302_sclk
                +
0002d0 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
0002d1 958a     +DEC R24
0002d2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
0002d3 9859      	cbi  __ds1302_port,__ds1302_sclk
                +
0002d4 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
0002d5 958a     +DEC R24
0002d6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
0002d7 95aa          dec  r26
0002d8 f791          brne ds1302_read0
0002d9 dfc0      	RCALL _ds1302_rst0_G100
                 _0x20A0005:
0002da 9109      	LD   R16,Y+
0002db 9508      	RET
                 ; .FEND
                 _ds1302_write:
                 ; .FSTART _ds1302_write
0002dc d206      	RCALL SUBOPT_0x0
0002dd 2fe1      	MOV  R30,R17
0002de 7fee      	ANDI R30,0xFE
0002df 2fae      	MOV  R26,R30
0002e0 dfbe      	RCALL _ds1302_write0_G100
0002e1 2fa0      	MOV  R26,R16
0002e2 dfc9      	RCALL _ds1302_write1_G100
0002e3 dfb6      	RCALL _ds1302_rst0_G100
                 _0x20A0003:
0002e4 8119      	LDD  R17,Y+1
0002e5 8108      	LDD  R16,Y+0
                 _0x20A0004:
0002e6 9623      	ADIW R28,3
0002e7 9508      	RET
                 ; .FEND
                 _rtc_init:
                 ; .FSTART _rtc_init
0002e8 d231      	RCALL SUBOPT_0x9
0002e9 7003      	ANDI R16,LOW(3)
0002ea 3020      	CPI  R18,0
0002eb f009      	BREQ _0x2000003
0002ec 6a00      	ORI  R16,LOW(160)
                 _0x2000003:
0002ed 3011      	CPI  R17,1
0002ee f411      	BRNE _0x2000004
0002ef 6004      	ORI  R16,LOW(4)
0002f0 c005      	RJMP _0x2000005
                 _0x2000004:
0002f1 3012      	CPI  R17,2
0002f2 f411      	BRNE _0x2000006
0002f3 6008      	ORI  R16,LOW(8)
0002f4 c001      	RJMP _0x2000007
                 _0x2000006:
0002f5 e000      	LDI  R16,LOW(0)
                 _0x2000007:
                 _0x2000005:
0002f6 d228      	RCALL SUBOPT_0xA
0002f7 e9e0      	LDI  R30,LOW(144)
0002f8 93ea      	ST   -Y,R30
0002f9 2fa0      	MOV  R26,R16
0002fa c02e      	RJMP _0x20A0002
                 ; .FEND
                 _rtc_get_time:
                 ; .FSTART _rtc_get_time
0002fb d24a      	RCALL __SAVELOCR6
0002fc 018d      	MOVW R16,R26
                +
0002fd 812e     +LDD R18 , Y + 6
0002fe 813f     +LDD R19 , Y + 6 + 1
                 	__GETWRS 18,19,6
                +
0002ff 8548     +LDD R20 , Y + 8
000300 8559     +LDD R21 , Y + 8 + 1
                 	__GETWRS 20,21,8
000301 e8a5      	LDI  R26,LOW(133)
000302 dfbf      	RCALL _ds1302_read
000303 2fae      	MOV  R26,R30
000304 d1ae      	RCALL _bcd2bin
000305 01da      	MOVW R26,R20
000306 93ec      	ST   X,R30
000307 e8a3      	LDI  R26,LOW(131)
000308 dfb9      	RCALL _ds1302_read
000309 2fae      	MOV  R26,R30
00030a d1a8      	RCALL _bcd2bin
00030b 01d9      	MOVW R26,R18
00030c 93ec      	ST   X,R30
00030d e8a1      	LDI  R26,LOW(129)
00030e dfb3      	RCALL _ds1302_read
00030f 2fae      	MOV  R26,R30
000310 d1a2      	RCALL _bcd2bin
000311 01d8      	MOVW R26,R16
000312 93ec      	ST   X,R30
000313 d239      	RCALL __LOADLOCR6
000314 962a      	ADIW R28,10
000315 9508      	RET
                 ; .FEND
                 _rtc_set_time:
                 ; .FSTART _rtc_set_time
000316 d203      	RCALL SUBOPT_0x9
000317 d207      	RCALL SUBOPT_0xA
000318 e8e4      	LDI  R30,LOW(132)
000319 93ea      	ST   -Y,R30
00031a 2fa2      	MOV  R26,R18
00031b d1a4      	RCALL _bin2bcd
00031c 2fae      	MOV  R26,R30
00031d dfbe      	RCALL _ds1302_write
00031e e8e2      	LDI  R30,LOW(130)
00031f 93ea      	ST   -Y,R30
000320 2fa1      	MOV  R26,R17
000321 d19e      	RCALL _bin2bcd
000322 2fae      	MOV  R26,R30
000323 dfb8      	RCALL _ds1302_write
000324 e8e0      	LDI  R30,LOW(128)
000325 93ea      	ST   -Y,R30
000326 2fa0      	MOV  R26,R16
000327 d198      	RCALL _bin2bcd
000328 2fae      	MOV  R26,R30
                 _0x20A0002:
000329 dfb2      	RCALL _ds1302_write
00032a e8ee      	LDI  R30,LOW(142)
00032b 93ea      	ST   -Y,R30
00032c e8a0      	LDI  R26,LOW(128)
00032d dfae      	RCALL _ds1302_write
00032e d221      	RCALL __LOADLOCR3
00032f 9625      	ADIW R28,5
000330 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000331 d215      	RCALL __SAVELOCR5
000332 019d      	MOVW R18,R26
000333 814d      	LDD  R20,Y+5
000334 9612      	ADIW R26,2
000335 d264      	RCALL __GETW1P
000336 9730      	SBIW R30,0
000337 f0e1      	BREQ _0x2020016
000338 01d9      	MOVW R26,R18
000339 9614      	ADIW R26,4
00033a d25f      	RCALL __GETW1P
00033b 018f      	MOVW R16,R30
00033c 9730      	SBIW R30,0
00033d f059      	BREQ _0x2020018
                +
00033e 3002     +CPI R16 , LOW ( 2 )
00033f e0e0     +LDI R30 , HIGH ( 2 )
000340 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000341 f060      	BRLO _0x2020019
000342 01f8      	MOVW R30,R16
000343 9731      	SBIW R30,1
000344 018f      	MOVW R16,R30
                +
000345 01d9     +MOVW R26 , R18
000346 9614     +ADIW R26 , 4
000347 93ed     +ST X + , R30
000348 93fc     +ST X , R31
                 	__PUTW1RNS 18,4
                 _0x2020018:
000349 01d9      	MOVW R26,R18
00034a 9612      	ADIW R26,2
00034b d1d7      	RCALL SUBOPT_0xB
00034c 9731      	SBIW R30,1
00034d 8340      	ST   Z,R20
                 _0x2020019:
00034e 01d9      	MOVW R26,R18
00034f d24a      	RCALL __GETW1P
000350 23ff      	TST  R31
000351 f00a      	BRMI _0x202001A
000352 d1d0      	RCALL SUBOPT_0xB
                 _0x202001A:
000353 c005      	RJMP _0x202001B
                 _0x2020016:
000354 01d9      	MOVW R26,R18
000355 efef      	LDI  R30,LOW(65535)
000356 efff      	LDI  R31,HIGH(65535)
000357 93ed      	ST   X+,R30
000358 93fc      	ST   X,R31
                 _0x202001B:
000359 d1f4      	RCALL __LOADLOCR5
00035a 9626      	ADIW R28,6
00035b 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
00035c 93ba      	ST   -Y,R27
00035d 93aa      	ST   -Y,R26
00035e 9726      	SBIW R28,6
00035f d1e6      	RCALL __SAVELOCR6
000360 e000      	LDI  R16,0
000361 85ac      	LDD  R26,Y+12
000362 85bd      	LDD  R27,Y+12+1
000363 e0e0      	LDI  R30,LOW(0)
000364 e0f0      	LDI  R31,HIGH(0)
000365 93ed      	ST   X+,R30
000366 93fc      	ST   X,R31
                 _0x202001C:
000367 89ea      	LDD  R30,Y+18
000368 89fb      	LDD  R31,Y+18+1
000369 9631      	ADIW R30,1
00036a 8bea      	STD  Y+18,R30
00036b 8bfb      	STD  Y+18+1,R31
00036c 9731      	SBIW R30,1
00036d 91e4      	LPM  R30,Z
00036e 2f3e      	MOV  R19,R30
00036f 30e0      	CPI  R30,0
000370 f409      	BRNE PC+2
000371 c109      	RJMP _0x202001E
000372 2fe0      	MOV  R30,R16
000373 30e0      	CPI  R30,0
000374 f431      	BRNE _0x2020022
000375 3235      	CPI  R19,37
000376 f411      	BRNE _0x2020023
000377 e001      	LDI  R16,LOW(1)
000378 c001      	RJMP _0x2020024
                 _0x2020023:
000379 d1af      	RCALL SUBOPT_0xC
                 _0x2020024:
00037a c0ff      	RJMP _0x2020021
                 _0x2020022:
00037b 30e1      	CPI  R30,LOW(0x1)
00037c f4a1      	BRNE _0x2020025
00037d 3235      	CPI  R19,37
00037e f411      	BRNE _0x2020026
00037f d1a9      	RCALL SUBOPT_0xC
000380 c0f8      	RJMP _0x20200D2
                 _0x2020026:
000381 e002      	LDI  R16,LOW(2)
000382 e050      	LDI  R21,LOW(0)
000383 e010      	LDI  R17,LOW(0)
000384 323d      	CPI  R19,45
000385 f411      	BRNE _0x2020027
000386 e011      	LDI  R17,LOW(1)
000387 c0f2      	RJMP _0x2020021
                 _0x2020027:
000388 323b      	CPI  R19,43
000389 f411      	BRNE _0x2020028
00038a e25b      	LDI  R21,LOW(43)
00038b c0ee      	RJMP _0x2020021
                 _0x2020028:
00038c 3230      	CPI  R19,32
00038d f411      	BRNE _0x2020029
00038e e250      	LDI  R21,LOW(32)
00038f c0ea      	RJMP _0x2020021
                 _0x2020029:
000390 c002      	RJMP _0x202002A
                 _0x2020025:
000391 30e2      	CPI  R30,LOW(0x2)
000392 f439      	BRNE _0x202002B
                 _0x202002A:
000393 e040      	LDI  R20,LOW(0)
000394 e003      	LDI  R16,LOW(3)
000395 3330      	CPI  R19,48
000396 f411      	BRNE _0x202002C
000397 6810      	ORI  R17,LOW(128)
000398 c0e1      	RJMP _0x2020021
                 _0x202002C:
000399 c003      	RJMP _0x202002D
                 _0x202002B:
00039a 30e3      	CPI  R30,LOW(0x3)
00039b f009      	BREQ PC+2
00039c c0dd      	RJMP _0x2020021
                 _0x202002D:
00039d 3330      	CPI  R19,48
00039e f010      	BRLO _0x2020030
00039f 333a      	CPI  R19,58
0003a0 f008      	BRLO _0x2020031
                 _0x2020030:
0003a1 c007      	RJMP _0x202002F
                 _0x2020031:
0003a2 e0aa      	LDI  R26,LOW(10)
0003a3 9f4a      	MUL  R20,R26
0003a4 2d40      	MOV  R20,R0
0003a5 2fe3      	MOV  R30,R19
0003a6 53e0      	SUBI R30,LOW(48)
0003a7 0f4e      	ADD  R20,R30
0003a8 c0d1      	RJMP _0x2020021
                 _0x202002F:
0003a9 2fe3      	MOV  R30,R19
0003aa 36e3      	CPI  R30,LOW(0x63)
0003ab f439      	BRNE _0x2020035
0003ac d183      	RCALL SUBOPT_0xD
0003ad 89e8      	LDD  R30,Y+16
0003ae 89f9      	LDD  R31,Y+16+1
0003af 81a4      	LDD  R26,Z+4
0003b0 93aa      	ST   -Y,R26
0003b1 d184      	RCALL SUBOPT_0xE
0003b2 c0c6      	RJMP _0x2020036
                 _0x2020035:
0003b3 37e3      	CPI  R30,LOW(0x73)
0003b4 f429      	BRNE _0x2020038
0003b5 d17a      	RCALL SUBOPT_0xD
0003b6 d185      	RCALL SUBOPT_0xF
0003b7 d112      	RCALL _strlen
0003b8 2f0e      	MOV  R16,R30
0003b9 c007      	RJMP _0x2020039
                 _0x2020038:
0003ba 37e0      	CPI  R30,LOW(0x70)
0003bb f449      	BRNE _0x202003B
0003bc d173      	RCALL SUBOPT_0xD
0003bd d17e      	RCALL SUBOPT_0xF
0003be d117      	RCALL _strlenf
0003bf 2f0e      	MOV  R16,R30
0003c0 6018      	ORI  R17,LOW(8)
                 _0x2020039:
0003c1 6012      	ORI  R17,LOW(2)
0003c2 771f      	ANDI R17,LOW(127)
0003c3 e020      	LDI  R18,LOW(0)
0003c4 c038      	RJMP _0x202003C
                 _0x202003B:
0003c5 36e4      	CPI  R30,LOW(0x64)
0003c6 f011      	BREQ _0x202003F
0003c7 36e9      	CPI  R30,LOW(0x69)
0003c8 f411      	BRNE _0x2020040
                 _0x202003F:
0003c9 6014      	ORI  R17,LOW(4)
0003ca c002      	RJMP _0x2020041
                 _0x2020040:
0003cb 37e5      	CPI  R30,LOW(0x75)
0003cc f431      	BRNE _0x2020042
                 _0x2020041:
0003cd e9e8      	LDI  R30,LOW(_tbl10_G101*2)
0003ce e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0003cf 83ee      	STD  Y+6,R30
0003d0 83ff      	STD  Y+6+1,R31
0003d1 e005      	LDI  R16,LOW(5)
0003d2 c00c      	RJMP _0x2020043
                 _0x2020042:
0003d3 35e8      	CPI  R30,LOW(0x58)
0003d4 f411      	BRNE _0x2020045
0003d5 6018      	ORI  R17,LOW(8)
0003d6 c003      	RJMP _0x2020046
                 _0x2020045:
0003d7 37e8      	CPI  R30,LOW(0x78)
0003d8 f009      	BREQ PC+2
0003d9 c09f      	RJMP _0x2020077
                 _0x2020046:
0003da eae2      	LDI  R30,LOW(_tbl16_G101*2)
0003db e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0003dc 83ee      	STD  Y+6,R30
0003dd 83ff      	STD  Y+6+1,R31
0003de e004      	LDI  R16,LOW(4)
                 _0x2020043:
0003df ff12      	SBRS R17,2
0003e0 c015      	RJMP _0x2020048
0003e1 d14e      	RCALL SUBOPT_0xD
0003e2 89a8      	LDD  R26,Y+16
0003e3 89b9      	LDD  R27,Y+16+1
0003e4 9614      	ADIW R26,4
0003e5 91ed      	LD   R30,X+
0003e6 91fd      	LD   R31,X+
0003e7 87ea      	STD  Y+10,R30
0003e8 87fb      	STD  Y+10+1,R31
0003e9 85ab      	LDD  R26,Y+11
0003ea 23aa      	TST  R26
0003eb f422      	BRPL _0x2020049
0003ec d17b      	RCALL __ANEGW1
0003ed 87ea      	STD  Y+10,R30
0003ee 87fb      	STD  Y+10+1,R31
0003ef e25d      	LDI  R21,LOW(45)
                 _0x2020049:
0003f0 3050      	CPI  R21,0
0003f1 f011      	BREQ _0x202004A
0003f2 5f0f      	SUBI R16,-LOW(1)
0003f3 c001      	RJMP _0x202004B
                 _0x202004A:
0003f4 7f1b      	ANDI R17,LOW(251)
                 _0x202004B:
0003f5 c007      	RJMP _0x202004C
                 _0x2020048:
0003f6 d139      	RCALL SUBOPT_0xD
0003f7 89a8      	LDD  R26,Y+16
0003f8 89b9      	LDD  R27,Y+16+1
0003f9 9614      	ADIW R26,4
0003fa d19f      	RCALL __GETW1P
0003fb 87ea      	STD  Y+10,R30
0003fc 87fb      	STD  Y+10+1,R31
                 _0x202004C:
                 _0x202003C:
0003fd fd10      	SBRC R17,0
0003fe c010      	RJMP _0x202004D
                 _0x202004E:
0003ff 1704      	CP   R16,R20
000400 f470      	BRSH _0x2020050
000401 ff17      	SBRS R17,7
000402 c008      	RJMP _0x2020051
000403 ff12      	SBRS R17,2
000404 c004      	RJMP _0x2020052
000405 7f1b      	ANDI R17,LOW(251)
000406 2f35      	MOV  R19,R21
000407 5001      	SUBI R16,LOW(1)
000408 c001      	RJMP _0x2020053
                 _0x2020052:
000409 e330      	LDI  R19,LOW(48)
                 _0x2020053:
00040a c001      	RJMP _0x2020054
                 _0x2020051:
00040b e230      	LDI  R19,LOW(32)
                 _0x2020054:
00040c d11c      	RCALL SUBOPT_0xC
00040d 5041      	SUBI R20,LOW(1)
00040e cff0      	RJMP _0x202004E
                 _0x2020050:
                 _0x202004D:
00040f 2f20      	MOV  R18,R16
000410 ff11      	SBRS R17,1
000411 c016      	RJMP _0x2020055
                 _0x2020056:
000412 3020      	CPI  R18,0
000413 f099      	BREQ _0x2020058
000414 ff13      	SBRS R17,3
000415 c006      	RJMP _0x2020059
000416 81ee      	LDD  R30,Y+6
000417 81ff      	LDD  R31,Y+6+1
000418 9135      	LPM  R19,Z+
000419 83ee      	STD  Y+6,R30
00041a 83ff      	STD  Y+6+1,R31
00041b c005      	RJMP _0x202005A
                 _0x2020059:
00041c 81ae      	LDD  R26,Y+6
00041d 81bf      	LDD  R27,Y+6+1
00041e 913d      	LD   R19,X+
00041f 83ae      	STD  Y+6,R26
000420 83bf      	STD  Y+6+1,R27
                 _0x202005A:
000421 d107      	RCALL SUBOPT_0xC
000422 3040      	CPI  R20,0
000423 f009      	BREQ _0x202005B
000424 5041      	SUBI R20,LOW(1)
                 _0x202005B:
000425 5021      	SUBI R18,LOW(1)
000426 cfeb      	RJMP _0x2020056
                 _0x2020058:
000427 c048      	RJMP _0x202005C
                 _0x2020055:
                 _0x202005E:
000428 e330      	LDI  R19,LOW(48)
000429 81ee      	LDD  R30,Y+6
00042a 81ff      	LDD  R31,Y+6+1
00042b d172      	RCALL __GETW1PF
00042c 87e8      	STD  Y+8,R30
00042d 87f9      	STD  Y+8+1,R31
00042e 81ee      	LDD  R30,Y+6
00042f 81ff      	LDD  R31,Y+6+1
000430 9632      	ADIW R30,2
000431 83ee      	STD  Y+6,R30
000432 83ff      	STD  Y+6+1,R31
                 _0x2020060:
000433 85e8      	LDD  R30,Y+8
000434 85f9      	LDD  R31,Y+8+1
000435 85aa      	LDD  R26,Y+10
000436 85bb      	LDD  R27,Y+10+1
000437 17ae      	CP   R26,R30
000438 07bf      	CPC  R27,R31
000439 f050      	BRLO _0x2020062
00043a 5f3f      	SUBI R19,-LOW(1)
00043b 85a8      	LDD  R26,Y+8
00043c 85b9      	LDD  R27,Y+8+1
00043d 85ea      	LDD  R30,Y+10
00043e 85fb      	LDD  R31,Y+10+1
00043f 1bea      	SUB  R30,R26
000440 0bfb      	SBC  R31,R27
000441 87ea      	STD  Y+10,R30
000442 87fb      	STD  Y+10+1,R31
000443 cfef      	RJMP _0x2020060
                 _0x2020062:
000444 333a      	CPI  R19,58
000445 f028      	BRLO _0x2020063
000446 ff13      	SBRS R17,3
000447 c002      	RJMP _0x2020064
000448 5f39      	SUBI R19,-LOW(7)
000449 c001      	RJMP _0x2020065
                 _0x2020064:
00044a 5d39      	SUBI R19,-LOW(39)
                 _0x2020065:
                 _0x2020063:
00044b fd14      	SBRC R17,4
00044c c019      	RJMP _0x2020067
00044d 3331      	CPI  R19,49
00044e f420      	BRSH _0x2020069
00044f 85a8      	LDD  R26,Y+8
000450 85b9      	LDD  R27,Y+8+1
000451 9711      	SBIW R26,1
000452 f409      	BRNE _0x2020068
                 _0x2020069:
000453 c009      	RJMP _0x20200D3
                 _0x2020068:
000454 1742      	CP   R20,R18
000455 f010      	BRLO _0x202006D
000456 ff10      	SBRS R17,0
000457 c001      	RJMP _0x202006E
                 _0x202006D:
000458 c011      	RJMP _0x202006C
                 _0x202006E:
000459 e230      	LDI  R19,LOW(32)
00045a ff17      	SBRS R17,7
00045b c00a      	RJMP _0x202006F
00045c e330      	LDI  R19,LOW(48)
                 _0x20200D3:
00045d 6110      	ORI  R17,LOW(16)
00045e ff12      	SBRS R17,2
00045f c006      	RJMP _0x2020070
000460 7f1b      	ANDI R17,LOW(251)
000461 935a      	ST   -Y,R21
000462 d0d3      	RCALL SUBOPT_0xE
000463 3040      	CPI  R20,0
000464 f009      	BREQ _0x2020071
000465 5041      	SUBI R20,LOW(1)
                 _0x2020071:
                 _0x2020070:
                 _0x202006F:
                 _0x2020067:
000466 d0c2      	RCALL SUBOPT_0xC
000467 3040      	CPI  R20,0
000468 f009      	BREQ _0x2020072
000469 5041      	SUBI R20,LOW(1)
                 _0x2020072:
                 _0x202006C:
00046a 5021      	SUBI R18,LOW(1)
00046b 85a8      	LDD  R26,Y+8
00046c 85b9      	LDD  R27,Y+8+1
00046d 9712      	SBIW R26,2
00046e f008      	BRLO _0x202005F
00046f cfb8      	RJMP _0x202005E
                 _0x202005F:
                 _0x202005C:
000470 ff10      	SBRS R17,0
000471 c007      	RJMP _0x2020073
                 _0x2020074:
000472 3040      	CPI  R20,0
000473 f029      	BREQ _0x2020076
000474 5041      	SUBI R20,LOW(1)
000475 e2e0      	LDI  R30,LOW(32)
000476 93ea      	ST   -Y,R30
000477 d0be      	RCALL SUBOPT_0xE
000478 cff9      	RJMP _0x2020074
                 _0x2020076:
                 _0x2020073:
                 _0x2020077:
                 _0x2020036:
                 _0x20200D2:
000479 e000      	LDI  R16,LOW(0)
                 _0x2020021:
00047a ceec      	RJMP _0x202001C
                 _0x202001E:
00047b 85ac      	LDD  R26,Y+12
00047c 85bd      	LDD  R27,Y+12+1
00047d 91ed      	LD   R30,X+
00047e 91fd      	LD   R31,X+
00047f d0cd      	RCALL __LOADLOCR6
000480 9664      	ADIW R28,20
000481 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000482 92ff      	PUSH R15
000483 2ef8      	MOV  R15,R24
000484 9726      	SBIW R28,6
000485 d0c0      	RCALL __SAVELOCR6
000486 01fe      	MOVW R30,R28
000487 d0d8      	RCALL __ADDW1R15
                +
000488 8546     +LDD R20 , Z + 14
000489 8557     +LDD R21 , Z + 14 + 1
                 	__GETWRZ 20,21,14
00048a 2e04      	MOV  R0,R20
00048b 2a05      	OR   R0,R21
00048c f419      	BRNE _0x2020078
00048d efef      	LDI  R30,LOW(65535)
00048e efff      	LDI  R31,HIGH(65535)
00048f c01f      	RJMP _0x20A0001
                 _0x2020078:
000490 01de      	MOVW R26,R28
000491 9618      	ADIW R26,8
000492 d0d1      	RCALL __ADDW2R15
000493 018d      	MOVW R16,R26
                +
000494 8748     +STD Y + 8 , R20
000495 8759     +STD Y + 8 + 1 , R21
                 	__PUTWSR 20,21,8
000496 e0e0      	LDI  R30,LOW(0)
000497 87ea      	STD  Y+10,R30
000498 87eb      	STD  Y+10+1,R30
000499 01de      	MOVW R26,R28
00049a 961c      	ADIW R26,12
00049b d0c8      	RCALL __ADDW2R15
00049c 91ed      	LD   R30,X+
00049d 91fd      	LD   R31,X+
00049e 93fa      	ST   -Y,R31
00049f 93ea      	ST   -Y,R30
0004a0 931a      	ST   -Y,R17
0004a1 930a      	ST   -Y,R16
0004a2 e3e1      	LDI  R30,LOW(_put_buff_G101)
0004a3 e0f3      	LDI  R31,HIGH(_put_buff_G101)
0004a4 93fa      	ST   -Y,R31
0004a5 93ea      	ST   -Y,R30
0004a6 01de      	MOVW R26,R28
0004a7 961c      	ADIW R26,12
0004a8 deb3      	RCALL __print_G101
0004a9 019f      	MOVW R18,R30
0004aa 85a8      	LDD  R26,Y+8
0004ab 85b9      	LDD  R27,Y+8+1
0004ac e0e0      	LDI  R30,LOW(0)
0004ad 93ec      	ST   X,R30
0004ae 01f9      	MOVW R30,R18
                 _0x20A0001:
0004af d09d      	RCALL __LOADLOCR6
0004b0 962c      	ADIW R28,12
0004b1 90ff      	POP  R15
0004b2 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _bcd2bin:
                 ; .FSTART _bcd2bin
0004b3 93aa      	ST   -Y,R26
0004b4 81e8          ld   r30,y
0004b5 95e2          swap r30
0004b6 70ef          andi r30,0xf
0004b7 2fae          mov  r26,r30
0004b8 0faa          lsl  r26
0004b9 0faa          lsl  r26
0004ba 0fea          add  r30,r26
0004bb 0fee          lsl  r30
0004bc 91a9          ld   r26,y+
0004bd 70af          andi r26,0xf
0004be 0fea          add  r30,r26
0004bf 9508          ret
                 ; .FEND
                 _bin2bcd:
                 ; .FSTART _bin2bcd
0004c0 93aa      	ST   -Y,R26
0004c1 91a9          ld   r26,y+
0004c2 27ee          clr  r30
                 bin2bcd0:
0004c3 50aa          subi r26,10
0004c4 f012          brmi bin2bcd1
0004c5 5fe0          subi r30,-16
0004c6 cffc          rjmp bin2bcd0
                 bin2bcd1:
0004c7 5fa6          subi r26,-10
0004c8 0fea          add  r30,r26
0004c9 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0004ca 93ba      	ST   -Y,R27
0004cb 93aa      	ST   -Y,R26
0004cc 91a9          ld   r26,y+
0004cd 91b9          ld   r27,y+
0004ce 27ee          clr  r30
0004cf 27ff          clr  r31
                 strlen0:
0004d0 916d          ld   r22,x+
0004d1 2366          tst  r22
0004d2 f011          breq strlen1
0004d3 9631          adiw r30,1
0004d4 cffb          rjmp strlen0
                 strlen1:
0004d5 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0004d6 93ba      	ST   -Y,R27
0004d7 93aa      	ST   -Y,R26
0004d8 27aa          clr  r26
0004d9 27bb          clr  r27
0004da 91e9          ld   r30,y+
0004db 91f9          ld   r31,y+
                 strlenf0:
0004dc 9005      	lpm  r0,z+
0004dd 2000          tst  r0
0004de f011          breq strlenf1
0004df 9611          adiw r26,1
0004e0 cffb          rjmp strlenf0
                 strlenf1:
0004e1 01fd          movw r30,r26
0004e2 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _cursor:
000900           	.BYTE 0x1
                 _alarmFlag:
000901           	.BYTE 0x1
                 
                 	.ESEG
                 _AH:
000000           	.BYTE 0x1
                 _AM:
000001           	.BYTE 0x1
                 
                 	.DSEG
                 _H:
000902           	.BYTE 0x1
                 _M:
000903           	.BYTE 0x1
                 _S:
000904           	.BYTE 0x1
                 _time:
000905           	.BYTE 0x10
                 _temperature:
000915           	.BYTE 0x4
                 _i:
000919           	.BYTE 0x1
                 _j:
00091a           	.BYTE 0x1
                 _k:
00091b           	.BYTE 0x2
                 _kFlag:
00091d           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0004e3 931a      	ST   -Y,R17
0004e4 930a      	ST   -Y,R16
0004e5 2f0a      	MOV  R16,R26
0004e6 811a      	LDD  R17,Y+2
0004e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
0004e8 91e0 091b 	LDS  R30,_k
0004ea 91f0 091c 	LDS  R31,_k+1
0004ec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0004ed 91a0 091b 	LDS  R26,_k
0004ef 91b0 091c 	LDS  R27,_k+1
0004f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x3:
0004f2 e0e2      	LDI  R30,LOW(_H)
0004f3 e0f9      	LDI  R31,HIGH(_H)
0004f4 93fa      	ST   -Y,R31
0004f5 93ea      	ST   -Y,R30
0004f6 e0e3      	LDI  R30,LOW(_M)
0004f7 e0f9      	LDI  R31,HIGH(_M)
0004f8 93fa      	ST   -Y,R31
0004f9 93ea      	ST   -Y,R30
0004fa e0a4      	LDI  R26,LOW(_S)
0004fb e0b9      	LDI  R27,HIGH(_S)
0004fc cdfe      	RJMP _rtc_get_time
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
0004fd 91e0 0902 	LDS  R30,_H
0004ff 93ea      	ST   -Y,R30
000500 91e0 0903 	LDS  R30,_M
000502 93ea      	ST   -Y,R30
000503 91a0 0904 	LDS  R26,_S
000505 ce10      	RJMP _rtc_set_time
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000506 e0a1      	LDI  R26,LOW(_AM)
000507 e0b0      	LDI  R27,HIGH(_AM)
000508 d0b5      	RCALL __EEPROMRDB
000509 33ec      	CPI  R30,LOW(0x3C)
00050a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00050b e0a1      	LDI  R26,LOW(_AM)
00050c e0b0      	LDI  R27,HIGH(_AM)
00050d e0e0      	LDI  R30,LOW(0)
00050e d0bb      	RCALL __EEPROMWRB
00050f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000510 e0a0      	LDI  R26,LOW(_AH)
000511 e0b0      	LDI  R27,HIGH(_AH)
000512 d0ab      	RCALL __EEPROMRDB
000513 31e8      	CPI  R30,LOW(0x18)
000514 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000515 e0a0      	LDI  R26,LOW(_AH)
000516 e0b0      	LDI  R27,HIGH(_AH)
000517 e0e0      	LDI  R30,LOW(0)
000518 d0b1      	RCALL __EEPROMWRB
000519 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
00051a d02e      	RCALL __SAVELOCR3
00051b 2f0a      	MOV  R16,R26
00051c 811b      	LDD  R17,Y+3
00051d 812c      	LDD  R18,Y+4
00051e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
00051f e8ee      	LDI  R30,LOW(142)
000520 93ea      	ST   -Y,R30
000521 e0a0      	LDI  R26,LOW(0)
000522 cdb9      	RJMP _ds1302_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xB:
000523 91ed      	LD   R30,X+
000524 91fd      	LD   R31,X+
000525 9631      	ADIW R30,1
000526 93fe      	ST   -X,R31
000527 93ee      	ST   -X,R30
000528 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0xC:
000529 933a      	ST   -Y,R19
00052a 85ad      	LDD  R26,Y+13
00052b 85be      	LDD  R27,Y+13+1
00052c 85ef      	LDD  R30,Y+15
00052d 89f8      	LDD  R31,Y+15+1
00052e 9509      	ICALL
00052f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0xD:
000530 89e8      	LDD  R30,Y+16
000531 89f9      	LDD  R31,Y+16+1
000532 9734      	SBIW R30,4
000533 8be8      	STD  Y+16,R30
000534 8bf9      	STD  Y+16+1,R31
000535 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xE:
000536 85ad      	LDD  R26,Y+13
000537 85be      	LDD  R27,Y+13+1
000538 85ef      	LDD  R30,Y+15
000539 89f8      	LDD  R31,Y+15+1
00053a 9509      	ICALL
00053b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xF:
00053c 89a8      	LDD  R26,Y+16
00053d 89b9      	LDD  R27,Y+16+1
00053e 9614      	ADIW R26,4
00053f 91ed      	LD   R30,X+
000540 91fd      	LD   R31,X+
000541 83ee      	STD  Y+6,R30
000542 83ff      	STD  Y+6+1,R31
000543 81ae      	LDD  R26,Y+6
000544 81bf      	LDD  R27,Y+6+1
000545 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000546 935a      	ST   -Y,R21
                 __SAVELOCR5:
000547 934a      	ST   -Y,R20
                 __SAVELOCR4:
000548 933a      	ST   -Y,R19
                 __SAVELOCR3:
000549 932a      	ST   -Y,R18
                 __SAVELOCR2:
00054a 931a      	ST   -Y,R17
00054b 930a      	ST   -Y,R16
00054c 9508      	RET
                 
                 __LOADLOCR6:
00054d 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00054e 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00054f 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000550 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000551 8119      	LDD  R17,Y+1
000552 8108      	LD   R16,Y
000553 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000554 93af      	PUSH R26
000555 93bf      	PUSH R27
000556 01db      	MOVW R26,R22
000557 0fac      	ADD  R26,R28
000558 1fbd      	ADC  R27,R29
                 __INITLOC0:
000559 9005      	LPM  R0,Z+
00055a 920d      	ST   X+,R0
00055b 958a      	DEC  R24
00055c f7e1      	BRNE __INITLOC0
00055d 91bf      	POP  R27
00055e 91af      	POP  R26
00055f 9508      	RET
                 
                 __ADDW1R15:
000560 2400      	CLR  R0
000561 0def      	ADD  R30,R15
000562 1df0      	ADC  R31,R0
000563 9508      	RET
                 
                 __ADDW2R15:
000564 2400      	CLR  R0
000565 0daf      	ADD  R26,R15
000566 1db0      	ADC  R27,R0
000567 9508      	RET
                 
                 __ANEGW1:
000568 95f1      	NEG  R31
000569 95e1      	NEG  R30
00056a 40f0      	SBCI R31,0
00056b 9508      	RET
                 
                 __ANEGD1:
00056c 95f0      	COM  R31
00056d 9560      	COM  R22
00056e 9570      	COM  R23
00056f 95e1      	NEG  R30
000570 4fff      	SBCI R31,-1
000571 4f6f      	SBCI R22,-1
000572 4f7f      	SBCI R23,-1
000573 9508      	RET
                 
                 __CWD1:
000574 2f6f      	MOV  R22,R31
000575 0f66      	ADD  R22,R22
000576 0b66      	SBC  R22,R22
000577 2f76      	MOV  R23,R22
000578 9508      	RET
                 
                 __DIVW21U:
000579 2400      	CLR  R0
00057a 2411      	CLR  R1
00057b e190      	LDI  R25,16
                 __DIVW21U1:
00057c 0faa      	LSL  R26
00057d 1fbb      	ROL  R27
00057e 1c00      	ROL  R0
00057f 1c11      	ROL  R1
000580 1a0e      	SUB  R0,R30
000581 0a1f      	SBC  R1,R31
000582 f418      	BRCC __DIVW21U2
000583 0e0e      	ADD  R0,R30
000584 1e1f      	ADC  R1,R31
000585 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000586 60a1      	SBR  R26,1
                 __DIVW21U3:
000587 959a      	DEC  R25
000588 f799      	BRNE __DIVW21U1
000589 01fd      	MOVW R30,R26
00058a 01d0      	MOVW R26,R0
00058b 9508      	RET
                 
                 __MODW21:
00058c 94e8      	CLT
00058d ffb7      	SBRS R27,7
00058e c004      	RJMP __MODW211
00058f 95b1      	NEG  R27
000590 95a1      	NEG  R26
000591 40b0      	SBCI R27,0
000592 9468      	SET
                 __MODW211:
000593 fdf7      	SBRC R31,7
000594 dfd3      	RCALL __ANEGW1
000595 dfe3      	RCALL __DIVW21U
000596 01fd      	MOVW R30,R26
000597 f40e      	BRTC __MODW212
000598 dfcf      	RCALL __ANEGW1
                 __MODW212:
000599 9508      	RET
                 
                 __GETW1P:
00059a 91ed      	LD   R30,X+
00059b 91fc      	LD   R31,X
00059c 9711      	SBIW R26,1
00059d 9508      	RET
                 
                 __GETW1PF:
00059e 9005      	LPM  R0,Z+
00059f 91f4      	LPM  R31,Z
0005a0 2de0      	MOV  R30,R0
0005a1 9508      	RET
                 
                 __GETD1S0:
0005a2 81e8      	LD   R30,Y
0005a3 81f9      	LDD  R31,Y+1
0005a4 816a      	LDD  R22,Y+2
0005a5 817b      	LDD  R23,Y+3
0005a6 9508      	RET
                 
                 __PUTPARD1:
0005a7 937a      	ST   -Y,R23
0005a8 936a      	ST   -Y,R22
0005a9 93fa      	ST   -Y,R31
0005aa 93ea      	ST   -Y,R30
0005ab 9508      	RET
                 
                 __PUTPARD2:
0005ac 939a      	ST   -Y,R25
0005ad 938a      	ST   -Y,R24
0005ae 93ba      	ST   -Y,R27
0005af 93aa      	ST   -Y,R26
0005b0 9508      	RET
                 
                 __SWAPD12:
0005b1 2e18      	MOV  R1,R24
0005b2 2f86      	MOV  R24,R22
0005b3 2d61      	MOV  R22,R1
0005b4 2e19      	MOV  R1,R25
0005b5 2f97      	MOV  R25,R23
0005b6 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0005b7 2e1b      	MOV  R1,R27
0005b8 2fbf      	MOV  R27,R31
0005b9 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0005ba 2e1a      	MOV  R1,R26
0005bb 2fae      	MOV  R26,R30
0005bc 2de1      	MOV  R30,R1
0005bd 9508      	RET
                 
                 __EEPROMRDB:
0005be 99f9      	SBIC EECR,EEWE
0005bf cffe      	RJMP __EEPROMRDB
0005c0 93ff      	PUSH R31
0005c1 b7ff      	IN   R31,SREG
0005c2 94f8      	CLI
0005c3 bda1      	OUT  EEARL,R26
0005c4 bdb2      	OUT  EEARH,R27
0005c5 9af8      	SBI  EECR,EERE
0005c6 b5e0      	IN   R30,EEDR
0005c7 bfff      	OUT  SREG,R31
0005c8 91ff      	POP  R31
0005c9 9508      	RET
                 
                 __EEPROMWRB:
0005ca 9bf9      	SBIS EECR,EEWE
0005cb c002      	RJMP __EEPROMWRB1
0005cc 95a8      	WDR
0005cd cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
0005ce b79f      	IN   R25,SREG
0005cf 94f8      	CLI
0005d0 bda1      	OUT  EEARL,R26
0005d1 bdb2      	OUT  EEARH,R27
0005d2 9af8      	SBI  EECR,EERE
0005d3 b580      	IN   R24,EEDR
0005d4 17e8      	CP   R30,R24
0005d5 f019      	BREQ __EEPROMWRB0
0005d6 bde0      	OUT  EEDR,R30
0005d7 9afa      	SBI  EECR,EEMWE
0005d8 9af9      	SBI  EECR,EEWE
                 __EEPROMWRB0:
0005d9 bf9f      	OUT  SREG,R25
0005da 9508      	RET
                 
                 __CPD10:
0005db 9730      	SBIW R30,0
0005dc 4060      	SBCI R22,0
0005dd 4070      	SBCI R23,0
0005de 9508      	RET
                 
                 __ROUND_REPACK:
0005df 2355      	TST  R21
0005e0 f442      	BRPL __REPACK
0005e1 3850      	CPI  R21,0x80
0005e2 f411      	BRNE __ROUND_REPACK0
0005e3 ffe0      	SBRS R30,0
0005e4 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0005e5 9631      	ADIW R30,1
0005e6 1f69      	ADC  R22,R25
0005e7 1f79      	ADC  R23,R25
0005e8 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0005e9 e850      	LDI  R21,0x80
0005ea 2757      	EOR  R21,R23
0005eb f411      	BRNE __REPACK0
0005ec 935f      	PUSH R21
0005ed c0ca      	RJMP __ZERORES
                 __REPACK0:
0005ee 3f5f      	CPI  R21,0xFF
0005ef f031      	BREQ __REPACK1
0005f0 0f66      	LSL  R22
0005f1 0c00      	LSL  R0
0005f2 9557      	ROR  R21
0005f3 9567      	ROR  R22
0005f4 2f75      	MOV  R23,R21
0005f5 9508      	RET
                 __REPACK1:
0005f6 935f      	PUSH R21
0005f7 2000      	TST  R0
0005f8 f00a      	BRMI __REPACK2
0005f9 c0c9      	RJMP __MAXRES
                 __REPACK2:
0005fa c0c2      	RJMP __MINRES
                 
                 __UNPACK:
0005fb e850      	LDI  R21,0x80
0005fc 2e19      	MOV  R1,R25
0005fd 2215      	AND  R1,R21
0005fe 0f88      	LSL  R24
0005ff 1f99      	ROL  R25
000600 2795      	EOR  R25,R21
000601 0f55      	LSL  R21
000602 9587      	ROR  R24
                 
                 __UNPACK1:
000603 e850      	LDI  R21,0x80
000604 2e07      	MOV  R0,R23
000605 2205      	AND  R0,R21
000606 0f66      	LSL  R22
000607 1f77      	ROL  R23
000608 2775      	EOR  R23,R21
000609 0f55      	LSL  R21
00060a 9567      	ROR  R22
00060b 9508      	RET
                 
                 __CFD1U:
00060c 9468      	SET
00060d c001      	RJMP __CFD1U0
                 __CFD1:
00060e 94e8      	CLT
                 __CFD1U0:
00060f 935f      	PUSH R21
000610 dff2      	RCALL __UNPACK1
000611 3870      	CPI  R23,0x80
000612 f018      	BRLO __CFD10
000613 3f7f      	CPI  R23,0xFF
000614 f408      	BRCC __CFD10
000615 c0a2      	RJMP __ZERORES
                 __CFD10:
000616 e156      	LDI  R21,22
000617 1b57      	SUB  R21,R23
000618 f4aa      	BRPL __CFD11
000619 9551      	NEG  R21
00061a 3058      	CPI  R21,8
00061b f40e      	BRTC __CFD19
00061c 3059      	CPI  R21,9
                 __CFD19:
00061d f030      	BRLO __CFD17
00061e efef      	SER  R30
00061f efff      	SER  R31
000620 ef6f      	SER  R22
000621 e77f      	LDI  R23,0x7F
000622 f977      	BLD  R23,7
000623 c01a      	RJMP __CFD15
                 __CFD17:
000624 2777      	CLR  R23
000625 2355      	TST  R21
000626 f0b9      	BREQ __CFD15
                 __CFD18:
000627 0fee      	LSL  R30
000628 1fff      	ROL  R31
000629 1f66      	ROL  R22
00062a 1f77      	ROL  R23
00062b 955a      	DEC  R21
00062c f7d1      	BRNE __CFD18
00062d c010      	RJMP __CFD15
                 __CFD11:
00062e 2777      	CLR  R23
                 __CFD12:
00062f 3058      	CPI  R21,8
000630 f028      	BRLO __CFD13
000631 2fef      	MOV  R30,R31
000632 2ff6      	MOV  R31,R22
000633 2f67      	MOV  R22,R23
000634 5058      	SUBI R21,8
000635 cff9      	RJMP __CFD12
                 __CFD13:
000636 2355      	TST  R21
000637 f031      	BREQ __CFD15
                 __CFD14:
000638 9576      	LSR  R23
000639 9567      	ROR  R22
00063a 95f7      	ROR  R31
00063b 95e7      	ROR  R30
00063c 955a      	DEC  R21
00063d f7d1      	BRNE __CFD14
                 __CFD15:
00063e 2000      	TST  R0
00063f f40a      	BRPL __CFD16
000640 df2b      	RCALL __ANEGD1
                 __CFD16:
000641 915f      	POP  R21
000642 9508      	RET
                 
                 __CDF1U:
000643 9468      	SET
000644 c001      	RJMP __CDF1U0
                 __CDF1:
000645 94e8      	CLT
                 __CDF1U0:
000646 9730      	SBIW R30,0
000647 4060      	SBCI R22,0
000648 4070      	SBCI R23,0
000649 f0b1      	BREQ __CDF10
00064a 2400      	CLR  R0
00064b f026      	BRTS __CDF11
00064c 2377      	TST  R23
00064d f412      	BRPL __CDF11
00064e 9400      	COM  R0
00064f df1c      	RCALL __ANEGD1
                 __CDF11:
000650 2e17      	MOV  R1,R23
000651 e17e      	LDI  R23,30
000652 2011      	TST  R1
                 __CDF12:
000653 f032      	BRMI __CDF13
000654 957a      	DEC  R23
000655 0fee      	LSL  R30
000656 1fff      	ROL  R31
000657 1f66      	ROL  R22
000658 1c11      	ROL  R1
000659 cff9      	RJMP __CDF12
                 __CDF13:
00065a 2fef      	MOV  R30,R31
00065b 2ff6      	MOV  R31,R22
00065c 2d61      	MOV  R22,R1
00065d 935f      	PUSH R21
00065e df8a      	RCALL __REPACK
00065f 915f      	POP  R21
                 __CDF10:
000660 9508      	RET
                 
                 __SWAPACC:
000661 934f      	PUSH R20
000662 01af      	MOVW R20,R30
000663 01fd      	MOVW R30,R26
000664 01da      	MOVW R26,R20
000665 01ab      	MOVW R20,R22
000666 01bc      	MOVW R22,R24
000667 01ca      	MOVW R24,R20
000668 2d40      	MOV  R20,R0
000669 2c01      	MOV  R0,R1
00066a 2e14      	MOV  R1,R20
00066b 914f      	POP  R20
00066c 9508      	RET
                 
                 __UADD12:
00066d 0fea      	ADD  R30,R26
00066e 1ffb      	ADC  R31,R27
00066f 1f68      	ADC  R22,R24
000670 9508      	RET
                 
                 __NEGMAN1:
000671 95e0      	COM  R30
000672 95f0      	COM  R31
000673 9560      	COM  R22
000674 5fef      	SUBI R30,-1
000675 4fff      	SBCI R31,-1
000676 4f6f      	SBCI R22,-1
000677 9508      	RET
                 
                 __SUBF12:
000678 935f      	PUSH R21
000679 df81      	RCALL __UNPACK
00067a 3890      	CPI  R25,0x80
00067b f149      	BREQ __ADDF129
00067c e850      	LDI  R21,0x80
00067d 2615      	EOR  R1,R21
                 
                 __ADDF120:
00067e 3870      	CPI  R23,0x80
00067f f121      	BREQ __ADDF128
                 __ADDF121:
000680 2f57      	MOV  R21,R23
000681 1b59      	SUB  R21,R25
000682 f12b      	BRVS __ADDF1211
000683 f412      	BRPL __ADDF122
000684 dfdc      	RCALL __SWAPACC
000685 cffa      	RJMP __ADDF121
                 __ADDF122:
000686 3158      	CPI  R21,24
000687 f018      	BRLO __ADDF123
000688 27aa      	CLR  R26
000689 27bb      	CLR  R27
00068a 2788      	CLR  R24
                 __ADDF123:
00068b 3058      	CPI  R21,8
00068c f028      	BRLO __ADDF124
00068d 2fab      	MOV  R26,R27
00068e 2fb8      	MOV  R27,R24
00068f 2788      	CLR  R24
000690 5058      	SUBI R21,8
000691 cff9      	RJMP __ADDF123
                 __ADDF124:
000692 2355      	TST  R21
000693 f029      	BREQ __ADDF126
                 __ADDF125:
000694 9586      	LSR  R24
000695 95b7      	ROR  R27
000696 95a7      	ROR  R26
000697 955a      	DEC  R21
000698 f7d9      	BRNE __ADDF125
                 __ADDF126:
000699 2d50      	MOV  R21,R0
00069a 2551      	EOR  R21,R1
00069b f072      	BRMI __ADDF127
00069c dfd0      	RCALL __UADD12
00069d f438      	BRCC __ADDF129
00069e 9567      	ROR  R22
00069f 95f7      	ROR  R31
0006a0 95e7      	ROR  R30
0006a1 9573      	INC  R23
0006a2 f413      	BRVC __ADDF129
0006a3 c01f      	RJMP __MAXRES
                 __ADDF128:
0006a4 dfbc      	RCALL __SWAPACC
                 __ADDF129:
0006a5 df43      	RCALL __REPACK
0006a6 915f      	POP  R21
0006a7 9508      	RET
                 __ADDF1211:
0006a8 f7d8      	BRCC __ADDF128
0006a9 cffb      	RJMP __ADDF129
                 __ADDF127:
0006aa 1bea      	SUB  R30,R26
0006ab 0bfb      	SBC  R31,R27
0006ac 0b68      	SBC  R22,R24
0006ad f051      	BREQ __ZERORES
0006ae f410      	BRCC __ADDF1210
0006af 9400      	COM  R0
0006b0 dfc0      	RCALL __NEGMAN1
                 __ADDF1210:
0006b1 2366      	TST  R22
0006b2 f392      	BRMI __ADDF129
0006b3 0fee      	LSL  R30
0006b4 1fff      	ROL  R31
0006b5 1f66      	ROL  R22
0006b6 957a      	DEC  R23
0006b7 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0006b8 27ee      	CLR  R30
0006b9 27ff      	CLR  R31
0006ba 01bf      	MOVW R22,R30
0006bb 915f      	POP  R21
0006bc 9508      	RET
                 
                 __MINRES:
0006bd efef      	SER  R30
0006be efff      	SER  R31
0006bf e76f      	LDI  R22,0x7F
0006c0 ef7f      	SER  R23
0006c1 915f      	POP  R21
0006c2 9508      	RET
                 
                 __MAXRES:
0006c3 efef      	SER  R30
0006c4 efff      	SER  R31
0006c5 e76f      	LDI  R22,0x7F
0006c6 e77f      	LDI  R23,0x7F
0006c7 915f      	POP  R21
0006c8 9508      	RET
                 
                 __MULF12:
0006c9 935f      	PUSH R21
0006ca df30      	RCALL __UNPACK
0006cb 3870      	CPI  R23,0x80
0006cc f359      	BREQ __ZERORES
0006cd 3890      	CPI  R25,0x80
0006ce f349      	BREQ __ZERORES
0006cf 2401      	EOR  R0,R1
0006d0 9408      	SEC
0006d1 1f79      	ADC  R23,R25
0006d2 f423      	BRVC __MULF124
0006d3 f324      	BRLT __ZERORES
                 __MULF125:
0006d4 2000      	TST  R0
0006d5 f33a      	BRMI __MINRES
0006d6 cfec      	RJMP __MAXRES
                 __MULF124:
0006d7 920f      	PUSH R0
0006d8 931f      	PUSH R17
0006d9 932f      	PUSH R18
0006da 933f      	PUSH R19
0006db 934f      	PUSH R20
0006dc 2711      	CLR  R17
0006dd 2722      	CLR  R18
0006de 2799      	CLR  R25
0006df 9f68      	MUL  R22,R24
0006e0 01a0      	MOVW R20,R0
0006e1 9f8f      	MUL  R24,R31
0006e2 2d30      	MOV  R19,R0
0006e3 0d41      	ADD  R20,R1
0006e4 1f59      	ADC  R21,R25
0006e5 9f6b      	MUL  R22,R27
0006e6 0d30      	ADD  R19,R0
0006e7 1d41      	ADC  R20,R1
0006e8 1f59      	ADC  R21,R25
0006e9 9f8e      	MUL  R24,R30
0006ea d027      	RCALL __MULF126
0006eb 9fbf      	MUL  R27,R31
0006ec d025      	RCALL __MULF126
0006ed 9f6a      	MUL  R22,R26
0006ee d023      	RCALL __MULF126
0006ef 9fbe      	MUL  R27,R30
0006f0 d01d      	RCALL __MULF127
0006f1 9faf      	MUL  R26,R31
0006f2 d01b      	RCALL __MULF127
0006f3 9fae      	MUL  R26,R30
0006f4 0d11      	ADD  R17,R1
0006f5 1f29      	ADC  R18,R25
0006f6 1f39      	ADC  R19,R25
0006f7 1f49      	ADC  R20,R25
0006f8 1f59      	ADC  R21,R25
0006f9 2fe3      	MOV  R30,R19
0006fa 2ff4      	MOV  R31,R20
0006fb 2f65      	MOV  R22,R21
0006fc 2f52      	MOV  R21,R18
0006fd 914f      	POP  R20
0006fe 913f      	POP  R19
0006ff 912f      	POP  R18
000700 911f      	POP  R17
000701 900f      	POP  R0
000702 2366      	TST  R22
000703 f02a      	BRMI __MULF122
000704 0f55      	LSL  R21
000705 1fee      	ROL  R30
000706 1fff      	ROL  R31
000707 1f66      	ROL  R22
000708 c002      	RJMP __MULF123
                 __MULF122:
000709 9573      	INC  R23
00070a f24b      	BRVS __MULF125
                 __MULF123:
00070b ded3      	RCALL __ROUND_REPACK
00070c 915f      	POP  R21
00070d 9508      	RET
                 
                 __MULF127:
00070e 0d10      	ADD  R17,R0
00070f 1d21      	ADC  R18,R1
000710 1f39      	ADC  R19,R25
000711 c002      	RJMP __MULF128
                 __MULF126:
000712 0d20      	ADD  R18,R0
000713 1d31      	ADC  R19,R1
                 __MULF128:
000714 1f49      	ADC  R20,R25
000715 1f59      	ADC  R21,R25
000716 9508      	RET
                 
                 __DIVF21:
000717 935f      	PUSH R21
000718 dee2      	RCALL __UNPACK
000719 3870      	CPI  R23,0x80
00071a f421      	BRNE __DIVF210
00071b 2011      	TST  R1
                 __DIVF211:
00071c f40a      	BRPL __DIVF219
00071d cf9f      	RJMP __MINRES
                 __DIVF219:
00071e cfa4      	RJMP __MAXRES
                 __DIVF210:
00071f 3890      	CPI  R25,0x80
000720 f409      	BRNE __DIVF218
                 __DIVF217:
000721 cf96      	RJMP __ZERORES
                 __DIVF218:
000722 2401      	EOR  R0,R1
000723 9408      	SEC
000724 0b97      	SBC  R25,R23
000725 f41b      	BRVC __DIVF216
000726 f3d4      	BRLT __DIVF217
000727 2000      	TST  R0
000728 cff3      	RJMP __DIVF211
                 __DIVF216:
000729 2f79      	MOV  R23,R25
00072a 931f      	PUSH R17
00072b 932f      	PUSH R18
00072c 933f      	PUSH R19
00072d 934f      	PUSH R20
00072e 2411      	CLR  R1
00072f 2711      	CLR  R17
000730 2722      	CLR  R18
000731 2733      	CLR  R19
000732 01a9      	MOVW R20,R18
000733 e290      	LDI  R25,32
                 __DIVF212:
000734 17ae      	CP   R26,R30
000735 07bf      	CPC  R27,R31
000736 0786      	CPC  R24,R22
000737 0741      	CPC  R20,R17
000738 f030      	BRLO __DIVF213
000739 1bae      	SUB  R26,R30
00073a 0bbf      	SBC  R27,R31
00073b 0b86      	SBC  R24,R22
00073c 0b41      	SBC  R20,R17
00073d 9408      	SEC
00073e c001      	RJMP __DIVF214
                 __DIVF213:
00073f 9488      	CLC
                 __DIVF214:
000740 1f55      	ROL  R21
000741 1f22      	ROL  R18
000742 1f33      	ROL  R19
000743 1c11      	ROL  R1
000744 1faa      	ROL  R26
000745 1fbb      	ROL  R27
000746 1f88      	ROL  R24
000747 1f44      	ROL  R20
000748 959a      	DEC  R25
000749 f751      	BRNE __DIVF212
00074a 01f9      	MOVW R30,R18
00074b 2d61      	MOV  R22,R1
00074c 914f      	POP  R20
00074d 913f      	POP  R19
00074e 912f      	POP  R18
00074f 911f      	POP  R17
000750 2366      	TST  R22
000751 f032      	BRMI __DIVF215
000752 0f55      	LSL  R21
000753 1fee      	ROL  R30
000754 1fff      	ROL  R31
000755 1f66      	ROL  R22
000756 957a      	DEC  R23
000757 f24b      	BRVS __DIVF217
                 __DIVF215:
000758 de86      	RCALL __ROUND_REPACK
000759 915f      	POP  R21
00075a 9508      	RET
                 
                 __CMPF12:
00075b 2399      	TST  R25
00075c f09a      	BRMI __CMPF120
00075d 2377      	TST  R23
00075e f042      	BRMI __CMPF121
00075f 1797      	CP   R25,R23
000760 f048      	BRLO __CMPF122
000761 f429      	BRNE __CMPF121
000762 17ae      	CP   R26,R30
000763 07bf      	CPC  R27,R31
000764 0786      	CPC  R24,R22
000765 f020      	BRLO __CMPF122
000766 f031      	BREQ __CMPF123
                 __CMPF121:
000767 9498      	CLZ
000768 9488      	CLC
000769 9508      	RET
                 __CMPF122:
00076a 9498      	CLZ
00076b 9408      	SEC
00076c 9508      	RET
                 __CMPF123:
00076d 9418      	SEZ
00076e 9488      	CLC
00076f 9508      	RET
                 __CMPF120:
000770 2377      	TST  R23
000771 f7c2      	BRPL __CMPF122
000772 1797      	CP   R25,R23
000773 f398      	BRLO __CMPF121
000774 f7a9      	BRNE __CMPF122
000775 17ea      	CP   R30,R26
000776 07fb      	CPC  R31,R27
000777 0768      	CPC  R22,R24
000778 f388      	BRLO __CMPF122
000779 f399      	BREQ __CMPF123
00077a cfec      	RJMP __CMPF121
                 
                 _delay_ms:
00077b 9610      	adiw r26,0
00077c f039      	breq __delay_ms1
                 __delay_ms0:
00077d 95a8      	wdr
                +
00077e ed80     +LDI R24 , LOW ( 0x7D0 )
00077f e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000780 9701     +SBIW R24 , 1
000781 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000782 9711      	sbiw r26,1
000783 f7c9      	brne __delay_ms0
                 __delay_ms1:
000784 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

AT90USB1286 register use summary:
r0 :  40 r1 :  33 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   5 
r16:  72 r17:  60 r18:  37 r19:  40 r20:  46 r21:  74 r22:  67 r23:  55 
r24:  55 r25:  40 r26: 220 r27:  79 r28:  22 r29:   2 r30: 331 r31: 127 
x  :  33 y  : 195 z  :  11 
Registers used: 22 out of 35 (62.9%)

AT90USB1286 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  24 add   :  18 
adiw  :  30 and   :   2 andi  :  12 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   6 brcs  :   0 break :   0 breq  :  30 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  25 
brlt  :   3 brmi  :  11 brne  :  63 brpl  :   8 brsh  :   3 brtc  :   2 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   0 call  :   0 
cbi   :  12 cbr   :   0 clc   :   4 clh   :   0 cli   :   3 cln   :   0 
clr   :  37 cls   :   0 clt   :   3 clv   :   0 clz   :   2 com   :   8 
cp    :  11 cpc   :  13 cpi   :  67 cpse  :   0 dec   :  19 des   :   0 
elpm  :   0 eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   4 inc   :   2 jmp   :  44 ld    :  34 ldd   :  82 
ldi   : 191 lds   :  33 lpm   :   8 lsl   :  15 lsr   :   2 mov   :  94 
movw  :  43 mul   :  10 muls  :   0 mulsu :   0 neg   :   6 nop   :   4 
or    :   1 ori   :  12 out   :  15 pop   :  22 push  :  21 rcall : 162 
ret   :  71 reti  :   0 rjmp  : 115 rol   :  27 ror   :  14 sbc   :   9 
sbci  :  11 sbi   :  24 sbic  :   6 sbis  :   1 sbiw  :  25 sbr   :   1 
sbrc  :   3 sbrs  :  16 sec   :   5 seh   :   0 sei   :   0 sen   :   0 
ser   :   8 ses   :   0 set   :   3 sev   :   0 sez   :   1 sleep :   0 
spm   :   0 st    :  82 std   :  35 sts   :  33 sub   :   6 subi  :  32 
swap  :   2 tst   :  21 wdr   :   2 
Instructions used: 78 out of 117 (66.7%)

AT90USB1286 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000f0a   3804     46   3850  131072   2.9%
[.dseg] 0x000100 0x00091e      0     30     30    8192   0.4%
[.eseg] 0x000000 0x000002      0      2      2    4096   0.0%

Assembly complete, 0 errors, 1 warnings


AVRASM ver. 2.1.30  D:\JavierJr\Documents\ISD\FebJun20\LabMicrocontroladores\CodeVision\P01_Alarma\Debug\List\alarma.asm Fri Feb 21 12:18:09 2020

                 
                 
                 ;CodeVisionAVR C Compiler V3.32 Evaluation
                 ;(C) Copyright 1998-2017 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : AT90USB1286
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 2048 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: Off
                 ;Smart register allocation: Off
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME AT90USB1286
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 8192
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR1A=0xC8
                 	.EQU UDR1=0xCE
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x20FF
                 	.EQU __DSTACK_SIZE=0x0800
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0074 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
000046 940c 0000 	JMP  0x00
000048 940c 0000 	JMP  0x00
00004a 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00004c 2710
00004d 03e8
00004e 0064
00004f 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000050 0001      	.DB  0x1,0x0
                 _tbl16_G101:
000051 1000
000052 0100
000053 0010
000054 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000055 0303
000056 0203
000057 0c02
000058 0800      	.DB  0x3,0x3,0x3,0x2,0x2,0xC,0x0,0x8
000059 0100
00005a 0600      	.DB  0x0,0x1,0x0,0x6
                 _0x0:
00005b 3025
00005c 6932
00005d 253a
00005e 3230      	.DB  0x25,0x30,0x32,0x69,0x3A,0x25,0x30,0x32
00005f 3a69
000060 3025
000061 6932
000062 2020      	.DB  0x69,0x3A,0x25,0x30,0x32,0x69,0x20,0x20
000063 3025
000064 6932
000065 252e
000066 2569      	.DB  0x25,0x30,0x32,0x69,0x2E,0x25,0x69,0x25
000067 4363
000068 2000
000069 4120
00006a 616c      	.DB  0x63,0x43,0x0,0x20,0x20,0x41,0x6C,0x61
00006b 6d72
00006c 2061
00006d 3025
00006e 6932      	.DB  0x72,0x6D,0x61,0x20,0x25,0x30,0x32,0x69
00006f 253a
000070 3230
000071 2069
000072 2020      	.DB  0x3A,0x25,0x30,0x32,0x69,0x20,0x20,0x20
D:\JavierJr\Documents\ISD\FebJun20\LabMicrocontroladores\CodeVision\P01_Alarma\Debug\List\alarma.asm(1162): warning: .cseg .db misalignment - padding zero byte
000073 0000      	.DB  0x0
                 __RESET:
000074 94f8      	CLI
000075 27ee      	CLR  R30
000076 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000077 e0f1      	LDI  R31,1
000078 bff5      	OUT  MCUCR,R31
000079 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00007a e08d      	LDI  R24,(14-2)+1
00007b e0a2      	LDI  R26,2
00007c 27bb      	CLR  R27
                 __CLEAR_REG:
00007d 93ed      	ST   X+,R30
00007e 958a      	DEC  R24
00007f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000080 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000081 e290      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000082 e0a0      	LDI  R26,LOW(__SRAM_START)
000083 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000084 93ed      	ST   X+,R30
000085 9701      	SBIW R24,1
000086 f7e9      	BRNE __CLEAR_SRAM
                 
000087 bf8b      	OUT  RAMPZ,R24
                 
                 ;GPIOR0 INITIALIZATION
000088 e0e0      	LDI  R30,__GPIOR0_INIT
000089 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00008a efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00008b bfed      	OUT  SPL,R30
00008c e2e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008d bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008e e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008f e0d9      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000090 940c 021e 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x900
                 
                 	.CSEG
                 ;/*
                 ; * alarma.c
                 ; *
                 ; * Created: 11-Feb-20 5:39:55 PM
                 ; * Author: iavie
                 ; */
                 ;
                 ;// LCD config
                 ;#asm
                     .equ __lcd_port=0x11
                     .equ __lcd_EN=4
                     .equ __lcd_RS=5
                     .equ __lcd_D4=0
                     .equ __lcd_D5=1
                     .equ __lcd_D6=2
                     .equ __lcd_D7=3
                 ; 0000 0011 #endasm
                 ;
                 ;// DS1302 config
                 ;#asm
                 	.equ __ds1302_port=0x0B
                 	.equ __ds1302_io=2
                 	.equ __ds1302_sclk=1
                 	.equ __ds1302_rst=0
                 ; 0000 0019 #endasm
                 ;
                 ;#include <90usb1286.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <ds1302.h>
                 ;#include <display.h>
                 
                 	.CSEG
                 _SetupLCD:
                 ; .FSTART _SetupLCD
000092 972c      	SBIW R28,12
000093 e08c      	LDI  R24,12
                +
000094 e060     +LDI R22 , LOW ( 0 )
000095 e070     +LDI R23 , HIGH ( 0 )
                 	__GETWRN 22,23,0
000096 eaea      	LDI  R30,LOW(_0x3*2)
000097 e0f0      	LDI  R31,HIGH(_0x3*2)
000098 d519      	RCALL __INITLOCB
000099 930a      	ST   -Y,R16
                 ;	TableSetup -> Y+1
                 ;	i -> R16
                 ; 0000 001D     SBI __lcd_port-1,__lcd_EN
00009a 9a84          SBI __lcd_port-1,__lcd_EN
00009b 9a85          SBI __lcd_port-1,__lcd_RS
00009c 9a80          SBI __lcd_port-1,__lcd_D4
00009d 9a81          SBI __lcd_port-1,__lcd_D5
00009e 9a82          SBI __lcd_port-1,__lcd_D6
00009f 9a83          SBI __lcd_port-1,__lcd_D7
0000a0 e3a2      	LDI  R26,LOW(50)
0000a1 e0b0      	LDI  R27,0
0000a2 d736      	RCALL _delay_ms
0000a3 e000      	LDI  R16,LOW(0)
                 _0x5:
0000a4 300c      	CPI  R16,12
0000a5 f470      	BRSH _0x6
0000a6 e0a2      	LDI  R26,LOW(2)
0000a7 e0b0      	LDI  R27,0
0000a8 d730      	RCALL _delay_ms
0000a9 2fe0      	MOV  R30,R16
0000aa e0f0      	LDI  R31,0
0000ab 01de      	MOVW R26,R28
0000ac 9611      	ADIW R26,1
0000ad 0fae      	ADD  R26,R30
0000ae 1fbf      	ADC  R27,R31
0000af 91ac      	LD   R26,X
0000b0 d00f      	RCALL _SendDataBitsLCD
0000b1 d00b      	RCALL _PulseEn
0000b2 5f0f      	SUBI R16,-1
0000b3 cff0      	RJMP _0x5
                 _0x6:
0000b4 e0ec      	LDI  R30,LOW(12)
0000b5 93e0 0900 	STS  _cursor,R30
0000b7 91a0 0900 	LDS  R26,_cursor
0000b9 d01e      	RCALL _WriteComandLCD
0000ba 8108      	LDD  R16,Y+0
0000bb 962d      	ADIW R28,13
0000bc 9508      	RET
                 ; .FEND
                 _PulseEn:
                 ; .FSTART _PulseEn
0000bd 9a8c          SBI __lcd_port,__lcd_EN  // EN=1;
0000be 988c          CBI __lcd_port,__lcd_EN // EN=0;
0000bf 9508      	RET
                 ; .FEND
                 _SendDataBitsLCD:
                 ; .FSTART _SendDataBitsLCD
0000c0 930a      	ST   -Y,R16
0000c1 2f0a      	MOV  R16,R26
                 ;	dato -> R16
0000c2 ff03      	SBRS R16,3
0000c3 c002      	RJMP _0x7
0000c4 9a8b      	SBI __lcd_port,__lcd_D7
0000c5 c001      	RJMP _0x8
                 _0x7:
0000c6 988b      	CBI __lcd_port,__lcd_D7
                 _0x8:
0000c7 ff02      	SBRS R16,2
0000c8 c002      	RJMP _0x9
0000c9 9a8a      	SBI __lcd_port,__lcd_D6
0000ca c001      	RJMP _0xA
                 _0x9:
0000cb 988a      	CBI __lcd_port,__lcd_D6
                 _0xA:
0000cc ff01      	SBRS R16,1
0000cd c002      	RJMP _0xB
0000ce 9a89      	SBI __lcd_port,__lcd_D5
0000cf c001      	RJMP _0xC
                 _0xB:
0000d0 9889      	CBI __lcd_port,__lcd_D5
                 _0xC:
0000d1 ff00      	SBRS R16,0
0000d2 c002      	RJMP _0xD
0000d3 9a88      	SBI __lcd_port,__lcd_D4
0000d4 c001      	RJMP _0xE
                 _0xD:
0000d5 9888      	CBI __lcd_port,__lcd_D4
                 _0xE:
0000d6 940c 0327 	JMP  _0x20A0005
                 ; .FEND
                 _WriteComandLCD:
                 ; .FSTART _WriteComandLCD
0000d8 931a      	ST   -Y,R17
0000d9 930a      	ST   -Y,R16
0000da 2f1a      	MOV  R17,R26
                 ;	Comando -> R17
                 ;	tempComando -> R16
0000db 988d      	CBI __lcd_port,__lcd_RS
0000dc c004      	RJMP _0x20A0006
                 ; .FEND
                 _CharLCD:
                 ; .FSTART _CharLCD
0000dd 931a      	ST   -Y,R17
0000de 930a      	ST   -Y,R16
0000df 2f1a      	MOV  R17,R26
                 ;	dato -> R17
                 ;	tempdato -> R16
0000e0 9a8d      	SBI __lcd_port,__lcd_RS
                 _0x20A0006:
0000e1 e0a2      	LDI  R26,LOW(2)
0000e2 e0b0      	LDI  R27,0
0000e3 d6f5      	RCALL _delay_ms
0000e4 2fe1      	MOV  R30,R17
0000e5 7fe0      	ANDI R30,LOW(0xF0)
0000e6 2f0e      	MOV  R16,R30
0000e7 9502      	SWAP R16
0000e8 700f      	ANDI R16,0xF
0000e9 2fa0      	MOV  R26,R16
0000ea dfd5      	RCALL _SendDataBitsLCD
0000eb dfd1      	RCALL _PulseEn
0000ec 2fe1      	MOV  R30,R17
0000ed 70ef      	ANDI R30,LOW(0xF)
0000ee 2f0e      	MOV  R16,R30
0000ef 2fa0      	MOV  R26,R16
0000f0 dfcf      	RCALL _SendDataBitsLCD
0000f1 e0a2      	LDI  R26,LOW(2)
0000f2 e0b0      	LDI  R27,0
0000f3 d6e5      	RCALL _delay_ms
0000f4 dfc8      	RCALL _PulseEn
0000f5 9109      	LD   R16,Y+
0000f6 9119      	LD   R17,Y+
0000f7 9508      	RET
                 ; .FEND
                 ;	Mensaje -> R17,R18
                 ;	i -> R16
                 ;	Mensaje -> R19,R20
                 ;	tiempo -> R17,R18
                 ;	i -> R16
                 _StringLCDVar:
                 ; .FSTART _StringLCDVar
0000f8 d4ae      	RCALL __SAVELOCR3
                +
0000f9 2f1a     +MOV R17 , R26
0000fa 2f2b     +MOV R18 , R27
                 	__PUTW2R 17,18
                 ;	Mensaje -> R17,R18
                 ;	i -> R16
0000fb e000      	LDI  R16,LOW(0)
                 _0x16:
0000fc 2fe0      	MOV  R30,R16
0000fd 5f0f      	SUBI R16,-1
0000fe e0f0      	LDI  R31,0
0000ff 0fe1      	ADD  R30,R17
000100 1ff2      	ADC  R31,R18
000101 81a0      	LD   R26,Z
000102 dfda      	RCALL _CharLCD
                +
000103 2fa1     +MOV R26 , R17
000104 2fb2     +MOV R27 , R18
                 	__GETW2R 17,18
000105 27ee      	CLR  R30
000106 0fa0      	ADD  R26,R16
000107 1fbe      	ADC  R27,R30
000108 91ec      	LD   R30,X
000109 30e0      	CPI  R30,0
00010a f789      	BRNE _0x16
00010b d4a2      	RCALL __LOADLOCR3
00010c 940c 0333 	JMP  _0x20A0004
                 ; .FEND
                 _MoveCursor:
                 ; .FSTART _MoveCursor
00010e d421      	RCALL SUBOPT_0x0
                 ;	x -> R17
                 ;	y -> R16
00010f 2fe0      	MOV  R30,R16
000110 e0f0      	LDI  R31,0
000111 9730      	SBIW R30,0
000112 f419      	BRNE _0x1B
000113 2fa1      	MOV  R26,R17
000114 58a0      	SUBI R26,-LOW(128)
000115 c014      	RJMP _0x4D
                 _0x1B:
000116 30e1      	CPI  R30,LOW(0x1)
000117 e0a0      	LDI  R26,HIGH(0x1)
000118 07fa      	CPC  R31,R26
000119 f419      	BRNE _0x1C
00011a 2fa1      	MOV  R26,R17
00011b 54a0      	SUBI R26,-LOW(192)
00011c c00d      	RJMP _0x4D
                 _0x1C:
00011d 30e2      	CPI  R30,LOW(0x2)
00011e e0a0      	LDI  R26,HIGH(0x2)
00011f 07fa      	CPC  R31,R26
000120 f419      	BRNE _0x1D
000121 2fa1      	MOV  R26,R17
000122 56ac      	SUBI R26,-LOW(148)
000123 c006      	RJMP _0x4D
                 _0x1D:
000124 30e3      	CPI  R30,LOW(0x3)
000125 e0a0      	LDI  R26,HIGH(0x3)
000126 07fa      	CPC  R31,R26
000127 f419      	BRNE _0x1A
000128 2fa1      	MOV  R26,R17
000129 52ac      	SUBI R26,-LOW(212)
                 _0x4D:
00012a dfad      	RCALL _WriteComandLCD
                 _0x1A:
00012b 940c 0331 	JMP  _0x20A0003
                 ; .FEND
                 ;	NoCaracter -> R19
                 ;	datos -> R17,R18
                 ;	i -> R16
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;// Alarm
                 ;
                 ;unsigned char alarmFlag; // Alarm flag to turn alarm on and off
                 ;eeprom unsigned char AH, AM; // Variables for alarm on EEPROM
                 ;
                 ;unsigned char H=0,M=0,S=0; // Variables for clock
                 ;
                 ;unsigned char time[16];
                 ;
                 ;// ADC
                 ;
                 ;// ADC variables
                 ;float temperature;
                 ;int tempInt, tempDec;
                 ;// Voltage Reference: Int., cap. on AREF
                 ;#define ADC_VREF_TYPE ((1<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0035 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0036     ADMUX=adc_input | ADC_VREF_TYPE;
00012d 930a      	ST   -Y,R16
00012e 2f0a      	MOV  R16,R26
                 ;	adc_input -> R16
00012f 2fe0      	MOV  R30,R16
000130 6ce0      	ORI  R30,LOW(0xC0)
000131 93e0 007c 	STS  124,R30
                 ; 0000 0037     // Start the AD conversion
                 ; 0000 0038     ADCSRA|=(1<<ADSC);
000133 91e0 007a 	LDS  R30,122
000135 64e0      	ORI  R30,0x40
000136 93e0 007a 	STS  122,R30
                 ; 0000 0039     // Wait for the AD conversion to complete
                 ; 0000 003A     while ((ADCSRA & (1<<ADIF))==0);
                 _0x22:
000138 91e0 007a 	LDS  R30,122
00013a 71e0      	ANDI R30,LOW(0x10)
00013b f3e1      	BREQ _0x22
                 ; 0000 003B     ADCSRA|=(1<<ADIF);
00013c 91e0 007a 	LDS  R30,122
00013e 61e0      	ORI  R30,0x10
00013f 93e0 007a 	STS  122,R30
                 ; 0000 003C     return ADCW;
000141 91e0 0078 	LDS  R30,120
000143 91f0 0079 	LDS  R31,120+1
000145 940c 0327 	JMP  _0x20A0005
                 ; 0000 003D }
                 ; .FEND
                 ;
                 ;
                 ;// Update ADC function
                 ;void updateADC(){
                 ; 0000 0041 void updateADC(){
                 _updateADC:
                 ; .FSTART _updateADC
                 ; 0000 0042     // Convert ADC values to temperature
                 ; 0000 0043     temperature = (read_adc(7)*256.0)/1024.0; // Agus nos dio esta funcion
000147 e0a7      	LDI  R26,LOW(7)
000148 dfe4      	RCALL _read_adc
000149 2766      	CLR  R22
00014a 2777      	CLR  R23
00014b d557      	RCALL __CDF1
                +
00014c e0a0     +LDI R26 , LOW ( 0x43800000 )
00014d e0b0     +LDI R27 , HIGH ( 0x43800000 )
00014e e880     +LDI R24 , BYTE3 ( 0x43800000 )
00014f e493     +LDI R25 , BYTE4 ( 0x43800000 )
                 	__GETD2N 0x43800000
000150 d5d6      	RCALL __MULF12
000151 01df      	MOVW R26,R30
000152 01cb      	MOVW R24,R22
                +
000153 e0e0     +LDI R30 , LOW ( 0x44800000 )
000154 e0f0     +LDI R31 , HIGH ( 0x44800000 )
000155 e860     +LDI R22 , BYTE3 ( 0x44800000 )
000156 e474     +LDI R23 , BYTE4 ( 0x44800000 )
                 	__GETD1N 0x44800000
000157 d61d      	RCALL __DIVF21
000158 93e0 0915 	STS  _temperature,R30
00015a 93f0 0916 	STS  _temperature+1,R31
00015c 9360 0917 	STS  _temperature+2,R22
00015e 9370 0918 	STS  _temperature+3,R23
                 ; 0000 0044     tempInt = (int)temperature;
000160 d50b      	RCALL __CFD1
000161 93e0 0919 	STS  _tempInt,R30
000163 93f0 091a 	STS  _tempInt+1,R31
                 ; 0000 0045     tempDec = (int)((temperature - (float)tempInt)*10.0);
000165 d3cf      	RCALL SUBOPT_0x1
000166 d46b      	RCALL __CWD1
000167 d53b      	RCALL __CDF1
000168 91a0 0915 	LDS  R26,_temperature
00016a 91b0 0916 	LDS  R27,_temperature+1
00016c 9180 0917 	LDS  R24,_temperature+2
00016e 9190 0918 	LDS  R25,_temperature+3
000170 d49e      	RCALL __SWAPD12
000171 d564      	RCALL __SUBF12
                +
000172 e0a0     +LDI R26 , LOW ( 0x41200000 )
000173 e0b0     +LDI R27 , HIGH ( 0x41200000 )
000174 e280     +LDI R24 , BYTE3 ( 0x41200000 )
000175 e491     +LDI R25 , BYTE4 ( 0x41200000 )
                 	__GETD2N 0x41200000
000176 d5b0      	RCALL __MULF12
000177 d4f4      	RCALL __CFD1
000178 93e0 091b 	STS  _tempDec,R30
00017a 93f0 091c 	STS  _tempDec+1,R31
                 ; 0000 0046 }
00017c 9508      	RET
                 ; .FEND
                 ;
                 ;// Counter
                 ;unsigned char i=0;
                 ;
                 ;// Tone
                 ;// Play frequency function
                 ;void tono(float freq){
                 ; 0000 004D void tono(float freq){
                 _tono:
                 ; .FSTART _tono
                 ; 0000 004E     if(freq == 0)
00017d d48c      	RCALL __PUTPARD2
                 ;	freq -> Y+0
00017e d481      	RCALL __GETD1S0
00017f d4b9      	RCALL __CPD10
000180 f421      	BRNE _0x25
                 ; 0000 004F         TCCR1B=0x00;
000181 e0e0      	LDI  R30,LOW(0)
000182 93e0 0081 	STS  129,R30
                 ; 0000 0050     else{
000184 c03c      	RJMP _0x26
                 _0x25:
                 ; 0000 0051         float cuentas;
                 ; 0000 0052         unsigned int cuentasEnt;
                 ; 0000 0053 
                 ; 0000 0054         cuentas = 500000.0/freq;
000185 9726      	SBIW R28,6
                 ;	freq -> Y+6
                 ;	cuentas -> Y+2
                 ;	cuentasEnt -> Y+0
                +
000186 81ee     +LDD R30 , Y + 6
000187 81ff     +LDD R31 , Y + 6 + 1
000188 8568     +LDD R22 , Y + 6 + 2
000189 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
00018a e0a0     +LDI R26 , LOW ( 0x48F42400 )
00018b e2b4     +LDI R27 , HIGH ( 0x48F42400 )
00018c ef84     +LDI R24 , BYTE3 ( 0x48F42400 )
00018d e498     +LDI R25 , BYTE4 ( 0x48F42400 )
                 	__GETD2N 0x48F42400
00018e d5e6      	RCALL __DIVF21
                +
00018f 83ea     +STD Y + 2 , R30
000190 83fb     +STD Y + 2 + 1 , R31
000191 836c     +STD Y + 2 + 2 , R22
000192 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 0055         cuentasEnt = cuentas;
000193 01de      	MOVW R26,R28
000194 d4d5      	RCALL __CFD1U
000195 93ed      	ST   X+,R30
000196 93fc      	ST   X,R31
                 ; 0000 0056         if(cuentas-cuentasEnt>=0.5)
000197 81e8      	LD   R30,Y
000198 81f9      	LDD  R31,Y+1
                +
000199 81aa     +LDD R26 , Y + 2
00019a 81bb     +LDD R27 , Y + 2 + 1
00019b 818c     +LDD R24 , Y + 2 + 2
00019c 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
00019d 2766      	CLR  R22
00019e 2777      	CLR  R23
00019f d503      	RCALL __CDF1
0001a0 d46e      	RCALL __SWAPD12
0001a1 d534      	RCALL __SUBF12
0001a2 01df      	MOVW R26,R30
0001a3 01cb      	MOVW R24,R22
                +
0001a4 e0e0     +LDI R30 , LOW ( 0x3F000000 )
0001a5 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
0001a6 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
0001a7 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
0001a8 d610      	RCALL __CMPF12
0001a9 f028      	BRLO _0x27
                 ; 0000 0057             cuentasEnt++;
0001aa 81e8      	LD   R30,Y
0001ab 81f9      	LDD  R31,Y+1
0001ac 9631      	ADIW R30,1
0001ad 83e8      	ST   Y,R30
0001ae 83f9      	STD  Y+1,R31
                 ; 0000 0058         OCR1AH=(cuentasEnt-1)/256;
                 _0x27:
0001af 81e8      	LD   R30,Y
0001b0 81f9      	LDD  R31,Y+1
0001b1 9731      	SBIW R30,1
0001b2 2fef      	MOV  R30,R31
0001b3 e0f0      	LDI  R31,0
0001b4 93e0 0089 	STS  137,R30
                 ; 0000 0059         OCR1AL=(cuentasEnt-1)%256;
0001b6 81e8      	LD   R30,Y
0001b7 50e1      	SUBI R30,LOW(1)
0001b8 93e0 0088 	STS  136,R30
                 ; 0000 005A         TCCR1A=0x40;    // Timer 1 en modo de CTC
0001ba e4e0      	LDI  R30,LOW(64)
0001bb 93e0 0080 	STS  128,R30
                 ; 0000 005B         TCCR1B=0x09;    // Timer en CK (sin pre-escalador)
0001bd e0e9      	LDI  R30,LOW(9)
0001be 93e0 0081 	STS  129,R30
                 ; 0000 005C     }
0001c0 9626      	ADIW R28,6
                 _0x26:
                 ; 0000 005D }
0001c1 9624      	ADIW R28,4
0001c2 9508      	RET
                 ; .FEND
                 ;
                 ;int k=0;
                 ;char kFlag=0;
                 ;
                 ;// Play tone or song function
                 ;void playTone(){
                 ; 0000 0063 void playTone(){
                 _playTone:
                 ; .FSTART _playTone
                 ; 0000 0064     tono(k);
0001c3 d376      	RCALL SUBOPT_0x2
0001c4 d40d      	RCALL __CWD1
0001c5 d4dd      	RCALL __CDF1
0001c6 01df      	MOVW R26,R30
0001c7 01cb      	MOVW R24,R22
0001c8 dfb4      	RCALL _tono
                 ; 0000 0065     if(kFlag==0)
0001c9 91e0 0920 	LDS  R30,_kFlag
0001cb 30e0      	CPI  R30,0
0001cc f419      	BRNE _0x28
                 ; 0000 0066         k+=50;
0001cd d36c      	RCALL SUBOPT_0x2
0001ce 96f2      	ADIW R30,50
0001cf c002      	RJMP _0x4E
                 ; 0000 0067     else
                 _0x28:
                 ; 0000 0068         k-=50;
0001d0 d369      	RCALL SUBOPT_0x2
0001d1 97f2      	SBIW R30,50
                 _0x4E:
0001d2 93e0 091e 	STS  _k,R30
0001d4 93f0 091f 	STS  _k+1,R31
                 ; 0000 0069     if(k>500)
0001d6 d368      	RCALL SUBOPT_0x3
0001d7 3fa5      	CPI  R26,LOW(0x1F5)
0001d8 e0e1      	LDI  R30,HIGH(0x1F5)
0001d9 07be      	CPC  R27,R30
0001da f014      	BRLT _0x2A
                 ; 0000 006A         kFlag=1;
0001db e0e1      	LDI  R30,LOW(1)
0001dc c004      	RJMP _0x4F
                 ; 0000 006B     else if (k<=50)
                 _0x2A:
0001dd d361      	RCALL SUBOPT_0x3
0001de 97d3      	SBIW R26,51
0001df f41c      	BRGE _0x2C
                 ; 0000 006C         kFlag=0;
0001e0 e0e0      	LDI  R30,LOW(0)
                 _0x4F:
0001e1 93e0 0920 	STS  _kFlag,R30
                 ; 0000 006D }
                 _0x2C:
0001e3 9508      	RET
                 ; .FEND
                 ;
                 ;// LCD
                 ;void printTime(){
                 ; 0000 0070 void printTime(){
                 _printTime:
                 ; .FSTART _printTime
                 ; 0000 0071     sprintf(time, "%02i:%02i:%02i  %02i.%i%cC", H, M, S, tempInt, tempDec, 223);
0001e4 d35f      	RCALL SUBOPT_0x4
                +
0001e5 ebe6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001e6 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001e7 93fa      	ST   -Y,R31
0001e8 93ea      	ST   -Y,R30
0001e9 91e0 0902 	LDS  R30,_H
0001eb d35d      	RCALL SUBOPT_0x5
0001ec 91e0 0903 	LDS  R30,_M
0001ee d35a      	RCALL SUBOPT_0x5
0001ef 91e0 0904 	LDS  R30,_S
0001f1 d357      	RCALL SUBOPT_0x5
0001f2 d342      	RCALL SUBOPT_0x1
0001f3 d3de      	RCALL __CWD1
0001f4 d410      	RCALL __PUTPARD1
0001f5 91e0 091b 	LDS  R30,_tempDec
0001f7 91f0 091c 	LDS  R31,_tempDec+1
0001f9 d3d8      	RCALL __CWD1
0001fa d40a      	RCALL __PUTPARD1
                +
0001fb edef     +LDI R30 , LOW ( 0xDF )
0001fc e0f0     +LDI R31 , HIGH ( 0xDF )
0001fd e060     +LDI R22 , BYTE3 ( 0xDF )
0001fe e070     +LDI R23 , BYTE4 ( 0xDF )
                 	__GETD1N 0xDF
0001ff d405      	RCALL __PUTPARD1
000200 e188      	LDI  R24,24
000201 d2cd      	RCALL _sprintf
000202 966c      	ADIW R28,28
                 ; 0000 0072     MoveCursor(0,0);
000203 e0e0      	LDI  R30,LOW(0)
000204 93ea      	ST   -Y,R30
000205 e0a0      	LDI  R26,LOW(0)
000206 d347      	RCALL SUBOPT_0x6
                 ; 0000 0073     StringLCDVar(time);
                 ; 0000 0074     sprintf(time, "  Alarma %02i:%02i   ", AH, AM);
000207 d33c      	RCALL SUBOPT_0x4
                +
000208 ede1     +LDI R30 , LOW ( 2 * _0x0 + ( 27 ) )
000209 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 27 ) )
                 	__POINTW1FN _0x0,27
00020a 93fa      	ST   -Y,R31
00020b 93ea      	ST   -Y,R30
00020c e0a0      	LDI  R26,LOW(_AH)
00020d e0b0      	LDI  R27,HIGH(_AH)
00020e d40d      	RCALL __EEPROMRDB
00020f d339      	RCALL SUBOPT_0x5
000210 e0a1      	LDI  R26,LOW(_AM)
000211 e0b0      	LDI  R27,HIGH(_AM)
000212 d409      	RCALL __EEPROMRDB
000213 d335      	RCALL SUBOPT_0x5
000214 e088      	LDI  R24,8
000215 d2b9      	RCALL _sprintf
000216 962c      	ADIW R28,12
                 ; 0000 0075     MoveCursor(0,1);
000217 e0e0      	LDI  R30,LOW(0)
000218 93ea      	ST   -Y,R30
000219 e0a1      	LDI  R26,LOW(1)
00021a d333      	RCALL SUBOPT_0x6
                 ; 0000 0076     StringLCDVar(time);
                 ; 0000 0077 }
00021b 9508      	RET
                 ; .FEND
                 ;
                 ;// Clock
                 ;void updateClock(){
                 ; 0000 007A void updateClock(){
                 _updateClock:
                 ; .FSTART _updateClock
                 ; 0000 007B     rtc_get_time(&H, &M, &S);
00021c d335      	RCALL SUBOPT_0x7
                 ; 0000 007C }
00021d 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 007F {
                 _main:
                 ; .FSTART _main
                 ; 0000 0080 
                 ; 0000 0081 // ADC
                 ; 0000 0082 
                 ; 0000 0083 // ADC initialization
                 ; 0000 0084 // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0085 // ADC Voltage Reference: Int., cap. on AREF
                 ; 0000 0086 // ADC High Speed Mode: On
                 ; 0000 0087 // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 0088 // ADC4: On, ADC5: On, ADC6: On, ADC7: Off
                 ; 0000 0089 DIDR0=(1<<ADC7D) | (0<<ADC6D) | (0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
00021e e8e0      	LDI  R30,LOW(128)
00021f 93e0 007e 	STS  126,R30
                 ; 0000 008A ADMUX=ADC_VREF_TYPE;
000221 ece0      	LDI  R30,LOW(192)
000222 93e0 007c 	STS  124,R30
                 ; 0000 008B ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
000224 e8e3      	LDI  R30,LOW(131)
000225 93e0 007a 	STS  122,R30
                 ; 0000 008C ADCSRB=(1<<ADHSM);
000227 e8e0      	LDI  R30,LOW(128)
000228 93e0 007b 	STS  123,R30
                 ; 0000 008D 
                 ; 0000 008E // LCD
                 ; 0000 008F 
                 ; 0000 0090 SetupLCD();
00022a de67      	RCALL _SetupLCD
                 ; 0000 0091 
                 ; 0000 0092 // DS1302
                 ; 0000 0093 rtc_init(0,0,0);
00022b e0e0      	LDI  R30,LOW(0)
00022c 93ea      	ST   -Y,R30
00022d 93ea      	ST   -Y,R30
00022e e0a0      	LDI  R26,LOW(0)
00022f d105      	RCALL _rtc_init
                 ; 0000 0094 
                 ; 0000 0095 // Tone
                 ; 0000 0096 DDRB.5=1;
000230 9a25      	SBI  0x4,5
                 ; 0000 0097 
                 ; 0000 0098 // First actions
                 ; 0000 0099 PORTC = 0x0F;
000231 e0ef      	LDI  R30,LOW(15)
000232 b9e8      	OUT  0x8,R30
                 ; 0000 009A rtc_get_time(&H, &M, &S);
000233 d31e      	RCALL SUBOPT_0x7
                 ; 0000 009B printTime();
000234 dfaf      	RCALL _printTime
                 ; 0000 009C 
                 ; 0000 009D while (1){
                 _0x2F:
                 ; 0000 009E     // Please write your application code here
                 ; 0000 009F 
                 ; 0000 00A0         // Counter
                 ; 0000 00A1         i++;
000235 91e0 091d 	LDS  R30,_i
000237 5fef      	SUBI R30,-LOW(1)
000238 93e0 091d 	STS  _i,R30
                 ; 0000 00A2 
                 ; 0000 00A3         // ADC
                 ; 0000 00A4         updateADC();
00023a df0c      	RCALL _updateADC
                 ; 0000 00A5 
                 ; 0000 00A6         // Update clock
                 ; 0000 00A7         updateClock();
00023b dfe0      	RCALL _updateClock
                 ; 0000 00A8         // Print values un LCD display
                 ; 0000 00A9         printTime();
00023c dfa7      	RCALL _printTime
                 ; 0000 00AA 
                 ; 0000 00AB         // Play alarm
                 ; 0000 00AC         if(alarmFlag==1) {
00023d 91a0 0901 	LDS  R26,_alarmFlag
00023f 30a1      	CPI  R26,LOW(0x1)
000240 f411      	BRNE _0x32
                 ; 0000 00AD             playTone();
000241 df81      	RCALL _playTone
                 ; 0000 00AE         }
                 ; 0000 00AF         else
000242 c005      	RJMP _0x33
                 _0x32:
                 ; 0000 00B0             tono(0);
                +
000243 e0a0     +LDI R26 , LOW ( 0x0 )
000244 e0b0     +LDI R27 , HIGH ( 0x0 )
000245 e080     +LDI R24 , BYTE3 ( 0x0 )
000246 e090     +LDI R25 , BYTE4 ( 0x0 )
                 	__GETD2N 0x0
000247 df35      	RCALL _tono
                 ; 0000 00B1 
                 ; 0000 00B2         // 500 ms delay, reset counter
                 ; 0000 00B3         if(i%10==0)
                 _0x33:
000248 91a0 091d 	LDS  R26,_i
00024a 27bb      	CLR  R27
00024b e0ea      	LDI  R30,LOW(10)
00024c e0f0      	LDI  R31,HIGH(10)
00024d d39c      	RCALL __MODW21
00024e 9730      	SBIW R30,0
00024f f419      	BRNE _0x34
                 ; 0000 00B4             i=0;
000250 e0e0      	LDI  R30,LOW(0)
000251 93e0 091d 	STS  _i,R30
                 ; 0000 00B5         // Turns alarm flag on when H, M and S match
                 ; 0000 00B6         if(S==0 && M==AM && H==AH)
                 _0x34:
000253 91a0 0904 	LDS  R26,_S
000255 30a0      	CPI  R26,LOW(0x0)
000256 f449      	BRNE _0x36
000257 e0a1      	LDI  R26,LOW(_AM)
000258 e0b0      	LDI  R27,HIGH(_AM)
000259 d3c2      	RCALL __EEPROMRDB
00025a 91a0 0903 	LDS  R26,_M
00025c 17ea      	CP   R30,R26
00025d f411      	BRNE _0x36
00025e d2fe      	RCALL SUBOPT_0x8
00025f f009      	BREQ _0x37
                 _0x36:
000260 c003      	RJMP _0x35
                 _0x37:
                 ; 0000 00B7             alarmFlag=1;
000261 e0e1      	LDI  R30,LOW(1)
000262 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00B8         if(S==0 && M==AM+1 && H==AH && alarmFlag==1)
                 _0x35:
000264 91a0 0904 	LDS  R26,_S
000266 30a0      	CPI  R26,LOW(0x0)
000267 f489      	BRNE _0x39
000268 e0a1      	LDI  R26,LOW(_AM)
000269 e0b0      	LDI  R27,HIGH(_AM)
00026a d3b1      	RCALL __EEPROMRDB
00026b e0f0      	LDI  R31,0
00026c 9631      	ADIW R30,1
00026d 91a0 0903 	LDS  R26,_M
00026f e0b0      	LDI  R27,0
000270 17ea      	CP   R30,R26
000271 07fb      	CPC  R31,R27
000272 f431      	BRNE _0x39
000273 d2e9      	RCALL SUBOPT_0x8
000274 f421      	BRNE _0x39
000275 91a0 0901 	LDS  R26,_alarmFlag
000277 30a1      	CPI  R26,LOW(0x1)
000278 f009      	BREQ _0x3A
                 _0x39:
000279 c003      	RJMP _0x38
                 _0x3A:
                 ; 0000 00B9             alarmFlag=0;
00027a e0e0      	LDI  R30,LOW(0)
00027b 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00BA 
                 ; 0000 00BB         // Clock
                 ; 0000 00BC 
                 ; 0000 00BD         // If alarm is on, switch will turn alarm off without
                 ; 0000 00BE         //  changing the default variable
                 ; 0000 00BF         if(!PINC.0){
                 _0x38:
00027d 9930      	SBIC 0x6,0
00027e c00c      	RJMP _0x3B
                 ; 0000 00C0             if(alarmFlag==1)
00027f 91a0 0901 	LDS  R26,_alarmFlag
000281 30a1      	CPI  R26,LOW(0x1)
000282 f421      	BRNE _0x3C
                 ; 0000 00C1                 alarmFlag = 0;
000283 e0e0      	LDI  R30,LOW(0)
000284 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00C2             else{
000286 c004      	RJMP _0x3D
                 _0x3C:
                 ; 0000 00C3                 H++;
000287 91e0 0902 	LDS  R30,_H
000289 5fef      	SUBI R30,-LOW(1)
00028a d2d9      	RCALL SUBOPT_0x9
                 ; 0000 00C4                 rtc_set_time(H, M, S);
                 ; 0000 00C5             }
                 _0x3D:
                 ; 0000 00C6         }
                 ; 0000 00C7         // If alarm is on, switch will turn alarm off without
                 ; 0000 00C8         //  changing the default variable
                 ; 0000 00C9         if(!PINC.1){
                 _0x3B:
00028b 9931      	SBIC 0x6,1
00028c c00c      	RJMP _0x3E
                 ; 0000 00CA             if(alarmFlag==1)
00028d 91a0 0901 	LDS  R26,_alarmFlag
00028f 30a1      	CPI  R26,LOW(0x1)
000290 f421      	BRNE _0x3F
                 ; 0000 00CB                 alarmFlag = 0;
000291 e0e0      	LDI  R30,LOW(0)
000292 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00CC             else{
000294 c004      	RJMP _0x40
                 _0x3F:
                 ; 0000 00CD                 M++;
000295 91e0 0903 	LDS  R30,_M
000297 5fef      	SUBI R30,-LOW(1)
000298 d2d4      	RCALL SUBOPT_0xA
                 ; 0000 00CE                 rtc_set_time(H, M, S);
                 ; 0000 00CF             }
                 _0x40:
                 ; 0000 00D0         }
                 ; 0000 00D1         // Verify the correct range on clock time
                 ; 0000 00D2         if(S>59){
                 _0x3E:
000299 91a0 0904 	LDS  R26,_S
00029b 33ac      	CPI  R26,LOW(0x3C)
00029c f060      	BRLO _0x41
                 ; 0000 00D3             S=0;
00029d e0e0      	LDI  R30,LOW(0)
00029e 93e0 0904 	STS  _S,R30
                 ; 0000 00D4             rtc_set_time(H, M, S);
0002a0 91e0 0902 	LDS  R30,_H
0002a2 93ea      	ST   -Y,R30
0002a3 91e0 0903 	LDS  R30,_M
0002a5 93ea      	ST   -Y,R30
0002a6 91a0 0904 	LDS  R26,_S
0002a8 d0ba      	RCALL _rtc_set_time
                 ; 0000 00D5         }
                 ; 0000 00D6         if(M>59){
                 _0x41:
0002a9 91a0 0903 	LDS  R26,_M
0002ab 33ac      	CPI  R26,LOW(0x3C)
0002ac f010      	BRLO _0x42
                 ; 0000 00D7             M=0;
0002ad e0e0      	LDI  R30,LOW(0)
0002ae d2be      	RCALL SUBOPT_0xA
                 ; 0000 00D8             rtc_set_time(H, M, S);
                 ; 0000 00D9         }
                 ; 0000 00DA         if(H>23){
                 _0x42:
0002af 91a0 0902 	LDS  R26,_H
0002b1 31a8      	CPI  R26,LOW(0x18)
0002b2 f010      	BRLO _0x43
                 ; 0000 00DB             H=0;
0002b3 e0e0      	LDI  R30,LOW(0)
0002b4 d2af      	RCALL SUBOPT_0x9
                 ; 0000 00DC             rtc_set_time(H, M, S);
                 ; 0000 00DD         }
                 ; 0000 00DE 
                 ; 0000 00DF         // Alarm
                 ; 0000 00E0 
                 ; 0000 00E1         // If alarm is on, switch will turn alarm off without
                 ; 0000 00E2         //  changing the default variable
                 ; 0000 00E3         if(!PINC.2){
                 _0x43:
0002b5 9932      	SBIC 0x6,2
0002b6 c00d      	RJMP _0x44
                 ; 0000 00E4             if(alarmFlag==1)
0002b7 91a0 0901 	LDS  R26,_alarmFlag
0002b9 30a1      	CPI  R26,LOW(0x1)
0002ba f421      	BRNE _0x45
                 ; 0000 00E5                 alarmFlag = 0;
0002bb e0e0      	LDI  R30,LOW(0)
0002bc 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00E6             else
0002be c005      	RJMP _0x46
                 _0x45:
                 ; 0000 00E7                 AH++;
0002bf e0a0      	LDI  R26,LOW(_AH)
0002c0 e0b0      	LDI  R27,HIGH(_AH)
0002c1 d35a      	RCALL __EEPROMRDB
0002c2 5fef      	SUBI R30,-LOW(1)
0002c3 d364      	RCALL __EEPROMWRB
                 ; 0000 00E8         }
                 _0x46:
                 ; 0000 00E9         // If alarm is on, switch will turn alarm off without
                 ; 0000 00EA         //  changing the default variable
                 ; 0000 00EB         if(!PINC.3){
                 _0x44:
0002c4 9933      	SBIC 0x6,3
0002c5 c00d      	RJMP _0x47
                 ; 0000 00EC             if(alarmFlag==1)
0002c6 91a0 0901 	LDS  R26,_alarmFlag
0002c8 30a1      	CPI  R26,LOW(0x1)
0002c9 f421      	BRNE _0x48
                 ; 0000 00ED                 alarmFlag = 0;
0002ca e0e0      	LDI  R30,LOW(0)
0002cb 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00EE             else
0002cd c005      	RJMP _0x49
                 _0x48:
                 ; 0000 00EF                 AM++;
0002ce e0a1      	LDI  R26,LOW(_AM)
0002cf e0b0      	LDI  R27,HIGH(_AM)
0002d0 d34b      	RCALL __EEPROMRDB
0002d1 5fef      	SUBI R30,-LOW(1)
0002d2 d355      	RCALL __EEPROMWRB
                 ; 0000 00F0         }
                 _0x49:
                 ; 0000 00F1         // Verify the correct range on alarm time
                 ; 0000 00F2         if(AM>59)
                 _0x47:
0002d3 e0a1      	LDI  R26,LOW(_AM)
0002d4 e0b0      	LDI  R27,HIGH(_AM)
0002d5 d346      	RCALL __EEPROMRDB
0002d6 33ec      	CPI  R30,LOW(0x3C)
0002d7 f020      	BRLO _0x4A
                 ; 0000 00F3             AM=0;
0002d8 e0a1      	LDI  R26,LOW(_AM)
0002d9 e0b0      	LDI  R27,HIGH(_AM)
0002da e0e0      	LDI  R30,LOW(0)
0002db d34c      	RCALL __EEPROMWRB
                 ; 0000 00F4         if(AH>23)
                 _0x4A:
0002dc e0a0      	LDI  R26,LOW(_AH)
0002dd e0b0      	LDI  R27,HIGH(_AH)
0002de d33d      	RCALL __EEPROMRDB
0002df 31e8      	CPI  R30,LOW(0x18)
0002e0 f020      	BRLO _0x4B
                 ; 0000 00F5             AH=0;
0002e1 e0a0      	LDI  R26,LOW(_AH)
0002e2 e0b0      	LDI  R27,HIGH(_AH)
0002e3 e0e0      	LDI  R30,LOW(0)
0002e4 d343      	RCALL __EEPROMWRB
                 ; 0000 00F6     }
                 _0x4B:
0002e5 cf4f      	RJMP _0x2F
                 ; 0000 00F7 }
                 _0x4C:
0002e6 cfff      	RJMP _0x4C
                 ; .FEND
                 
                 	.CSEG
                 _ds1302_rst0_G100:
                 ; .FSTART _ds1302_rst0_G100
0002e7 9858      	cbi  __ds1302_port,__ds1302_rst
                +
0002e8 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0002e9 958a     +DEC R24
0002ea f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0002eb 9508      	RET
                 ; .FEND
                 _ds1302_write0_G100:
                 ; .FSTART _ds1302_write0_G100
0002ec 930a      	ST   -Y,R16
0002ed 2f0a      	MOV  R16,R26
0002ee 9a51          sbi  __ds1302_port-1,__ds1302_sclk
0002ef 9a52          sbi  __ds1302_port-1,__ds1302_io
0002f0 9a50          sbi  __ds1302_port-1,__ds1302_rst
0002f1 9a58          sbi  __ds1302_port,__ds1302_rst
                +
0002f2 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0002f3 958a     +DEC R24
0002f4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0002f5 2fa0      	MOV  R26,R16
0002f6 d002      	RCALL _ds1302_write1_G100
0002f7 940c 0327 	JMP  _0x20A0005
                 ; .FEND
                 _ds1302_write1_G100:
                 ; .FSTART _ds1302_write1_G100
0002f9 93aa      	ST   -Y,R26
0002fa 91e9          ld   r30,y+
0002fb e0a8          ldi  r26,8
                 ds1302_write2:
0002fc 95e7          ror  r30
0002fd 985a          cbi  __ds1302_port,__ds1302_io
0002fe f408          brcc ds1302_write3
0002ff 9a5a          sbi  __ds1302_port,__ds1302_io
                 ds1302_write3:
000300 0000          nop
000301 0000          nop
000302 0000          nop
000303 0000          nop
000304 9a59          sbi  __ds1302_port,__ds1302_sclk
                +
000305 e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
000306 958a     +DEC R24
000307 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
000308 9859      	cbi  __ds1302_port,__ds1302_sclk
                +
000309 e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
00030a 958a     +DEC R24
00030b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
00030c 95aa          dec  r26
00030d f771          brne ds1302_write2
00030e 9508          ret
                 ; .FEND
                 _ds1302_read:
                 ; .FSTART _ds1302_read
00030f 930a      	ST   -Y,R16
000310 2f0a      	MOV  R16,R26
000311 2fe0      	MOV  R30,R16
000312 60e1      	ORI  R30,1
000313 2fae      	MOV  R26,R30
000314 dfd7      	RCALL _ds1302_write0_G100
000315 985a          cbi  __ds1302_port,__ds1302_io
000316 9852          cbi  __ds1302_port-1,__ds1302_io
000317 e0a8          ldi  r26,8
                 ds1302_read0:
000318 9488          clc
000319 994a      	sbic __ds1302_port-2,__ds1302_io
00031a 9408          sec
00031b 95e7          ror  r30
00031c 9a59          sbi  __ds1302_port,__ds1302_sclk
                +
00031d e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
00031e 958a     +DEC R24
00031f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
000320 9859      	cbi  __ds1302_port,__ds1302_sclk
                +
000321 e08b     +LDI R24 , LOW ( 11 )
                +__DELAY_USB_LOOP :
000322 958a     +DEC R24
000323 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 11
000324 95aa          dec  r26
000325 f791          brne ds1302_read0
000326 dfc0      	RCALL _ds1302_rst0_G100
                 _0x20A0005:
000327 9109      	LD   R16,Y+
000328 9508      	RET
                 ; .FEND
                 _ds1302_write:
                 ; .FSTART _ds1302_write
000329 d206      	RCALL SUBOPT_0x0
00032a 2fe1      	MOV  R30,R17
00032b 7fee      	ANDI R30,0xFE
00032c 2fae      	MOV  R26,R30
00032d dfbe      	RCALL _ds1302_write0_G100
00032e 2fa0      	MOV  R26,R16
00032f dfc9      	RCALL _ds1302_write1_G100
000330 dfb6      	RCALL _ds1302_rst0_G100
                 _0x20A0003:
000331 8119      	LDD  R17,Y+1
000332 8108      	LDD  R16,Y+0
                 _0x20A0004:
000333 9623      	ADIW R28,3
000334 9508      	RET
                 ; .FEND
                 _rtc_init:
                 ; .FSTART _rtc_init
000335 d242      	RCALL SUBOPT_0xB
000336 7003      	ANDI R16,LOW(3)
000337 3020      	CPI  R18,0
000338 f009      	BREQ _0x2000003
000339 6a00      	ORI  R16,LOW(160)
                 _0x2000003:
00033a 3011      	CPI  R17,1
00033b f411      	BRNE _0x2000004
00033c 6004      	ORI  R16,LOW(4)
00033d c005      	RJMP _0x2000005
                 _0x2000004:
00033e 3012      	CPI  R17,2
00033f f411      	BRNE _0x2000006
000340 6008      	ORI  R16,LOW(8)
000341 c001      	RJMP _0x2000007
                 _0x2000006:
000342 e000      	LDI  R16,LOW(0)
                 _0x2000007:
                 _0x2000005:
000343 d239      	RCALL SUBOPT_0xC
000344 e9e0      	LDI  R30,LOW(144)
000345 93ea      	ST   -Y,R30
000346 2fa0      	MOV  R26,R16
000347 c02e      	RJMP _0x20A0002
                 ; .FEND
                 _rtc_get_time:
                 ; .FSTART _rtc_get_time
000348 d25b      	RCALL __SAVELOCR6
000349 018d      	MOVW R16,R26
                +
00034a 812e     +LDD R18 , Y + 6
00034b 813f     +LDD R19 , Y + 6 + 1
                 	__GETWRS 18,19,6
                +
00034c 8548     +LDD R20 , Y + 8
00034d 8559     +LDD R21 , Y + 8 + 1
                 	__GETWRS 20,21,8
00034e e8a5      	LDI  R26,LOW(133)
00034f dfbf      	RCALL _ds1302_read
000350 2fae      	MOV  R26,R30
000351 d1ae      	RCALL _bcd2bin
000352 01da      	MOVW R26,R20
000353 93ec      	ST   X,R30
000354 e8a3      	LDI  R26,LOW(131)
000355 dfb9      	RCALL _ds1302_read
000356 2fae      	MOV  R26,R30
000357 d1a8      	RCALL _bcd2bin
000358 01d9      	MOVW R26,R18
000359 93ec      	ST   X,R30
00035a e8a1      	LDI  R26,LOW(129)
00035b dfb3      	RCALL _ds1302_read
00035c 2fae      	MOV  R26,R30
00035d d1a2      	RCALL _bcd2bin
00035e 01d8      	MOVW R26,R16
00035f 93ec      	ST   X,R30
000360 d24a      	RCALL __LOADLOCR6
000361 962a      	ADIW R28,10
000362 9508      	RET
                 ; .FEND
                 _rtc_set_time:
                 ; .FSTART _rtc_set_time
000363 d214      	RCALL SUBOPT_0xB
000364 d218      	RCALL SUBOPT_0xC
000365 e8e4      	LDI  R30,LOW(132)
000366 93ea      	ST   -Y,R30
000367 2fa2      	MOV  R26,R18
000368 d1a4      	RCALL _bin2bcd
000369 2fae      	MOV  R26,R30
00036a dfbe      	RCALL _ds1302_write
00036b e8e2      	LDI  R30,LOW(130)
00036c 93ea      	ST   -Y,R30
00036d 2fa1      	MOV  R26,R17
00036e d19e      	RCALL _bin2bcd
00036f 2fae      	MOV  R26,R30
000370 dfb8      	RCALL _ds1302_write
000371 e8e0      	LDI  R30,LOW(128)
000372 93ea      	ST   -Y,R30
000373 2fa0      	MOV  R26,R16
000374 d198      	RCALL _bin2bcd
000375 2fae      	MOV  R26,R30
                 _0x20A0002:
000376 dfb2      	RCALL _ds1302_write
000377 e8ee      	LDI  R30,LOW(142)
000378 93ea      	ST   -Y,R30
000379 e8a0      	LDI  R26,LOW(128)
00037a dfae      	RCALL _ds1302_write
00037b d232      	RCALL __LOADLOCR3
00037c 9625      	ADIW R28,5
00037d 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
00037e d226      	RCALL __SAVELOCR5
00037f 019d      	MOVW R18,R26
000380 814d      	LDD  R20,Y+5
000381 9612      	ADIW R26,2
000382 d275      	RCALL __GETW1P
000383 9730      	SBIW R30,0
000384 f0e1      	BREQ _0x2020016
000385 01d9      	MOVW R26,R18
000386 9614      	ADIW R26,4
000387 d270      	RCALL __GETW1P
000388 018f      	MOVW R16,R30
000389 9730      	SBIW R30,0
00038a f059      	BREQ _0x2020018
                +
00038b 3002     +CPI R16 , LOW ( 2 )
00038c e0e0     +LDI R30 , HIGH ( 2 )
00038d 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00038e f060      	BRLO _0x2020019
00038f 01f8      	MOVW R30,R16
000390 9731      	SBIW R30,1
000391 018f      	MOVW R16,R30
                +
000392 01d9     +MOVW R26 , R18
000393 9614     +ADIW R26 , 4
000394 93ed     +ST X + , R30
000395 93fc     +ST X , R31
                 	__PUTW1RNS 18,4
                 _0x2020018:
000396 01d9      	MOVW R26,R18
000397 9612      	ADIW R26,2
000398 d1e8      	RCALL SUBOPT_0xD
000399 9731      	SBIW R30,1
00039a 8340      	ST   Z,R20
                 _0x2020019:
00039b 01d9      	MOVW R26,R18
00039c d25b      	RCALL __GETW1P
00039d 23ff      	TST  R31
00039e f00a      	BRMI _0x202001A
00039f d1e1      	RCALL SUBOPT_0xD
                 _0x202001A:
0003a0 c005      	RJMP _0x202001B
                 _0x2020016:
0003a1 01d9      	MOVW R26,R18
0003a2 efef      	LDI  R30,LOW(65535)
0003a3 efff      	LDI  R31,HIGH(65535)
0003a4 93ed      	ST   X+,R30
0003a5 93fc      	ST   X,R31
                 _0x202001B:
0003a6 d205      	RCALL __LOADLOCR5
0003a7 9626      	ADIW R28,6
0003a8 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0003a9 93ba      	ST   -Y,R27
0003aa 93aa      	ST   -Y,R26
0003ab 9726      	SBIW R28,6
0003ac d1f7      	RCALL __SAVELOCR6
0003ad e000      	LDI  R16,0
0003ae 85ac      	LDD  R26,Y+12
0003af 85bd      	LDD  R27,Y+12+1
0003b0 e0e0      	LDI  R30,LOW(0)
0003b1 e0f0      	LDI  R31,HIGH(0)
0003b2 93ed      	ST   X+,R30
0003b3 93fc      	ST   X,R31
                 _0x202001C:
0003b4 89ea      	LDD  R30,Y+18
0003b5 89fb      	LDD  R31,Y+18+1
0003b6 9631      	ADIW R30,1
0003b7 8bea      	STD  Y+18,R30
0003b8 8bfb      	STD  Y+18+1,R31
0003b9 9731      	SBIW R30,1
0003ba 91e4      	LPM  R30,Z
0003bb 2f3e      	MOV  R19,R30
0003bc 30e0      	CPI  R30,0
0003bd f409      	BRNE PC+2
0003be c109      	RJMP _0x202001E
0003bf 2fe0      	MOV  R30,R16
0003c0 30e0      	CPI  R30,0
0003c1 f431      	BRNE _0x2020022
0003c2 3235      	CPI  R19,37
0003c3 f411      	BRNE _0x2020023
0003c4 e001      	LDI  R16,LOW(1)
0003c5 c001      	RJMP _0x2020024
                 _0x2020023:
0003c6 d1c0      	RCALL SUBOPT_0xE
                 _0x2020024:
0003c7 c0ff      	RJMP _0x2020021
                 _0x2020022:
0003c8 30e1      	CPI  R30,LOW(0x1)
0003c9 f4a1      	BRNE _0x2020025
0003ca 3235      	CPI  R19,37
0003cb f411      	BRNE _0x2020026
0003cc d1ba      	RCALL SUBOPT_0xE
0003cd c0f8      	RJMP _0x20200D2
                 _0x2020026:
0003ce e002      	LDI  R16,LOW(2)
0003cf e050      	LDI  R21,LOW(0)
0003d0 e010      	LDI  R17,LOW(0)
0003d1 323d      	CPI  R19,45
0003d2 f411      	BRNE _0x2020027
0003d3 e011      	LDI  R17,LOW(1)
0003d4 c0f2      	RJMP _0x2020021
                 _0x2020027:
0003d5 323b      	CPI  R19,43
0003d6 f411      	BRNE _0x2020028
0003d7 e25b      	LDI  R21,LOW(43)
0003d8 c0ee      	RJMP _0x2020021
                 _0x2020028:
0003d9 3230      	CPI  R19,32
0003da f411      	BRNE _0x2020029
0003db e250      	LDI  R21,LOW(32)
0003dc c0ea      	RJMP _0x2020021
                 _0x2020029:
0003dd c002      	RJMP _0x202002A
                 _0x2020025:
0003de 30e2      	CPI  R30,LOW(0x2)
0003df f439      	BRNE _0x202002B
                 _0x202002A:
0003e0 e040      	LDI  R20,LOW(0)
0003e1 e003      	LDI  R16,LOW(3)
0003e2 3330      	CPI  R19,48
0003e3 f411      	BRNE _0x202002C
0003e4 6810      	ORI  R17,LOW(128)
0003e5 c0e1      	RJMP _0x2020021
                 _0x202002C:
0003e6 c003      	RJMP _0x202002D
                 _0x202002B:
0003e7 30e3      	CPI  R30,LOW(0x3)
0003e8 f009      	BREQ PC+2
0003e9 c0dd      	RJMP _0x2020021
                 _0x202002D:
0003ea 3330      	CPI  R19,48
0003eb f010      	BRLO _0x2020030
0003ec 333a      	CPI  R19,58
0003ed f008      	BRLO _0x2020031
                 _0x2020030:
0003ee c007      	RJMP _0x202002F
                 _0x2020031:
0003ef e0aa      	LDI  R26,LOW(10)
0003f0 9f4a      	MUL  R20,R26
0003f1 2d40      	MOV  R20,R0
0003f2 2fe3      	MOV  R30,R19
0003f3 53e0      	SUBI R30,LOW(48)
0003f4 0f4e      	ADD  R20,R30
0003f5 c0d1      	RJMP _0x2020021
                 _0x202002F:
0003f6 2fe3      	MOV  R30,R19
0003f7 36e3      	CPI  R30,LOW(0x63)
0003f8 f439      	BRNE _0x2020035
0003f9 d194      	RCALL SUBOPT_0xF
0003fa 89e8      	LDD  R30,Y+16
0003fb 89f9      	LDD  R31,Y+16+1
0003fc 81a4      	LDD  R26,Z+4
0003fd 93aa      	ST   -Y,R26
0003fe d195      	RCALL SUBOPT_0x10
0003ff c0c6      	RJMP _0x2020036
                 _0x2020035:
000400 37e3      	CPI  R30,LOW(0x73)
000401 f429      	BRNE _0x2020038
000402 d18b      	RCALL SUBOPT_0xF
000403 d196      	RCALL SUBOPT_0x11
000404 d112      	RCALL _strlen
000405 2f0e      	MOV  R16,R30
000406 c007      	RJMP _0x2020039
                 _0x2020038:
000407 37e0      	CPI  R30,LOW(0x70)
000408 f449      	BRNE _0x202003B
000409 d184      	RCALL SUBOPT_0xF
00040a d18f      	RCALL SUBOPT_0x11
00040b d117      	RCALL _strlenf
00040c 2f0e      	MOV  R16,R30
00040d 6018      	ORI  R17,LOW(8)
                 _0x2020039:
00040e 6012      	ORI  R17,LOW(2)
00040f 771f      	ANDI R17,LOW(127)
000410 e020      	LDI  R18,LOW(0)
000411 c038      	RJMP _0x202003C
                 _0x202003B:
000412 36e4      	CPI  R30,LOW(0x64)
000413 f011      	BREQ _0x202003F
000414 36e9      	CPI  R30,LOW(0x69)
000415 f411      	BRNE _0x2020040
                 _0x202003F:
000416 6014      	ORI  R17,LOW(4)
000417 c002      	RJMP _0x2020041
                 _0x2020040:
000418 37e5      	CPI  R30,LOW(0x75)
000419 f431      	BRNE _0x2020042
                 _0x2020041:
00041a e9e8      	LDI  R30,LOW(_tbl10_G101*2)
00041b e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
00041c 83ee      	STD  Y+6,R30
00041d 83ff      	STD  Y+6+1,R31
00041e e005      	LDI  R16,LOW(5)
00041f c00c      	RJMP _0x2020043
                 _0x2020042:
000420 35e8      	CPI  R30,LOW(0x58)
000421 f411      	BRNE _0x2020045
000422 6018      	ORI  R17,LOW(8)
000423 c003      	RJMP _0x2020046
                 _0x2020045:
000424 37e8      	CPI  R30,LOW(0x78)
000425 f009      	BREQ PC+2
000426 c09f      	RJMP _0x2020077
                 _0x2020046:
000427 eae2      	LDI  R30,LOW(_tbl16_G101*2)
000428 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000429 83ee      	STD  Y+6,R30
00042a 83ff      	STD  Y+6+1,R31
00042b e004      	LDI  R16,LOW(4)
                 _0x2020043:
00042c ff12      	SBRS R17,2
00042d c015      	RJMP _0x2020048
00042e d15f      	RCALL SUBOPT_0xF
00042f 89a8      	LDD  R26,Y+16
000430 89b9      	LDD  R27,Y+16+1
000431 9614      	ADIW R26,4
000432 91ed      	LD   R30,X+
000433 91fd      	LD   R31,X+
000434 87ea      	STD  Y+10,R30
000435 87fb      	STD  Y+10+1,R31
000436 85ab      	LDD  R26,Y+11
000437 23aa      	TST  R26
000438 f422      	BRPL _0x2020049
000439 d18c      	RCALL __ANEGW1
00043a 87ea      	STD  Y+10,R30
00043b 87fb      	STD  Y+10+1,R31
00043c e25d      	LDI  R21,LOW(45)
                 _0x2020049:
00043d 3050      	CPI  R21,0
00043e f011      	BREQ _0x202004A
00043f 5f0f      	SUBI R16,-LOW(1)
000440 c001      	RJMP _0x202004B
                 _0x202004A:
000441 7f1b      	ANDI R17,LOW(251)
                 _0x202004B:
000442 c007      	RJMP _0x202004C
                 _0x2020048:
000443 d14a      	RCALL SUBOPT_0xF
000444 89a8      	LDD  R26,Y+16
000445 89b9      	LDD  R27,Y+16+1
000446 9614      	ADIW R26,4
000447 d1b0      	RCALL __GETW1P
000448 87ea      	STD  Y+10,R30
000449 87fb      	STD  Y+10+1,R31
                 _0x202004C:
                 _0x202003C:
00044a fd10      	SBRC R17,0
00044b c010      	RJMP _0x202004D
                 _0x202004E:
00044c 1704      	CP   R16,R20
00044d f470      	BRSH _0x2020050
00044e ff17      	SBRS R17,7
00044f c008      	RJMP _0x2020051
000450 ff12      	SBRS R17,2
000451 c004      	RJMP _0x2020052
000452 7f1b      	ANDI R17,LOW(251)
000453 2f35      	MOV  R19,R21
000454 5001      	SUBI R16,LOW(1)
000455 c001      	RJMP _0x2020053
                 _0x2020052:
000456 e330      	LDI  R19,LOW(48)
                 _0x2020053:
000457 c001      	RJMP _0x2020054
                 _0x2020051:
000458 e230      	LDI  R19,LOW(32)
                 _0x2020054:
000459 d12d      	RCALL SUBOPT_0xE
00045a 5041      	SUBI R20,LOW(1)
00045b cff0      	RJMP _0x202004E
                 _0x2020050:
                 _0x202004D:
00045c 2f20      	MOV  R18,R16
00045d ff11      	SBRS R17,1
00045e c016      	RJMP _0x2020055
                 _0x2020056:
00045f 3020      	CPI  R18,0
000460 f099      	BREQ _0x2020058
000461 ff13      	SBRS R17,3
000462 c006      	RJMP _0x2020059
000463 81ee      	LDD  R30,Y+6
000464 81ff      	LDD  R31,Y+6+1
000465 9135      	LPM  R19,Z+
000466 83ee      	STD  Y+6,R30
000467 83ff      	STD  Y+6+1,R31
000468 c005      	RJMP _0x202005A
                 _0x2020059:
000469 81ae      	LDD  R26,Y+6
00046a 81bf      	LDD  R27,Y+6+1
00046b 913d      	LD   R19,X+
00046c 83ae      	STD  Y+6,R26
00046d 83bf      	STD  Y+6+1,R27
                 _0x202005A:
00046e d118      	RCALL SUBOPT_0xE
00046f 3040      	CPI  R20,0
000470 f009      	BREQ _0x202005B
000471 5041      	SUBI R20,LOW(1)
                 _0x202005B:
000472 5021      	SUBI R18,LOW(1)
000473 cfeb      	RJMP _0x2020056
                 _0x2020058:
000474 c048      	RJMP _0x202005C
                 _0x2020055:
                 _0x202005E:
000475 e330      	LDI  R19,LOW(48)
000476 81ee      	LDD  R30,Y+6
000477 81ff      	LDD  R31,Y+6+1
000478 d183      	RCALL __GETW1PF
000479 87e8      	STD  Y+8,R30
00047a 87f9      	STD  Y+8+1,R31
00047b 81ee      	LDD  R30,Y+6
00047c 81ff      	LDD  R31,Y+6+1
00047d 9632      	ADIW R30,2
00047e 83ee      	STD  Y+6,R30
00047f 83ff      	STD  Y+6+1,R31
                 _0x2020060:
000480 85e8      	LDD  R30,Y+8
000481 85f9      	LDD  R31,Y+8+1
000482 85aa      	LDD  R26,Y+10
000483 85bb      	LDD  R27,Y+10+1
000484 17ae      	CP   R26,R30
000485 07bf      	CPC  R27,R31
000486 f050      	BRLO _0x2020062
000487 5f3f      	SUBI R19,-LOW(1)
000488 85a8      	LDD  R26,Y+8
000489 85b9      	LDD  R27,Y+8+1
00048a 85ea      	LDD  R30,Y+10
00048b 85fb      	LDD  R31,Y+10+1
00048c 1bea      	SUB  R30,R26
00048d 0bfb      	SBC  R31,R27
00048e 87ea      	STD  Y+10,R30
00048f 87fb      	STD  Y+10+1,R31
000490 cfef      	RJMP _0x2020060
                 _0x2020062:
000491 333a      	CPI  R19,58
000492 f028      	BRLO _0x2020063
000493 ff13      	SBRS R17,3
000494 c002      	RJMP _0x2020064
000495 5f39      	SUBI R19,-LOW(7)
000496 c001      	RJMP _0x2020065
                 _0x2020064:
000497 5d39      	SUBI R19,-LOW(39)
                 _0x2020065:
                 _0x2020063:
000498 fd14      	SBRC R17,4
000499 c019      	RJMP _0x2020067
00049a 3331      	CPI  R19,49
00049b f420      	BRSH _0x2020069
00049c 85a8      	LDD  R26,Y+8
00049d 85b9      	LDD  R27,Y+8+1
00049e 9711      	SBIW R26,1
00049f f409      	BRNE _0x2020068
                 _0x2020069:
0004a0 c009      	RJMP _0x20200D3
                 _0x2020068:
0004a1 1742      	CP   R20,R18
0004a2 f010      	BRLO _0x202006D
0004a3 ff10      	SBRS R17,0
0004a4 c001      	RJMP _0x202006E
                 _0x202006D:
0004a5 c011      	RJMP _0x202006C
                 _0x202006E:
0004a6 e230      	LDI  R19,LOW(32)
0004a7 ff17      	SBRS R17,7
0004a8 c00a      	RJMP _0x202006F
0004a9 e330      	LDI  R19,LOW(48)
                 _0x20200D3:
0004aa 6110      	ORI  R17,LOW(16)
0004ab ff12      	SBRS R17,2
0004ac c006      	RJMP _0x2020070
0004ad 7f1b      	ANDI R17,LOW(251)
0004ae 935a      	ST   -Y,R21
0004af d0e4      	RCALL SUBOPT_0x10
0004b0 3040      	CPI  R20,0
0004b1 f009      	BREQ _0x2020071
0004b2 5041      	SUBI R20,LOW(1)
                 _0x2020071:
                 _0x2020070:
                 _0x202006F:
                 _0x2020067:
0004b3 d0d3      	RCALL SUBOPT_0xE
0004b4 3040      	CPI  R20,0
0004b5 f009      	BREQ _0x2020072
0004b6 5041      	SUBI R20,LOW(1)
                 _0x2020072:
                 _0x202006C:
0004b7 5021      	SUBI R18,LOW(1)
0004b8 85a8      	LDD  R26,Y+8
0004b9 85b9      	LDD  R27,Y+8+1
0004ba 9712      	SBIW R26,2
0004bb f008      	BRLO _0x202005F
0004bc cfb8      	RJMP _0x202005E
                 _0x202005F:
                 _0x202005C:
0004bd ff10      	SBRS R17,0
0004be c007      	RJMP _0x2020073
                 _0x2020074:
0004bf 3040      	CPI  R20,0
0004c0 f029      	BREQ _0x2020076
0004c1 5041      	SUBI R20,LOW(1)
0004c2 e2e0      	LDI  R30,LOW(32)
0004c3 93ea      	ST   -Y,R30
0004c4 d0cf      	RCALL SUBOPT_0x10
0004c5 cff9      	RJMP _0x2020074
                 _0x2020076:
                 _0x2020073:
                 _0x2020077:
                 _0x2020036:
                 _0x20200D2:
0004c6 e000      	LDI  R16,LOW(0)
                 _0x2020021:
0004c7 ceec      	RJMP _0x202001C
                 _0x202001E:
0004c8 85ac      	LDD  R26,Y+12
0004c9 85bd      	LDD  R27,Y+12+1
0004ca 91ed      	LD   R30,X+
0004cb 91fd      	LD   R31,X+
0004cc d0de      	RCALL __LOADLOCR6
0004cd 9664      	ADIW R28,20
0004ce 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0004cf 92ff      	PUSH R15
0004d0 2ef8      	MOV  R15,R24
0004d1 9726      	SBIW R28,6
0004d2 d0d1      	RCALL __SAVELOCR6
0004d3 01fe      	MOVW R30,R28
0004d4 d0e9      	RCALL __ADDW1R15
                +
0004d5 8546     +LDD R20 , Z + 14
0004d6 8557     +LDD R21 , Z + 14 + 1
                 	__GETWRZ 20,21,14
0004d7 2e04      	MOV  R0,R20
0004d8 2a05      	OR   R0,R21
0004d9 f419      	BRNE _0x2020078
0004da efef      	LDI  R30,LOW(65535)
0004db efff      	LDI  R31,HIGH(65535)
0004dc c01f      	RJMP _0x20A0001
                 _0x2020078:
0004dd 01de      	MOVW R26,R28
0004de 9618      	ADIW R26,8
0004df d0e2      	RCALL __ADDW2R15
0004e0 018d      	MOVW R16,R26
                +
0004e1 8748     +STD Y + 8 , R20
0004e2 8759     +STD Y + 8 + 1 , R21
                 	__PUTWSR 20,21,8
0004e3 e0e0      	LDI  R30,LOW(0)
0004e4 87ea      	STD  Y+10,R30
0004e5 87eb      	STD  Y+10+1,R30
0004e6 01de      	MOVW R26,R28
0004e7 961c      	ADIW R26,12
0004e8 d0d9      	RCALL __ADDW2R15
0004e9 91ed      	LD   R30,X+
0004ea 91fd      	LD   R31,X+
0004eb 93fa      	ST   -Y,R31
0004ec 93ea      	ST   -Y,R30
0004ed 931a      	ST   -Y,R17
0004ee 930a      	ST   -Y,R16
0004ef e7ee      	LDI  R30,LOW(_put_buff_G101)
0004f0 e0f3      	LDI  R31,HIGH(_put_buff_G101)
0004f1 93fa      	ST   -Y,R31
0004f2 93ea      	ST   -Y,R30
0004f3 01de      	MOVW R26,R28
0004f4 961c      	ADIW R26,12
0004f5 deb3      	RCALL __print_G101
0004f6 019f      	MOVW R18,R30
0004f7 85a8      	LDD  R26,Y+8
0004f8 85b9      	LDD  R27,Y+8+1
0004f9 e0e0      	LDI  R30,LOW(0)
0004fa 93ec      	ST   X,R30
0004fb 01f9      	MOVW R30,R18
                 _0x20A0001:
0004fc d0ae      	RCALL __LOADLOCR6
0004fd 962c      	ADIW R28,12
0004fe 90ff      	POP  R15
0004ff 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _bcd2bin:
                 ; .FSTART _bcd2bin
000500 93aa      	ST   -Y,R26
000501 81e8          ld   r30,y
000502 95e2          swap r30
000503 70ef          andi r30,0xf
000504 2fae          mov  r26,r30
000505 0faa          lsl  r26
000506 0faa          lsl  r26
000507 0fea          add  r30,r26
000508 0fee          lsl  r30
000509 91a9          ld   r26,y+
00050a 70af          andi r26,0xf
00050b 0fea          add  r30,r26
00050c 9508          ret
                 ; .FEND
                 _bin2bcd:
                 ; .FSTART _bin2bcd
00050d 93aa      	ST   -Y,R26
00050e 91a9          ld   r26,y+
00050f 27ee          clr  r30
                 bin2bcd0:
000510 50aa          subi r26,10
000511 f012          brmi bin2bcd1
000512 5fe0          subi r30,-16
000513 cffc          rjmp bin2bcd0
                 bin2bcd1:
000514 5fa6          subi r26,-10
000515 0fea          add  r30,r26
000516 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000517 93ba      	ST   -Y,R27
000518 93aa      	ST   -Y,R26
000519 91a9          ld   r26,y+
00051a 91b9          ld   r27,y+
00051b 27ee          clr  r30
00051c 27ff          clr  r31
                 strlen0:
00051d 916d          ld   r22,x+
00051e 2366          tst  r22
00051f f011          breq strlen1
000520 9631          adiw r30,1
000521 cffb          rjmp strlen0
                 strlen1:
000522 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000523 93ba      	ST   -Y,R27
000524 93aa      	ST   -Y,R26
000525 27aa          clr  r26
000526 27bb          clr  r27
000527 91e9          ld   r30,y+
000528 91f9          ld   r31,y+
                 strlenf0:
000529 9005      	lpm  r0,z+
00052a 2000          tst  r0
00052b f011          breq strlenf1
00052c 9611          adiw r26,1
00052d cffb          rjmp strlenf0
                 strlenf1:
00052e 01fd          movw r30,r26
00052f 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _cursor:
000900           	.BYTE 0x1
                 _alarmFlag:
000901           	.BYTE 0x1
                 
                 	.ESEG
                 _AH:
000000           	.BYTE 0x1
                 _AM:
000001           	.BYTE 0x1
                 
                 	.DSEG
                 _H:
000902           	.BYTE 0x1
                 _M:
000903           	.BYTE 0x1
                 _S:
000904           	.BYTE 0x1
                 _time:
000905           	.BYTE 0x10
                 _temperature:
000915           	.BYTE 0x4
                 _tempInt:
000919           	.BYTE 0x2
                 _tempDec:
00091b           	.BYTE 0x2
                 _i:
00091d           	.BYTE 0x1
                 _k:
00091e           	.BYTE 0x2
                 _kFlag:
000920           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000530 931a      	ST   -Y,R17
000531 930a      	ST   -Y,R16
000532 2f0a      	MOV  R16,R26
000533 811a      	LDD  R17,Y+2
000534 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000535 91e0 0919 	LDS  R30,_tempInt
000537 91f0 091a 	LDS  R31,_tempInt+1
000539 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
00053a 91e0 091e 	LDS  R30,_k
00053c 91f0 091f 	LDS  R31,_k+1
00053e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
00053f 91a0 091e 	LDS  R26,_k
000541 91b0 091f 	LDS  R27,_k+1
000543 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000544 e0e5      	LDI  R30,LOW(_time)
000545 e0f9      	LDI  R31,HIGH(_time)
000546 93fa      	ST   -Y,R31
000547 93ea      	ST   -Y,R30
000548 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x5:
000549 27ff      	CLR  R31
00054a 2766      	CLR  R22
00054b 2777      	CLR  R23
00054c d0b8      	RCALL __PUTPARD1
00054d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00054e dbbf      	RCALL _MoveCursor
00054f e0a5      	LDI  R26,LOW(_time)
000550 e0b9      	LDI  R27,HIGH(_time)
000551 cba6      	RJMP _StringLCDVar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x7:
000552 e0e2      	LDI  R30,LOW(_H)
000553 e0f9      	LDI  R31,HIGH(_H)
000554 93fa      	ST   -Y,R31
000555 93ea      	ST   -Y,R30
000556 e0e3      	LDI  R30,LOW(_M)
000557 e0f9      	LDI  R31,HIGH(_M)
000558 93fa      	ST   -Y,R31
000559 93ea      	ST   -Y,R30
00055a e0a4      	LDI  R26,LOW(_S)
00055b e0b9      	LDI  R27,HIGH(_S)
00055c cdeb      	RJMP _rtc_get_time
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
00055d e0a0      	LDI  R26,LOW(_AH)
00055e e0b0      	LDI  R27,HIGH(_AH)
00055f d0bc      	RCALL __EEPROMRDB
000560 91a0 0902 	LDS  R26,_H
000562 17ea      	CP   R30,R26
000563 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x9:
000564 93e0 0902 	STS  _H,R30
000566 93ea      	ST   -Y,R30
000567 91e0 0903 	LDS  R30,_M
000569 93ea      	ST   -Y,R30
00056a 91a0 0904 	LDS  R26,_S
00056c cdf6      	RJMP _rtc_set_time
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xA:
00056d 93e0 0903 	STS  _M,R30
00056f 91e0 0902 	LDS  R30,_H
000571 93ea      	ST   -Y,R30
000572 91e0 0903 	LDS  R30,_M
000574 93ea      	ST   -Y,R30
000575 91a0 0904 	LDS  R26,_S
000577 cdeb      	RJMP _rtc_set_time
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
000578 d02e      	RCALL __SAVELOCR3
000579 2f0a      	MOV  R16,R26
00057a 811b      	LDD  R17,Y+3
00057b 812c      	LDD  R18,Y+4
00057c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
00057d e8ee      	LDI  R30,LOW(142)
00057e 93ea      	ST   -Y,R30
00057f e0a0      	LDI  R26,LOW(0)
000580 cda8      	RJMP _ds1302_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xD:
000581 91ed      	LD   R30,X+
000582 91fd      	LD   R31,X+
000583 9631      	ADIW R30,1
000584 93fe      	ST   -X,R31
000585 93ee      	ST   -X,R30
000586 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0xE:
000587 933a      	ST   -Y,R19
000588 85ad      	LDD  R26,Y+13
000589 85be      	LDD  R27,Y+13+1
00058a 85ef      	LDD  R30,Y+15
00058b 89f8      	LDD  R31,Y+15+1
00058c 9509      	ICALL
00058d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0xF:
00058e 89e8      	LDD  R30,Y+16
00058f 89f9      	LDD  R31,Y+16+1
000590 9734      	SBIW R30,4
000591 8be8      	STD  Y+16,R30
000592 8bf9      	STD  Y+16+1,R31
000593 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x10:
000594 85ad      	LDD  R26,Y+13
000595 85be      	LDD  R27,Y+13+1
000596 85ef      	LDD  R30,Y+15
000597 89f8      	LDD  R31,Y+15+1
000598 9509      	ICALL
000599 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x11:
00059a 89a8      	LDD  R26,Y+16
00059b 89b9      	LDD  R27,Y+16+1
00059c 9614      	ADIW R26,4
00059d 91ed      	LD   R30,X+
00059e 91fd      	LD   R31,X+
00059f 83ee      	STD  Y+6,R30
0005a0 83ff      	STD  Y+6+1,R31
0005a1 81ae      	LDD  R26,Y+6
0005a2 81bf      	LDD  R27,Y+6+1
0005a3 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
0005a4 935a      	ST   -Y,R21
                 __SAVELOCR5:
0005a5 934a      	ST   -Y,R20
                 __SAVELOCR4:
0005a6 933a      	ST   -Y,R19
                 __SAVELOCR3:
0005a7 932a      	ST   -Y,R18
                 __SAVELOCR2:
0005a8 931a      	ST   -Y,R17
0005a9 930a      	ST   -Y,R16
0005aa 9508      	RET
                 
                 __LOADLOCR6:
0005ab 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0005ac 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0005ad 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0005ae 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0005af 8119      	LDD  R17,Y+1
0005b0 8108      	LD   R16,Y
0005b1 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
0005b2 93af      	PUSH R26
0005b3 93bf      	PUSH R27
0005b4 01db      	MOVW R26,R22
0005b5 0fac      	ADD  R26,R28
0005b6 1fbd      	ADC  R27,R29
                 __INITLOC0:
0005b7 9005      	LPM  R0,Z+
0005b8 920d      	ST   X+,R0
0005b9 958a      	DEC  R24
0005ba f7e1      	BRNE __INITLOC0
0005bb 91bf      	POP  R27
0005bc 91af      	POP  R26
0005bd 9508      	RET
                 
                 __ADDW1R15:
0005be 2400      	CLR  R0
0005bf 0def      	ADD  R30,R15
0005c0 1df0      	ADC  R31,R0
0005c1 9508      	RET
                 
                 __ADDW2R15:
0005c2 2400      	CLR  R0
0005c3 0daf      	ADD  R26,R15
0005c4 1db0      	ADC  R27,R0
0005c5 9508      	RET
                 
                 __ANEGW1:
0005c6 95f1      	NEG  R31
0005c7 95e1      	NEG  R30
0005c8 40f0      	SBCI R31,0
0005c9 9508      	RET
                 
                 __ANEGD1:
0005ca 95f0      	COM  R31
0005cb 9560      	COM  R22
0005cc 9570      	COM  R23
0005cd 95e1      	NEG  R30
0005ce 4fff      	SBCI R31,-1
0005cf 4f6f      	SBCI R22,-1
0005d0 4f7f      	SBCI R23,-1
0005d1 9508      	RET
                 
                 __CWD1:
0005d2 2f6f      	MOV  R22,R31
0005d3 0f66      	ADD  R22,R22
0005d4 0b66      	SBC  R22,R22
0005d5 2f76      	MOV  R23,R22
0005d6 9508      	RET
                 
                 __DIVW21U:
0005d7 2400      	CLR  R0
0005d8 2411      	CLR  R1
0005d9 e190      	LDI  R25,16
                 __DIVW21U1:
0005da 0faa      	LSL  R26
0005db 1fbb      	ROL  R27
0005dc 1c00      	ROL  R0
0005dd 1c11      	ROL  R1
0005de 1a0e      	SUB  R0,R30
0005df 0a1f      	SBC  R1,R31
0005e0 f418      	BRCC __DIVW21U2
0005e1 0e0e      	ADD  R0,R30
0005e2 1e1f      	ADC  R1,R31
0005e3 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0005e4 60a1      	SBR  R26,1
                 __DIVW21U3:
0005e5 959a      	DEC  R25
0005e6 f799      	BRNE __DIVW21U1
0005e7 01fd      	MOVW R30,R26
0005e8 01d0      	MOVW R26,R0
0005e9 9508      	RET
                 
                 __MODW21:
0005ea 94e8      	CLT
0005eb ffb7      	SBRS R27,7
0005ec c004      	RJMP __MODW211
0005ed 95b1      	NEG  R27
0005ee 95a1      	NEG  R26
0005ef 40b0      	SBCI R27,0
0005f0 9468      	SET
                 __MODW211:
0005f1 fdf7      	SBRC R31,7
0005f2 dfd3      	RCALL __ANEGW1
0005f3 dfe3      	RCALL __DIVW21U
0005f4 01fd      	MOVW R30,R26
0005f5 f40e      	BRTC __MODW212
0005f6 dfcf      	RCALL __ANEGW1
                 __MODW212:
0005f7 9508      	RET
                 
                 __GETW1P:
0005f8 91ed      	LD   R30,X+
0005f9 91fc      	LD   R31,X
0005fa 9711      	SBIW R26,1
0005fb 9508      	RET
                 
                 __GETW1PF:
0005fc 9005      	LPM  R0,Z+
0005fd 91f4      	LPM  R31,Z
0005fe 2de0      	MOV  R30,R0
0005ff 9508      	RET
                 
                 __GETD1S0:
000600 81e8      	LD   R30,Y
000601 81f9      	LDD  R31,Y+1
000602 816a      	LDD  R22,Y+2
000603 817b      	LDD  R23,Y+3
000604 9508      	RET
                 
                 __PUTPARD1:
000605 937a      	ST   -Y,R23
000606 936a      	ST   -Y,R22
000607 93fa      	ST   -Y,R31
000608 93ea      	ST   -Y,R30
000609 9508      	RET
                 
                 __PUTPARD2:
00060a 939a      	ST   -Y,R25
00060b 938a      	ST   -Y,R24
00060c 93ba      	ST   -Y,R27
00060d 93aa      	ST   -Y,R26
00060e 9508      	RET
                 
                 __SWAPD12:
00060f 2e18      	MOV  R1,R24
000610 2f86      	MOV  R24,R22
000611 2d61      	MOV  R22,R1
000612 2e19      	MOV  R1,R25
000613 2f97      	MOV  R25,R23
000614 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000615 2e1b      	MOV  R1,R27
000616 2fbf      	MOV  R27,R31
000617 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000618 2e1a      	MOV  R1,R26
000619 2fae      	MOV  R26,R30
00061a 2de1      	MOV  R30,R1
00061b 9508      	RET
                 
                 __EEPROMRDB:
00061c 99f9      	SBIC EECR,EEWE
00061d cffe      	RJMP __EEPROMRDB
00061e 93ff      	PUSH R31
00061f b7ff      	IN   R31,SREG
000620 94f8      	CLI
000621 bda1      	OUT  EEARL,R26
000622 bdb2      	OUT  EEARH,R27
000623 9af8      	SBI  EECR,EERE
000624 b5e0      	IN   R30,EEDR
000625 bfff      	OUT  SREG,R31
000626 91ff      	POP  R31
000627 9508      	RET
                 
                 __EEPROMWRB:
000628 9bf9      	SBIS EECR,EEWE
000629 c002      	RJMP __EEPROMWRB1
00062a 95a8      	WDR
00062b cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
00062c b79f      	IN   R25,SREG
00062d 94f8      	CLI
00062e bda1      	OUT  EEARL,R26
00062f bdb2      	OUT  EEARH,R27
000630 9af8      	SBI  EECR,EERE
000631 b580      	IN   R24,EEDR
000632 17e8      	CP   R30,R24
000633 f019      	BREQ __EEPROMWRB0
000634 bde0      	OUT  EEDR,R30
000635 9afa      	SBI  EECR,EEMWE
000636 9af9      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000637 bf9f      	OUT  SREG,R25
000638 9508      	RET
                 
                 __CPD10:
000639 9730      	SBIW R30,0
00063a 4060      	SBCI R22,0
00063b 4070      	SBCI R23,0
00063c 9508      	RET
                 
                 __ROUND_REPACK:
00063d 2355      	TST  R21
00063e f442      	BRPL __REPACK
00063f 3850      	CPI  R21,0x80
000640 f411      	BRNE __ROUND_REPACK0
000641 ffe0      	SBRS R30,0
000642 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000643 9631      	ADIW R30,1
000644 1f69      	ADC  R22,R25
000645 1f79      	ADC  R23,R25
000646 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000647 e850      	LDI  R21,0x80
000648 2757      	EOR  R21,R23
000649 f411      	BRNE __REPACK0
00064a 935f      	PUSH R21
00064b c0ca      	RJMP __ZERORES
                 __REPACK0:
00064c 3f5f      	CPI  R21,0xFF
00064d f031      	BREQ __REPACK1
00064e 0f66      	LSL  R22
00064f 0c00      	LSL  R0
000650 9557      	ROR  R21
000651 9567      	ROR  R22
000652 2f75      	MOV  R23,R21
000653 9508      	RET
                 __REPACK1:
000654 935f      	PUSH R21
000655 2000      	TST  R0
000656 f00a      	BRMI __REPACK2
000657 c0c9      	RJMP __MAXRES
                 __REPACK2:
000658 c0c2      	RJMP __MINRES
                 
                 __UNPACK:
000659 e850      	LDI  R21,0x80
00065a 2e19      	MOV  R1,R25
00065b 2215      	AND  R1,R21
00065c 0f88      	LSL  R24
00065d 1f99      	ROL  R25
00065e 2795      	EOR  R25,R21
00065f 0f55      	LSL  R21
000660 9587      	ROR  R24
                 
                 __UNPACK1:
000661 e850      	LDI  R21,0x80
000662 2e07      	MOV  R0,R23
000663 2205      	AND  R0,R21
000664 0f66      	LSL  R22
000665 1f77      	ROL  R23
000666 2775      	EOR  R23,R21
000667 0f55      	LSL  R21
000668 9567      	ROR  R22
000669 9508      	RET
                 
                 __CFD1U:
00066a 9468      	SET
00066b c001      	RJMP __CFD1U0
                 __CFD1:
00066c 94e8      	CLT
                 __CFD1U0:
00066d 935f      	PUSH R21
00066e dff2      	RCALL __UNPACK1
00066f 3870      	CPI  R23,0x80
000670 f018      	BRLO __CFD10
000671 3f7f      	CPI  R23,0xFF
000672 f408      	BRCC __CFD10
000673 c0a2      	RJMP __ZERORES
                 __CFD10:
000674 e156      	LDI  R21,22
000675 1b57      	SUB  R21,R23
000676 f4aa      	BRPL __CFD11
000677 9551      	NEG  R21
000678 3058      	CPI  R21,8
000679 f40e      	BRTC __CFD19
00067a 3059      	CPI  R21,9
                 __CFD19:
00067b f030      	BRLO __CFD17
00067c efef      	SER  R30
00067d efff      	SER  R31
00067e ef6f      	SER  R22
00067f e77f      	LDI  R23,0x7F
000680 f977      	BLD  R23,7
000681 c01a      	RJMP __CFD15
                 __CFD17:
000682 2777      	CLR  R23
000683 2355      	TST  R21
000684 f0b9      	BREQ __CFD15
                 __CFD18:
000685 0fee      	LSL  R30
000686 1fff      	ROL  R31
000687 1f66      	ROL  R22
000688 1f77      	ROL  R23
000689 955a      	DEC  R21
00068a f7d1      	BRNE __CFD18
00068b c010      	RJMP __CFD15
                 __CFD11:
00068c 2777      	CLR  R23
                 __CFD12:
00068d 3058      	CPI  R21,8
00068e f028      	BRLO __CFD13
00068f 2fef      	MOV  R30,R31
000690 2ff6      	MOV  R31,R22
000691 2f67      	MOV  R22,R23
000692 5058      	SUBI R21,8
000693 cff9      	RJMP __CFD12
                 __CFD13:
000694 2355      	TST  R21
000695 f031      	BREQ __CFD15
                 __CFD14:
000696 9576      	LSR  R23
000697 9567      	ROR  R22
000698 95f7      	ROR  R31
000699 95e7      	ROR  R30
00069a 955a      	DEC  R21
00069b f7d1      	BRNE __CFD14
                 __CFD15:
00069c 2000      	TST  R0
00069d f40a      	BRPL __CFD16
00069e df2b      	RCALL __ANEGD1
                 __CFD16:
00069f 915f      	POP  R21
0006a0 9508      	RET
                 
                 __CDF1U:
0006a1 9468      	SET
0006a2 c001      	RJMP __CDF1U0
                 __CDF1:
0006a3 94e8      	CLT
                 __CDF1U0:
0006a4 9730      	SBIW R30,0
0006a5 4060      	SBCI R22,0
0006a6 4070      	SBCI R23,0
0006a7 f0b1      	BREQ __CDF10
0006a8 2400      	CLR  R0
0006a9 f026      	BRTS __CDF11
0006aa 2377      	TST  R23
0006ab f412      	BRPL __CDF11
0006ac 9400      	COM  R0
0006ad df1c      	RCALL __ANEGD1
                 __CDF11:
0006ae 2e17      	MOV  R1,R23
0006af e17e      	LDI  R23,30
0006b0 2011      	TST  R1
                 __CDF12:
0006b1 f032      	BRMI __CDF13
0006b2 957a      	DEC  R23
0006b3 0fee      	LSL  R30
0006b4 1fff      	ROL  R31
0006b5 1f66      	ROL  R22
0006b6 1c11      	ROL  R1
0006b7 cff9      	RJMP __CDF12
                 __CDF13:
0006b8 2fef      	MOV  R30,R31
0006b9 2ff6      	MOV  R31,R22
0006ba 2d61      	MOV  R22,R1
0006bb 935f      	PUSH R21
0006bc df8a      	RCALL __REPACK
0006bd 915f      	POP  R21
                 __CDF10:
0006be 9508      	RET
                 
                 __SWAPACC:
0006bf 934f      	PUSH R20
0006c0 01af      	MOVW R20,R30
0006c1 01fd      	MOVW R30,R26
0006c2 01da      	MOVW R26,R20
0006c3 01ab      	MOVW R20,R22
0006c4 01bc      	MOVW R22,R24
0006c5 01ca      	MOVW R24,R20
0006c6 2d40      	MOV  R20,R0
0006c7 2c01      	MOV  R0,R1
0006c8 2e14      	MOV  R1,R20
0006c9 914f      	POP  R20
0006ca 9508      	RET
                 
                 __UADD12:
0006cb 0fea      	ADD  R30,R26
0006cc 1ffb      	ADC  R31,R27
0006cd 1f68      	ADC  R22,R24
0006ce 9508      	RET
                 
                 __NEGMAN1:
0006cf 95e0      	COM  R30
0006d0 95f0      	COM  R31
0006d1 9560      	COM  R22
0006d2 5fef      	SUBI R30,-1
0006d3 4fff      	SBCI R31,-1
0006d4 4f6f      	SBCI R22,-1
0006d5 9508      	RET
                 
                 __SUBF12:
0006d6 935f      	PUSH R21
0006d7 df81      	RCALL __UNPACK
0006d8 3890      	CPI  R25,0x80
0006d9 f149      	BREQ __ADDF129
0006da e850      	LDI  R21,0x80
0006db 2615      	EOR  R1,R21
                 
                 __ADDF120:
0006dc 3870      	CPI  R23,0x80
0006dd f121      	BREQ __ADDF128
                 __ADDF121:
0006de 2f57      	MOV  R21,R23
0006df 1b59      	SUB  R21,R25
0006e0 f12b      	BRVS __ADDF1211
0006e1 f412      	BRPL __ADDF122
0006e2 dfdc      	RCALL __SWAPACC
0006e3 cffa      	RJMP __ADDF121
                 __ADDF122:
0006e4 3158      	CPI  R21,24
0006e5 f018      	BRLO __ADDF123
0006e6 27aa      	CLR  R26
0006e7 27bb      	CLR  R27
0006e8 2788      	CLR  R24
                 __ADDF123:
0006e9 3058      	CPI  R21,8
0006ea f028      	BRLO __ADDF124
0006eb 2fab      	MOV  R26,R27
0006ec 2fb8      	MOV  R27,R24
0006ed 2788      	CLR  R24
0006ee 5058      	SUBI R21,8
0006ef cff9      	RJMP __ADDF123
                 __ADDF124:
0006f0 2355      	TST  R21
0006f1 f029      	BREQ __ADDF126
                 __ADDF125:
0006f2 9586      	LSR  R24
0006f3 95b7      	ROR  R27
0006f4 95a7      	ROR  R26
0006f5 955a      	DEC  R21
0006f6 f7d9      	BRNE __ADDF125
                 __ADDF126:
0006f7 2d50      	MOV  R21,R0
0006f8 2551      	EOR  R21,R1
0006f9 f072      	BRMI __ADDF127
0006fa dfd0      	RCALL __UADD12
0006fb f438      	BRCC __ADDF129
0006fc 9567      	ROR  R22
0006fd 95f7      	ROR  R31
0006fe 95e7      	ROR  R30
0006ff 9573      	INC  R23
000700 f413      	BRVC __ADDF129
000701 c01f      	RJMP __MAXRES
                 __ADDF128:
000702 dfbc      	RCALL __SWAPACC
                 __ADDF129:
000703 df43      	RCALL __REPACK
000704 915f      	POP  R21
000705 9508      	RET
                 __ADDF1211:
000706 f7d8      	BRCC __ADDF128
000707 cffb      	RJMP __ADDF129
                 __ADDF127:
000708 1bea      	SUB  R30,R26
000709 0bfb      	SBC  R31,R27
00070a 0b68      	SBC  R22,R24
00070b f051      	BREQ __ZERORES
00070c f410      	BRCC __ADDF1210
00070d 9400      	COM  R0
00070e dfc0      	RCALL __NEGMAN1
                 __ADDF1210:
00070f 2366      	TST  R22
000710 f392      	BRMI __ADDF129
000711 0fee      	LSL  R30
000712 1fff      	ROL  R31
000713 1f66      	ROL  R22
000714 957a      	DEC  R23
000715 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000716 27ee      	CLR  R30
000717 27ff      	CLR  R31
000718 01bf      	MOVW R22,R30
000719 915f      	POP  R21
00071a 9508      	RET
                 
                 __MINRES:
00071b efef      	SER  R30
00071c efff      	SER  R31
00071d e76f      	LDI  R22,0x7F
00071e ef7f      	SER  R23
00071f 915f      	POP  R21
000720 9508      	RET
                 
                 __MAXRES:
000721 efef      	SER  R30
000722 efff      	SER  R31
000723 e76f      	LDI  R22,0x7F
000724 e77f      	LDI  R23,0x7F
000725 915f      	POP  R21
000726 9508      	RET
                 
                 __MULF12:
000727 935f      	PUSH R21
000728 df30      	RCALL __UNPACK
000729 3870      	CPI  R23,0x80
00072a f359      	BREQ __ZERORES
00072b 3890      	CPI  R25,0x80
00072c f349      	BREQ __ZERORES
00072d 2401      	EOR  R0,R1
00072e 9408      	SEC
00072f 1f79      	ADC  R23,R25
000730 f423      	BRVC __MULF124
000731 f324      	BRLT __ZERORES
                 __MULF125:
000732 2000      	TST  R0
000733 f33a      	BRMI __MINRES
000734 cfec      	RJMP __MAXRES
                 __MULF124:
000735 920f      	PUSH R0
000736 931f      	PUSH R17
000737 932f      	PUSH R18
000738 933f      	PUSH R19
000739 934f      	PUSH R20
00073a 2711      	CLR  R17
00073b 2722      	CLR  R18
00073c 2799      	CLR  R25
00073d 9f68      	MUL  R22,R24
00073e 01a0      	MOVW R20,R0
00073f 9f8f      	MUL  R24,R31
000740 2d30      	MOV  R19,R0
000741 0d41      	ADD  R20,R1
000742 1f59      	ADC  R21,R25
000743 9f6b      	MUL  R22,R27
000744 0d30      	ADD  R19,R0
000745 1d41      	ADC  R20,R1
000746 1f59      	ADC  R21,R25
000747 9f8e      	MUL  R24,R30
000748 d027      	RCALL __MULF126
000749 9fbf      	MUL  R27,R31
00074a d025      	RCALL __MULF126
00074b 9f6a      	MUL  R22,R26
00074c d023      	RCALL __MULF126
00074d 9fbe      	MUL  R27,R30
00074e d01d      	RCALL __MULF127
00074f 9faf      	MUL  R26,R31
000750 d01b      	RCALL __MULF127
000751 9fae      	MUL  R26,R30
000752 0d11      	ADD  R17,R1
000753 1f29      	ADC  R18,R25
000754 1f39      	ADC  R19,R25
000755 1f49      	ADC  R20,R25
000756 1f59      	ADC  R21,R25
000757 2fe3      	MOV  R30,R19
000758 2ff4      	MOV  R31,R20
000759 2f65      	MOV  R22,R21
00075a 2f52      	MOV  R21,R18
00075b 914f      	POP  R20
00075c 913f      	POP  R19
00075d 912f      	POP  R18
00075e 911f      	POP  R17
00075f 900f      	POP  R0
000760 2366      	TST  R22
000761 f02a      	BRMI __MULF122
000762 0f55      	LSL  R21
000763 1fee      	ROL  R30
000764 1fff      	ROL  R31
000765 1f66      	ROL  R22
000766 c002      	RJMP __MULF123
                 __MULF122:
000767 9573      	INC  R23
000768 f24b      	BRVS __MULF125
                 __MULF123:
000769 ded3      	RCALL __ROUND_REPACK
00076a 915f      	POP  R21
00076b 9508      	RET
                 
                 __MULF127:
00076c 0d10      	ADD  R17,R0
00076d 1d21      	ADC  R18,R1
00076e 1f39      	ADC  R19,R25
00076f c002      	RJMP __MULF128
                 __MULF126:
000770 0d20      	ADD  R18,R0
000771 1d31      	ADC  R19,R1
                 __MULF128:
000772 1f49      	ADC  R20,R25
000773 1f59      	ADC  R21,R25
000774 9508      	RET
                 
                 __DIVF21:
000775 935f      	PUSH R21
000776 dee2      	RCALL __UNPACK
000777 3870      	CPI  R23,0x80
000778 f421      	BRNE __DIVF210
000779 2011      	TST  R1
                 __DIVF211:
00077a f40a      	BRPL __DIVF219
00077b cf9f      	RJMP __MINRES
                 __DIVF219:
00077c cfa4      	RJMP __MAXRES
                 __DIVF210:
00077d 3890      	CPI  R25,0x80
00077e f409      	BRNE __DIVF218
                 __DIVF217:
00077f cf96      	RJMP __ZERORES
                 __DIVF218:
000780 2401      	EOR  R0,R1
000781 9408      	SEC
000782 0b97      	SBC  R25,R23
000783 f41b      	BRVC __DIVF216
000784 f3d4      	BRLT __DIVF217
000785 2000      	TST  R0
000786 cff3      	RJMP __DIVF211
                 __DIVF216:
000787 2f79      	MOV  R23,R25
000788 931f      	PUSH R17
000789 932f      	PUSH R18
00078a 933f      	PUSH R19
00078b 934f      	PUSH R20
00078c 2411      	CLR  R1
00078d 2711      	CLR  R17
00078e 2722      	CLR  R18
00078f 2733      	CLR  R19
000790 01a9      	MOVW R20,R18
000791 e290      	LDI  R25,32
                 __DIVF212:
000792 17ae      	CP   R26,R30
000793 07bf      	CPC  R27,R31
000794 0786      	CPC  R24,R22
000795 0741      	CPC  R20,R17
000796 f030      	BRLO __DIVF213
000797 1bae      	SUB  R26,R30
000798 0bbf      	SBC  R27,R31
000799 0b86      	SBC  R24,R22
00079a 0b41      	SBC  R20,R17
00079b 9408      	SEC
00079c c001      	RJMP __DIVF214
                 __DIVF213:
00079d 9488      	CLC
                 __DIVF214:
00079e 1f55      	ROL  R21
00079f 1f22      	ROL  R18
0007a0 1f33      	ROL  R19
0007a1 1c11      	ROL  R1
0007a2 1faa      	ROL  R26
0007a3 1fbb      	ROL  R27
0007a4 1f88      	ROL  R24
0007a5 1f44      	ROL  R20
0007a6 959a      	DEC  R25
0007a7 f751      	BRNE __DIVF212
0007a8 01f9      	MOVW R30,R18
0007a9 2d61      	MOV  R22,R1
0007aa 914f      	POP  R20
0007ab 913f      	POP  R19
0007ac 912f      	POP  R18
0007ad 911f      	POP  R17
0007ae 2366      	TST  R22
0007af f032      	BRMI __DIVF215
0007b0 0f55      	LSL  R21
0007b1 1fee      	ROL  R30
0007b2 1fff      	ROL  R31
0007b3 1f66      	ROL  R22
0007b4 957a      	DEC  R23
0007b5 f24b      	BRVS __DIVF217
                 __DIVF215:
0007b6 de86      	RCALL __ROUND_REPACK
0007b7 915f      	POP  R21
0007b8 9508      	RET
                 
                 __CMPF12:
0007b9 2399      	TST  R25
0007ba f09a      	BRMI __CMPF120
0007bb 2377      	TST  R23
0007bc f042      	BRMI __CMPF121
0007bd 1797      	CP   R25,R23
0007be f048      	BRLO __CMPF122
0007bf f429      	BRNE __CMPF121
0007c0 17ae      	CP   R26,R30
0007c1 07bf      	CPC  R27,R31
0007c2 0786      	CPC  R24,R22
0007c3 f020      	BRLO __CMPF122
0007c4 f031      	BREQ __CMPF123
                 __CMPF121:
0007c5 9498      	CLZ
0007c6 9488      	CLC
0007c7 9508      	RET
                 __CMPF122:
0007c8 9498      	CLZ
0007c9 9408      	SEC
0007ca 9508      	RET
                 __CMPF123:
0007cb 9418      	SEZ
0007cc 9488      	CLC
0007cd 9508      	RET
                 __CMPF120:
0007ce 2377      	TST  R23
0007cf f7c2      	BRPL __CMPF122
0007d0 1797      	CP   R25,R23
0007d1 f398      	BRLO __CMPF121
0007d2 f7a9      	BRNE __CMPF122
0007d3 17ea      	CP   R30,R26
0007d4 07fb      	CPC  R31,R27
0007d5 0768      	CPC  R22,R24
0007d6 f388      	BRLO __CMPF122
0007d7 f399      	BREQ __CMPF123
0007d8 cfec      	RJMP __CMPF121
                 
                 _delay_ms:
0007d9 9610      	adiw r26,0
0007da f039      	breq __delay_ms1
                 __delay_ms0:
0007db 95a8      	wdr
                +
0007dc ea80     +LDI R24 , LOW ( 0xFA0 )
0007dd e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
0007de 9701     +SBIW R24 , 1
0007df f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0007e0 9711      	sbiw r26,1
0007e1 f7c9      	brne __delay_ms0
                 __delay_ms1:
0007e2 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

AT90USB1286 register use summary:
r0 :  40 r1 :  33 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   5 
r16:  72 r17:  60 r18:  37 r19:  40 r20:  46 r21:  74 r22:  68 r23:  56 
r24:  56 r25:  42 r26: 228 r27:  83 r28:  23 r29:   2 r30: 347 r31: 135 
x  :  33 y  : 202 z  :  11 
Registers used: 22 out of 35 (62.9%)

AT90USB1286 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  24 add   :  18 
adiw  :  32 and   :   2 andi  :  12 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   6 brcs  :   0 break :   0 breq  :  31 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  23 
brlt  :   3 brmi  :  11 brne  :  62 brpl  :   8 brsh  :   3 brtc  :   2 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   0 call  :   0 
cbi   :  12 cbr   :   0 clc   :   4 clh   :   0 cli   :   3 cln   :   0 
clr   :  36 cls   :   0 clt   :   3 clv   :   0 clz   :   2 com   :   8 
cp    :  12 cpc   :  14 cpi   :  68 cpse  :   0 dec   :  18 des   :   0 
elpm  :   0 eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   4 inc   :   2 jmp   :  44 ld    :  34 ldd   :  82 
ldi   : 206 lds   :  48 lpm   :   8 lsl   :  15 lsr   :   2 mov   :  94 
movw  :  43 mul   :  10 muls  :   0 mulsu :   0 neg   :   6 nop   :   4 
or    :   1 ori   :  13 out   :  15 pop   :  22 push  :  21 rcall : 181 
ret   :  71 reti  :   0 rjmp  : 118 rol   :  27 ror   :  14 sbc   :   9 
sbci  :  11 sbi   :  24 sbic  :   6 sbis  :   1 sbiw  :  23 sbr   :   1 
sbrc  :   3 sbrs  :  16 sec   :   5 seh   :   0 sei   :   0 sen   :   0 
ser   :   8 ses   :   0 set   :   3 sev   :   0 sez   :   1 sleep :   0 
spm   :   0 st    :  89 std   :  35 sts   :  35 sub   :   6 subi  :  31 
swap  :   2 tst   :  21 wdr   :   2 
Instructions used: 78 out of 117 (66.7%)

AT90USB1286 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000fc6   3958     80   4038  131072   3.1%
[.dseg] 0x000100 0x000921      0     33     33    8192   0.4%
[.eseg] 0x000000 0x000002      0      2      2    4096   0.0%

Assembly complete, 0 errors, 1 warnings

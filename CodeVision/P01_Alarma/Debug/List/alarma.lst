
AVRASM ver. 2.1.30  C:\Users\980006738\Documents\Semestre 8\Lab de Micros\LabMicrocontroladores\CodeVision\P01_Alarma\Debug\List\alarma.asm Tue Feb 18 16:49:56 2020

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : AT90USB1286
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 2048 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: Off
                 ;Smart register allocation: Off
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME AT90USB1286
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 8192
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR1A=0xC8
                 	.EQU UDR1=0xCE
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x20FF
                 	.EQU __DSTACK_SIZE=0x0800
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 006f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
000046 940c 0000 	JMP  0x00
000048 940c 0000 	JMP  0x00
00004a 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00004c 2710
00004d 03e8
00004e 0064
00004f 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000050 0001      	.DB  0x1,0x0
                 _tbl16_G101:
000051 1000
000052 0100
000053 0010
000054 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000055 0303
000056 0203
000057 0c02
000058 0800      	.DB  0x3,0x3,0x3,0x2,0x2,0xC,0x0,0x8
000059 0100
00005a 0600      	.DB  0x0,0x1,0x0,0x6
                 _0x0:
00005b 3a48
00005c 3025
00005d 6932
00005e 253a      	.DB  0x48,0x3A,0x25,0x30,0x32,0x69,0x3A,0x25
00005f 3230
000060 3a69
000061 3025
000062 6932      	.DB  0x30,0x32,0x69,0x3A,0x25,0x30,0x32,0x69
000063 5420
000064 253a
000065 3230
000066 0069      	.DB  0x20,0x54,0x3A,0x25,0x30,0x32,0x69,0x0
000067 3a41
000068 2520
000069 3230
00006a 3a69      	.DB  0x41,0x3A,0x20,0x25,0x30,0x32,0x69,0x3A
00006b 3025
00006c 6932
00006d 2020
00006e 0020      	.DB  0x25,0x30,0x32,0x69,0x20,0x20,0x20,0x0
                 __RESET:
00006f 94f8      	CLI
000070 27ee      	CLR  R30
000071 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000072 e0f1      	LDI  R31,1
000073 bff5      	OUT  MCUCR,R31
000074 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000075 e08d      	LDI  R24,(14-2)+1
000076 e0a2      	LDI  R26,2
000077 27bb      	CLR  R27
                 __CLEAR_REG:
000078 93ed      	ST   X+,R30
000079 958a      	DEC  R24
00007a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00007b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00007c e290      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00007d e0a0      	LDI  R26,LOW(__SRAM_START)
00007e e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00007f 93ed      	ST   X+,R30
000080 9701      	SBIW R24,1
000081 f7e9      	BRNE __CLEAR_SRAM
                 
000082 bf8b      	OUT  RAMPZ,R24
                 
                 ;GPIOR0 INITIALIZATION
000083 e0e0      	LDI  R30,__GPIOR0_INIT
000084 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000085 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000086 bfed      	OUT  SPL,R30
000087 e2e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000088 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000089 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008a e0d9      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008b 940c 0224 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x900
                 
                 	.CSEG
                 ;/*
                 ; * alarma.c
                 ; *
                 ; * Created: 11-Feb-20 5:39:55 PM
                 ; * Author: iavie
                 ; */
                 ;
                 ;// LCD config
                 ;#asm
                     .equ __lcd_port=0x11
                     .equ __lcd_EN=4
                     .equ __lcd_RS=5
                     .equ __lcd_D4=0
                     .equ __lcd_D5=1
                     .equ __lcd_D6=2
                     .equ __lcd_D7=3
                 ; 0000 0011 #endasm
                 ;
                 ;// DS1302 config
                 ;#asm
                 	.equ __ds1302_port=0x0B
                 	.equ __ds1302_io=2
                 	.equ __ds1302_sclk=1
                 	.equ __ds1302_rst=0
                 ; 0000 0019 #endasm
                 ;
                 ;#include <90usb1286.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <ds1302.h>
                 ;#include <display.h>
                 
                 	.CSEG
                 _SetupLCD:
                 ; .FSTART _SetupLCD
00008d 972c      	SBIW R28,12
00008e e08c      	LDI  R24,12
00008f e0a0      	LDI  R26,LOW(0)
000090 e0b0      	LDI  R27,HIGH(0)
000091 eaea      	LDI  R30,LOW(_0x3*2)
000092 e0f0      	LDI  R31,HIGH(_0x3*2)
000093 940e 081f 	CALL __INITLOCB
000095 930a      	ST   -Y,R16
                 ;	TableSetup -> Y+1
                 ;	i -> R16
                 ; 0000 001D     SBI __lcd_port-1,__lcd_EN
000096 9a84          SBI __lcd_port-1,__lcd_EN
000097 9a85          SBI __lcd_port-1,__lcd_RS
000098 9a80          SBI __lcd_port-1,__lcd_D4
000099 9a81          SBI __lcd_port-1,__lcd_D5
00009a 9a82          SBI __lcd_port-1,__lcd_D6
00009b 9a83          SBI __lcd_port-1,__lcd_D7
00009c e3a2      	LDI  R26,LOW(50)
00009d e0b0      	LDI  R27,0
00009e 940e 05ee 	CALL _delay_ms
0000a0 e000      	LDI  R16,LOW(0)
                 _0x5:
0000a1 300c      	CPI  R16,12
0000a2 f468      	BRSH _0x6
0000a3 940e 0576 	CALL SUBOPT_0x0
0000a5 2fe0      	MOV  R30,R16
0000a6 e0f0      	LDI  R31,0
0000a7 01de      	MOVW R26,R28
0000a8 9611      	ADIW R26,1
0000a9 0fae      	ADD  R26,R30
0000aa 1fbf      	ADC  R27,R31
0000ab 91ac      	LD   R26,X
0000ac 940e 057a 	CALL SUBOPT_0x1
0000ae 5f0f      	SUBI R16,-1
0000af cff1      	RJMP _0x5
                 _0x6:
0000b0 e0ec      	LDI  R30,LOW(12)
0000b1 93e0 0900 	STS  _cursor,R30
0000b3 91a0 0900 	LDS  R26,_cursor
0000b5 d021      	RCALL _WriteComandLCD
0000b6 8108      	LDD  R16,Y+0
0000b7 962d      	ADIW R28,13
0000b8 9508      	RET
                 ; .FEND
                 _PulseEn:
                 ; .FSTART _PulseEn
0000b9 9a8c          SBI __lcd_port,__lcd_EN  // EN=1;
0000ba 988c          CBI __lcd_port,__lcd_EN // EN=0;
0000bb 9508      	RET
                 ; .FEND
                 _SendDataBitsLCD:
                 ; .FSTART _SendDataBitsLCD
0000bc 93aa      	ST   -Y,R26
                 ;	dato -> Y+0
0000bd 81e8      	LD   R30,Y
0000be 70e8      	ANDI R30,LOW(0x8)
0000bf f011      	BREQ _0x7
0000c0 9a8b      	SBI __lcd_port,__lcd_D7
0000c1 c001      	RJMP _0x8
                 _0x7:
0000c2 988b      	CBI __lcd_port,__lcd_D7
                 _0x8:
0000c3 81e8      	LD   R30,Y
0000c4 70e4      	ANDI R30,LOW(0x4)
0000c5 f011      	BREQ _0x9
0000c6 9a8a      	SBI __lcd_port,__lcd_D6
0000c7 c001      	RJMP _0xA
                 _0x9:
0000c8 988a      	CBI __lcd_port,__lcd_D6
                 _0xA:
0000c9 81e8      	LD   R30,Y
0000ca 70e2      	ANDI R30,LOW(0x2)
0000cb f011      	BREQ _0xB
0000cc 9a89      	SBI __lcd_port,__lcd_D5
0000cd c001      	RJMP _0xC
                 _0xB:
0000ce 9889      	CBI __lcd_port,__lcd_D5
                 _0xC:
0000cf 81e8      	LD   R30,Y
0000d0 70e1      	ANDI R30,LOW(0x1)
0000d1 f011      	BREQ _0xD
0000d2 9a88      	SBI __lcd_port,__lcd_D4
0000d3 c001      	RJMP _0xE
                 _0xD:
0000d4 9888      	CBI __lcd_port,__lcd_D4
                 _0xE:
0000d5 940c 0339 	JMP  _0x20A0005
                 ; .FEND
                 _WriteComandLCD:
                 ; .FSTART _WriteComandLCD
0000d7 93aa      	ST   -Y,R26
0000d8 930a      	ST   -Y,R16
                 ;	Comando -> Y+1
                 ;	tempComando -> R16
0000d9 988d      	CBI __lcd_port,__lcd_RS
0000da 940e 0576 	CALL SUBOPT_0x0
0000dc 940e 057e 	CALL SUBOPT_0x2
0000de 940e 0585 	CALL SUBOPT_0x3
0000e0 dfd8      	RCALL _PulseEn
0000e1 8108      	LDD  R16,Y+0
0000e2 940c 0346 	JMP  _0x20A0004
                 ; .FEND
                 _CharLCD:
                 ; .FSTART _CharLCD
0000e4 93aa      	ST   -Y,R26
0000e5 930a      	ST   -Y,R16
                 ;	dato -> Y+1
                 ;	tempdato -> R16
0000e6 9a8d      	SBI __lcd_port,__lcd_RS
0000e7 940e 0576 	CALL SUBOPT_0x0
0000e9 940e 057e 	CALL SUBOPT_0x2
0000eb 940e 0585 	CALL SUBOPT_0x3
0000ed dfcb      	RCALL _PulseEn
0000ee 8108      	LDD  R16,Y+0
0000ef 940c 0346 	JMP  _0x20A0004
                 ; .FEND
                 ;	i -> R16
                 ;	tiempo -> Y+1
                 ;	i -> R16
                 _StringLCDVar:
                 ; .FSTART _StringLCDVar
0000f1 93ba      	ST   -Y,R27
0000f2 93aa      	ST   -Y,R26
0000f3 930a      	ST   -Y,R16
                 ;	Mensaje -> Y+1
                 ;	i -> R16
0000f4 e000      	LDI  R16,LOW(0)
                 _0x16:
0000f5 2fe0      	MOV  R30,R16
0000f6 5f0f      	SUBI R16,-1
0000f7 81a9      	LDD  R26,Y+1
0000f8 81ba      	LDD  R27,Y+1+1
0000f9 e0f0      	LDI  R31,0
0000fa 0fae      	ADD  R26,R30
0000fb 1fbf      	ADC  R27,R31
0000fc 91ac      	LD   R26,X
0000fd dfe6      	RCALL _CharLCD
0000fe 81a9      	LDD  R26,Y+1
0000ff 81ba      	LDD  R27,Y+1+1
000100 27ee      	CLR  R30
000101 0fa0      	ADD  R26,R16
000102 1fbe      	ADC  R27,R30
000103 91ec      	LD   R30,X
000104 30e0      	CPI  R30,0
000105 f779      	BRNE _0x16
000106 8108      	LDD  R16,Y+0
000107 940c 039c 	JMP  _0x20A0003
                 ; .FEND
                 _MoveCursor:
                 ; .FSTART _MoveCursor
000109 93aa      	ST   -Y,R26
                 ;	x -> Y+1
                 ;	y -> Y+0
00010a 81e8      	LD   R30,Y
00010b e0f0      	LDI  R31,0
00010c 9730      	SBIW R30,0
00010d f419      	BRNE _0x1B
00010e 81a9      	LDD  R26,Y+1
00010f 58a0      	SUBI R26,-LOW(128)
000110 c014      	RJMP _0x4D
                 _0x1B:
000111 30e1      	CPI  R30,LOW(0x1)
000112 e0a0      	LDI  R26,HIGH(0x1)
000113 07fa      	CPC  R31,R26
000114 f419      	BRNE _0x1C
000115 81a9      	LDD  R26,Y+1
000116 54a0      	SUBI R26,-LOW(192)
000117 c00d      	RJMP _0x4D
                 _0x1C:
000118 30e2      	CPI  R30,LOW(0x2)
000119 e0a0      	LDI  R26,HIGH(0x2)
00011a 07fa      	CPC  R31,R26
00011b f419      	BRNE _0x1D
00011c 81a9      	LDD  R26,Y+1
00011d 56ac      	SUBI R26,-LOW(148)
00011e c006      	RJMP _0x4D
                 _0x1D:
00011f 30e3      	CPI  R30,LOW(0x3)
000120 e0a0      	LDI  R26,HIGH(0x3)
000121 07fa      	CPC  R31,R26
000122 f419      	BRNE _0x1A
000123 81a9      	LDD  R26,Y+1
000124 52ac      	SUBI R26,-LOW(212)
                 _0x4D:
000125 dfb1      	RCALL _WriteComandLCD
                 _0x1A:
000126 940c 0346 	JMP  _0x20A0004
                 ; .FEND
                 ;	NoCaracter -> Y+3
                 ;	datos -> Y+1
                 ;	i -> R16
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;// Alarm
                 ;
                 ;unsigned char alarmFlag; // Alarm flag to turn alarm on and off
                 ;eeprom unsigned char AH, AM; // Variables for alarm on EEPROM
                 ;
                 ;unsigned char H=0,M=0,S=0; // Variables for clock
                 ;
                 ;unsigned char time[16];
                 ;
                 ;// ADC
                 ;
                 ;// ADC variables
                 ;float temperature;
                 ;unsigned int Temp;
                 ;
                 ;// Voltage Reference: Int., cap. on AREF
                 ;#define ADC_VREF_TYPE ((1<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0036 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0037 ADMUX=adc_input | ADC_VREF_TYPE;
000128 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000129 81e8      	LD   R30,Y
00012a 6ce0      	ORI  R30,LOW(0xC0)
00012b 93e0 007c 	STS  124,R30
                 ; 0000 0038 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0039 delay_us(10);
                +
00012d e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00012e 958a     +DEC R24
00012f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 003A // Start the AD conversion
                 ; 0000 003B ADCSRA|=(1<<ADSC);
000130 91e0 007a 	LDS  R30,122
000132 64e0      	ORI  R30,0x40
000133 93e0 007a 	STS  122,R30
                 ; 0000 003C // Wait for the AD conversion to complete
                 ; 0000 003D while ((ADCSRA & (1<<ADIF))==0);
                 _0x22:
000135 91e0 007a 	LDS  R30,122
000137 71e0      	ANDI R30,LOW(0x10)
000138 f3e1      	BREQ _0x22
                 ; 0000 003E ADCSRA|=(1<<ADIF);
000139 91e0 007a 	LDS  R30,122
00013b 61e0      	ORI  R30,0x10
00013c 93e0 007a 	STS  122,R30
                 ; 0000 003F return ADCW;
00013e 91e0 0078 	LDS  R30,120
000140 91f0 0079 	LDS  R31,120+1
000142 940c 0339 	JMP  _0x20A0005
                 ; 0000 0040 }
                 ; .FEND
                 ;
                 ;
                 ;// Update ADC function
                 ;void updateADC(){
                 ; 0000 0044 void updateADC(){
                 _updateADC:
                 ; .FSTART _updateADC
                 ; 0000 0045     // Convert ADC values to temperature
                 ; 0000 0046     temperature = (read_adc(7)*256.0)/1024.0; // Agus nos dio esta funcion
000144 e0a7      	LDI  R26,LOW(7)
000145 dfe2      	RCALL _read_adc
000146 2766      	CLR  R22
000147 2777      	CLR  R23
000148 940e 065e 	CALL __CDF1
                +
00014a e0a0     +LDI R26 , LOW ( 0x43800000 )
00014b e0b0     +LDI R27 , HIGH ( 0x43800000 )
00014c e880     +LDI R24 , BYTE3 ( 0x43800000 )
00014d e493     +LDI R25 , BYTE4 ( 0x43800000 )
                 	__GETD2N 0x43800000
00014e 940e 06e3 	CALL __MULF12
000150 01df      	MOVW R26,R30
000151 01cb      	MOVW R24,R22
                +
000152 e0e0     +LDI R30 , LOW ( 0x44800000 )
000153 e0f0     +LDI R31 , HIGH ( 0x44800000 )
000154 e860     +LDI R22 , BYTE3 ( 0x44800000 )
000155 e474     +LDI R23 , BYTE4 ( 0x44800000 )
                 	__GETD1N 0x44800000
000156 940e 0731 	CALL __DIVF21
000158 93e0 0915 	STS  _temperature,R30
00015a 93f0 0916 	STS  _temperature+1,R31
00015c 9360 0917 	STS  _temperature+2,R22
00015e 9370 0918 	STS  _temperature+3,R23
                 ; 0000 0047     Temp = temperature;
000160 e1a9      	LDI  R26,LOW(_Temp)
000161 e0b9      	LDI  R27,HIGH(_Temp)
000162 940e 0625 	CALL __CFD1U
000164 93ed      	ST   X+,R30
000165 93fc      	ST   X,R31
                 ; 0000 0048     // TEMPORAL print statement for DEV purposes only
                 ; 0000 0049 }
000166 9508      	RET
                 ; .FEND
                 ;
                 ;// Counter
                 ;unsigned char i=0;
                 ;
                 ;// Tone
                 ;// Play frequency function
                 ;void tono(float freq){
                 ; 0000 0050 void tono(float freq){
                 _tono:
                 ; .FSTART _tono
                 ; 0000 0051     if(freq == 0)
000167 940e 07de 	CALL __PUTPARD2
                 ;	freq -> Y+0
000169 940e 07d4 	CALL __GETD1S0
00016b 940e 080d 	CALL __CPD10
00016d f421      	BRNE _0x25
                 ; 0000 0052         TCCR1B=0x00;
00016e e0e0      	LDI  R30,LOW(0)
00016f 93e0 0081 	STS  129,R30
                 ; 0000 0053     else{
000171 c042      	RJMP _0x26
                 _0x25:
                 ; 0000 0054         float cuentas;
                 ; 0000 0055         unsigned int cuentasEnt;
                 ; 0000 0056 
                 ; 0000 0057         cuentas = 500000.0/freq;
000172 9726      	SBIW R28,6
                 ;	freq -> Y+6
                 ;	cuentas -> Y+2
                 ;	cuentasEnt -> Y+0
                +
000173 81ee     +LDD R30 , Y + 6
000174 81ff     +LDD R31 , Y + 6 + 1
000175 8568     +LDD R22 , Y + 6 + 2
000176 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
000177 e0a0     +LDI R26 , LOW ( 0x48F42400 )
000178 e2b4     +LDI R27 , HIGH ( 0x48F42400 )
000179 ef84     +LDI R24 , BYTE3 ( 0x48F42400 )
00017a e498     +LDI R25 , BYTE4 ( 0x48F42400 )
                 	__GETD2N 0x48F42400
00017b 940e 0731 	CALL __DIVF21
                +
00017d 83ea     +STD Y + 2 , R30
00017e 83fb     +STD Y + 2 + 1 , R31
00017f 836c     +STD Y + 2 + 2 , R22
000180 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 0058         cuentasEnt = cuentas;
000181 01de      	MOVW R26,R28
000182 940e 0625 	CALL __CFD1U
000184 93ed      	ST   X+,R30
000185 93fc      	ST   X,R31
                 ; 0000 0059         if(cuentas-cuentasEnt>=0.5)
000186 81e8      	LD   R30,Y
000187 81f9      	LDD  R31,Y+1
                +
000188 81aa     +LDD R26 , Y + 2
000189 81bb     +LDD R27 , Y + 2 + 1
00018a 818c     +LDD R24 , Y + 2 + 2
00018b 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
00018c 2766      	CLR  R22
00018d 2777      	CLR  R23
00018e 940e 065e 	CALL __CDF1
000190 940e 07e3 	CALL __SWAPD12
000192 940e 0691 	CALL __SUBF12
000194 01df      	MOVW R26,R30
000195 01cb      	MOVW R24,R22
                +
000196 e0e0     +LDI R30 , LOW ( 0x3F000000 )
000197 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
000198 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
000199 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
00019a 940e 0776 	CALL __CMPF12
00019c f028      	BRLO _0x27
                 ; 0000 005A             cuentasEnt++;
00019d 81e8      	LD   R30,Y
00019e 81f9      	LDD  R31,Y+1
00019f 9631      	ADIW R30,1
0001a0 83e8      	ST   Y,R30
0001a1 83f9      	STD  Y+1,R31
                 ; 0000 005B         OCR1AH=(cuentasEnt-1)/256;
                 _0x27:
0001a2 81e8      	LD   R30,Y
0001a3 81f9      	LDD  R31,Y+1
0001a4 9731      	SBIW R30,1
0001a5 2fef      	MOV  R30,R31
0001a6 e0f0      	LDI  R31,0
0001a7 93e0 0089 	STS  137,R30
                 ; 0000 005C         OCR1AL=(cuentasEnt-1)%256;
0001a9 81e8      	LD   R30,Y
0001aa 50e1      	SUBI R30,LOW(1)
0001ab 93e0 0088 	STS  136,R30
                 ; 0000 005D         TCCR1A=0x40;    // Timer 1 en modo de CTC
0001ad e4e0      	LDI  R30,LOW(64)
0001ae 93e0 0080 	STS  128,R30
                 ; 0000 005E         TCCR1B=0x09;    // Timer en CK (sin pre-escalador)
0001b0 e0e9      	LDI  R30,LOW(9)
0001b1 93e0 0081 	STS  129,R30
                 ; 0000 005F     }
0001b3 9626      	ADIW R28,6
                 _0x26:
                 ; 0000 0060 }
0001b4 9624      	ADIW R28,4
0001b5 9508      	RET
                 ; .FEND
                 ;
                 ;int k=0;
                 ;char kFlag=0;
                 ;
                 ;// Play tone or song function
                 ;void playTone(){
                 ; 0000 0066 void playTone(){
                 _playTone:
                 ; .FSTART _playTone
                 ; 0000 0067     tono(k);
0001b6 940e 058c 	CALL SUBOPT_0x4
0001b8 940e 07a6 	CALL __CWD1
0001ba 940e 065e 	CALL __CDF1
0001bc 01df      	MOVW R26,R30
0001bd 01cb      	MOVW R24,R22
0001be dfa8      	RCALL _tono
                 ; 0000 0068     if(kFlag==0)
0001bf 91e0 091e 	LDS  R30,_kFlag
0001c1 30e0      	CPI  R30,0
0001c2 f421      	BRNE _0x28
                 ; 0000 0069         k+=50;
0001c3 940e 058c 	CALL SUBOPT_0x4
0001c5 96f2      	ADIW R30,50
0001c6 c003      	RJMP _0x4E
                 ; 0000 006A     else
                 _0x28:
                 ; 0000 006B         k-=50;
0001c7 940e 058c 	CALL SUBOPT_0x4
0001c9 97f2      	SBIW R30,50
                 _0x4E:
0001ca 93e0 091c 	STS  _k,R30
0001cc 93f0 091d 	STS  _k+1,R31
                 ; 0000 006C     if(k>500)
0001ce 91a0 091c 	LDS  R26,_k
0001d0 91b0 091d 	LDS  R27,_k+1
0001d2 3fa5      	CPI  R26,LOW(0x1F5)
0001d3 e0e1      	LDI  R30,HIGH(0x1F5)
0001d4 07be      	CPC  R27,R30
0001d5 f014      	BRLT _0x2A
                 ; 0000 006D         kFlag=1;
0001d6 e0e1      	LDI  R30,LOW(1)
0001d7 c007      	RJMP _0x4F
                 ; 0000 006E     else if (k<=50)
                 _0x2A:
0001d8 91a0 091c 	LDS  R26,_k
0001da 91b0 091d 	LDS  R27,_k+1
0001dc 97d3      	SBIW R26,51
0001dd f41c      	BRGE _0x2C
                 ; 0000 006F         kFlag=0;
0001de e0e0      	LDI  R30,LOW(0)
                 _0x4F:
0001df 93e0 091e 	STS  _kFlag,R30
                 ; 0000 0070 }
                 _0x2C:
0001e1 9508      	RET
                 ; .FEND
                 ;
                 ;// LCD
                 ;void printTime(){
                 ; 0000 0073 void printTime(){
                 _printTime:
                 ; .FSTART _printTime
                 ; 0000 0074     sprintf(time, "H:%02i:%02i:%02i T:%02i", H, M, S, Temp);
0001e2 e0e5      	LDI  R30,LOW(_time)
0001e3 e0f9      	LDI  R31,HIGH(_time)
0001e4 93fa      	ST   -Y,R31
0001e5 93ea      	ST   -Y,R30
                +
0001e6 ebe6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001e7 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001e8 93fa      	ST   -Y,R31
0001e9 93ea      	ST   -Y,R30
0001ea 91e0 0902 	LDS  R30,_H
0001ec 940e 0591 	CALL SUBOPT_0x5
0001ee 91e0 0903 	LDS  R30,_M
0001f0 940e 0591 	CALL SUBOPT_0x5
0001f2 91e0 0904 	LDS  R30,_S
0001f4 940e 0591 	CALL SUBOPT_0x5
0001f6 91e0 0919 	LDS  R30,_Temp
0001f8 91f0 091a 	LDS  R31,_Temp+1
0001fa 2766      	CLR  R22
0001fb 2777      	CLR  R23
0001fc 940e 07d9 	CALL __PUTPARD1
0001fe e180      	LDI  R24,16
0001ff 940e 0512 	CALL _sprintf
000201 9664      	ADIW R28,20
                 ; 0000 0075     MoveCursor(0,0);
000202 e0e0      	LDI  R30,LOW(0)
000203 93ea      	ST   -Y,R30
000204 e0a0      	LDI  R26,LOW(0)
000205 940e 0597 	CALL SUBOPT_0x6
                 ; 0000 0076     StringLCDVar(time);
                 ; 0000 0077     sprintf(time, "A: %02i:%02i   ", AH, AM);
000207 e0e5      	LDI  R30,LOW(_time)
000208 e0f9      	LDI  R31,HIGH(_time)
000209 93fa      	ST   -Y,R31
00020a 93ea      	ST   -Y,R30
                +
00020b ecee     +LDI R30 , LOW ( 2 * _0x0 + ( 24 ) )
00020c e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 24 ) )
                 	__POINTW1FN _0x0,24
00020d 93fa      	ST   -Y,R31
00020e 93ea      	ST   -Y,R30
00020f 940e 059d 	CALL SUBOPT_0x7
000211 940e 0591 	CALL SUBOPT_0x5
000213 940e 05a2 	CALL SUBOPT_0x8
000215 940e 0591 	CALL SUBOPT_0x5
000217 e088      	LDI  R24,8
000218 940e 0512 	CALL _sprintf
00021a 962c      	ADIW R28,12
                 ; 0000 0078     MoveCursor(0,1);
00021b e0e0      	LDI  R30,LOW(0)
00021c 93ea      	ST   -Y,R30
00021d e0a1      	LDI  R26,LOW(1)
00021e 940e 0597 	CALL SUBOPT_0x6
                 ; 0000 0079     StringLCDVar(time);
                 ; 0000 007A }
000220 9508      	RET
                 ; .FEND
                 ;
                 ;// Clock
                 ;void updateClock(){
                 ; 0000 007D void updateClock(){
                 _updateClock:
                 ; .FSTART _updateClock
                 ; 0000 007E     rtc_get_time(&H, &M, &S);
000221 940e 05a7 	CALL SUBOPT_0x9
                 ; 0000 007F }
000223 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0082 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0083 
                 ; 0000 0084 // ADC initialization
                 ; 0000 0085 // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0086 // ADC Voltage Reference: Int., cap. on AREF
                 ; 0000 0087 // ADC High Speed Mode: On
                 ; 0000 0088 // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 0089 // ADC4: On, ADC5: On, ADC6: On, ADC7: Off
                 ; 0000 008A DIDR0=(1<<ADC7D) | (0<<ADC6D) | (0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
000224 e8e0      	LDI  R30,LOW(128)
000225 93e0 007e 	STS  126,R30
                 ; 0000 008B ADMUX=ADC_VREF_TYPE;
000227 ece0      	LDI  R30,LOW(192)
000228 93e0 007c 	STS  124,R30
                 ; 0000 008C ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
00022a e8e3      	LDI  R30,LOW(131)
00022b 93e0 007a 	STS  122,R30
                 ; 0000 008D ADCSRB=(1<<ADHSM);
00022d e8e0      	LDI  R30,LOW(128)
00022e 93e0 007b 	STS  123,R30
                 ; 0000 008E 
                 ; 0000 008F // LCD
                 ; 0000 0090 
                 ; 0000 0091 SetupLCD();
000230 940e 008d 	CALL _SetupLCD
                 ; 0000 0092 
                 ; 0000 0093 // DS1302
                 ; 0000 0094 rtc_init(0,0,0);
000232 e0e0      	LDI  R30,LOW(0)
000233 93ea      	ST   -Y,R30
000234 93ea      	ST   -Y,R30
000235 e0a0      	LDI  R26,LOW(0)
000236 940e 0348 	CALL _rtc_init
                 ; 0000 0095 
                 ; 0000 0096 // Tone
                 ; 0000 0097 DDRB.5=1;
000238 9a25      	SBI  0x4,5
                 ; 0000 0098 
                 ; 0000 0099 // First actions
                 ; 0000 009A PORTC = 0x0F;
000239 e0ef      	LDI  R30,LOW(15)
00023a b9e8      	OUT  0x8,R30
                 ; 0000 009B rtc_get_time(&H, &M, &S);
00023b 940e 05a7 	CALL SUBOPT_0x9
                 ; 0000 009C printTime();
00023d dfa4      	RCALL _printTime
                 ; 0000 009D 
                 ; 0000 009E while (1){
                 _0x2F:
                 ; 0000 009F     // Please write your application code here
                 ; 0000 00A0 
                 ; 0000 00A1         // Counter
                 ; 0000 00A2         delay_ms(50);
00023e e3a2      	LDI  R26,LOW(50)
00023f e0b0      	LDI  R27,0
000240 940e 05ee 	CALL _delay_ms
                 ; 0000 00A3         i++;
000242 91e0 091b 	LDS  R30,_i
000244 5fef      	SUBI R30,-LOW(1)
000245 93e0 091b 	STS  _i,R30
                 ; 0000 00A4 
                 ; 0000 00A5         // ADC
                 ; 0000 00A6         updateADC();
000247 defc      	RCALL _updateADC
                 ; 0000 00A7 
                 ; 0000 00A8         // Update clock
                 ; 0000 00A9         updateClock();
000248 dfd8      	RCALL _updateClock
                 ; 0000 00AA         // Print values un LCD display
                 ; 0000 00AB         printTime();
000249 df98      	RCALL _printTime
                 ; 0000 00AC 
                 ; 0000 00AD         // 100 ms delay
                 ; 0000 00AE         if(i%2==0){
00024a 91a0 091b 	LDS  R26,_i
00024c 27bb      	CLR  R27
00024d e0e2      	LDI  R30,LOW(2)
00024e e0f0      	LDI  R31,HIGH(2)
00024f 940e 07be 	CALL __MODW21
000251 9730      	SBIW R30,0
000252 f459      	BRNE _0x32
                 ; 0000 00AF            if(alarmFlag==1) {
000253 91a0 0901 	LDS  R26,_alarmFlag
000255 30a1      	CPI  R26,LOW(0x1)
000256 f411      	BRNE _0x33
                 ; 0000 00B0             playTone();
000257 df5e      	RCALL _playTone
                 ; 0000 00B1            }
                 ; 0000 00B2            else
000258 c005      	RJMP _0x34
                 _0x33:
                 ; 0000 00B3             tono(0);
                +
000259 e0a0     +LDI R26 , LOW ( 0x0 )
00025a e0b0     +LDI R27 , HIGH ( 0x0 )
00025b e080     +LDI R24 , BYTE3 ( 0x0 )
00025c e090     +LDI R25 , BYTE4 ( 0x0 )
                 	__GETD2N 0x0
00025d df09      	RCALL _tono
                 ; 0000 00B4         }
                 _0x34:
                 ; 0000 00B5 
                 ; 0000 00B6         // 500 ms delay, reset counter
                 ; 0000 00B7         if(i%10==0)
                 _0x32:
00025e 91a0 091b 	LDS  R26,_i
000260 27bb      	CLR  R27
000261 e0ea      	LDI  R30,LOW(10)
000262 e0f0      	LDI  R31,HIGH(10)
000263 940e 07be 	CALL __MODW21
000265 9730      	SBIW R30,0
000266 f419      	BRNE _0x35
                 ; 0000 00B8             i=0;
000267 e0e0      	LDI  R30,LOW(0)
000268 93e0 091b 	STS  _i,R30
                 ; 0000 00B9         // Turns alarm flag on when H, M and S match
                 ; 0000 00BA         if(S==0 && M==AM && H==AH)
                 _0x35:
00026a 91a0 0904 	LDS  R26,_S
00026c 30a0      	CPI  R26,LOW(0x0)
00026d f461      	BRNE _0x37
00026e 940e 05a2 	CALL SUBOPT_0x8
000270 91a0 0903 	LDS  R26,_M
000272 17ea      	CP   R30,R26
000273 f431      	BRNE _0x37
000274 940e 059d 	CALL SUBOPT_0x7
000276 91a0 0902 	LDS  R26,_H
000278 17ea      	CP   R30,R26
000279 f009      	BREQ _0x38
                 _0x37:
00027a c003      	RJMP _0x36
                 _0x38:
                 ; 0000 00BB             alarmFlag=1;
00027b e0e1      	LDI  R30,LOW(1)
00027c 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00BC 
                 ; 0000 00BD         // Clock
                 ; 0000 00BE 
                 ; 0000 00BF         // If alarm is on, switch will turn alarm off without
                 ; 0000 00C0         //  changing the default variable
                 ; 0000 00C1         if(!PINC.0){
                 _0x36:
00027e 9930      	SBIC 0x6,0
00027f c00f      	RJMP _0x39
                 ; 0000 00C2             if(alarmFlag==1)
000280 91a0 0901 	LDS  R26,_alarmFlag
000282 30a1      	CPI  R26,LOW(0x1)
000283 f421      	BRNE _0x3A
                 ; 0000 00C3                 alarmFlag = 0;
000284 e0e0      	LDI  R30,LOW(0)
000285 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00C4             else{
000287 c007      	RJMP _0x3B
                 _0x3A:
                 ; 0000 00C5                 H++;
000288 91e0 0902 	LDS  R30,_H
00028a 5fef      	SUBI R30,-LOW(1)
00028b 93e0 0902 	STS  _H,R30
                 ; 0000 00C6                 rtc_set_time(H, M, S);
00028d 940e 05b3 	CALL SUBOPT_0xA
                 ; 0000 00C7             }
                 _0x3B:
                 ; 0000 00C8         }
                 ; 0000 00C9         // If alarm is on, switch will turn alarm off without
                 ; 0000 00CA         //  changing the default variable
                 ; 0000 00CB         if(!PINC.1){
                 _0x39:
00028f 9931      	SBIC 0x6,1
000290 c00f      	RJMP _0x3C
                 ; 0000 00CC             if(alarmFlag==1)
000291 91a0 0901 	LDS  R26,_alarmFlag
000293 30a1      	CPI  R26,LOW(0x1)
000294 f421      	BRNE _0x3D
                 ; 0000 00CD                 alarmFlag = 0;
000295 e0e0      	LDI  R30,LOW(0)
000296 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00CE             else{
000298 c007      	RJMP _0x3E
                 _0x3D:
                 ; 0000 00CF                 M++;
000299 91e0 0903 	LDS  R30,_M
00029b 5fef      	SUBI R30,-LOW(1)
00029c 93e0 0903 	STS  _M,R30
                 ; 0000 00D0                 rtc_set_time(H, M, S);
00029e 940e 05b3 	CALL SUBOPT_0xA
                 ; 0000 00D1             }
                 _0x3E:
                 ; 0000 00D2         }
                 ; 0000 00D3         // Verify the correct range on clock time
                 ; 0000 00D4         if(S>59)
                 _0x3C:
0002a0 91a0 0904 	LDS  R26,_S
0002a2 33ac      	CPI  R26,LOW(0x3C)
0002a3 f018      	BRLO _0x3F
                 ; 0000 00D5             S=0;
0002a4 e0e0      	LDI  R30,LOW(0)
0002a5 93e0 0904 	STS  _S,R30
                 ; 0000 00D6         if(M>59)
                 _0x3F:
0002a7 91a0 0903 	LDS  R26,_M
0002a9 33ac      	CPI  R26,LOW(0x3C)
0002aa f018      	BRLO _0x40
                 ; 0000 00D7             M=0;
0002ab e0e0      	LDI  R30,LOW(0)
0002ac 93e0 0903 	STS  _M,R30
                 ; 0000 00D8         if(H>23)
                 _0x40:
0002ae 91a0 0902 	LDS  R26,_H
0002b0 31a8      	CPI  R26,LOW(0x18)
0002b1 f018      	BRLO _0x41
                 ; 0000 00D9             H=0;
0002b2 e0e0      	LDI  R30,LOW(0)
0002b3 93e0 0902 	STS  _H,R30
                 ; 0000 00DA         if(AM>59)
                 _0x41:
0002b5 940e 05a2 	CALL SUBOPT_0x8
0002b7 33ec      	CPI  R30,LOW(0x3C)
0002b8 f028      	BRLO _0x42
                 ; 0000 00DB             AM=0;
0002b9 e0a1      	LDI  R26,LOW(_AM)
0002ba e0b0      	LDI  R27,HIGH(_AM)
0002bb e0e0      	LDI  R30,LOW(0)
0002bc 940e 07fc 	CALL __EEPROMWRB
                 ; 0000 00DC         if(AH>23)
                 _0x42:
0002be 940e 059d 	CALL SUBOPT_0x7
0002c0 31e8      	CPI  R30,LOW(0x18)
0002c1 f028      	BRLO _0x43
                 ; 0000 00DD             AH=0;
0002c2 e0a0      	LDI  R26,LOW(_AH)
0002c3 e0b0      	LDI  R27,HIGH(_AH)
0002c4 e0e0      	LDI  R30,LOW(0)
0002c5 940e 07fc 	CALL __EEPROMWRB
                 ; 0000 00DE 
                 ; 0000 00DF         // Alarm
                 ; 0000 00E0 
                 ; 0000 00E1         // If alarm is on, switch will turn alarm off without
                 ; 0000 00E2         //  changing the default variable
                 ; 0000 00E3         if(!PINC.2){
                 _0x43:
0002c7 9932      	SBIC 0x6,2
0002c8 c00d      	RJMP _0x44
                 ; 0000 00E4             if(alarmFlag==1)
0002c9 91a0 0901 	LDS  R26,_alarmFlag
0002cb 30a1      	CPI  R26,LOW(0x1)
0002cc f421      	BRNE _0x45
                 ; 0000 00E5                 alarmFlag = 0;
0002cd e0e0      	LDI  R30,LOW(0)
0002ce 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00E6             else
0002d0 c005      	RJMP _0x46
                 _0x45:
                 ; 0000 00E7                 AH++;
0002d1 940e 059d 	CALL SUBOPT_0x7
0002d3 5fef      	SUBI R30,-LOW(1)
0002d4 940e 07fc 	CALL __EEPROMWRB
                 ; 0000 00E8         }
                 _0x46:
                 ; 0000 00E9         // If alarm is on, switch will turn alarm off without
                 ; 0000 00EA         //  changing the default variable
                 ; 0000 00EB         if(!PINC.3){
                 _0x44:
0002d6 9933      	SBIC 0x6,3
0002d7 c00d      	RJMP _0x47
                 ; 0000 00EC             if(alarmFlag==1)
0002d8 91a0 0901 	LDS  R26,_alarmFlag
0002da 30a1      	CPI  R26,LOW(0x1)
0002db f421      	BRNE _0x48
                 ; 0000 00ED                 alarmFlag = 0;
0002dc e0e0      	LDI  R30,LOW(0)
0002dd 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00EE             else
0002df c005      	RJMP _0x49
                 _0x48:
                 ; 0000 00EF                 AM++;
0002e0 940e 05a2 	CALL SUBOPT_0x8
0002e2 5fef      	SUBI R30,-LOW(1)
0002e3 940e 07fc 	CALL __EEPROMWRB
                 ; 0000 00F0         }
                 _0x49:
                 ; 0000 00F1         // Verify the correct range on alarm time
                 ; 0000 00F2         if(AM>59)
                 _0x47:
0002e5 940e 05a2 	CALL SUBOPT_0x8
0002e7 33ec      	CPI  R30,LOW(0x3C)
0002e8 f028      	BRLO _0x4A
                 ; 0000 00F3             AM=0;
0002e9 e0a1      	LDI  R26,LOW(_AM)
0002ea e0b0      	LDI  R27,HIGH(_AM)
0002eb e0e0      	LDI  R30,LOW(0)
0002ec 940e 07fc 	CALL __EEPROMWRB
                 ; 0000 00F4         if(AH>23)
                 _0x4A:
0002ee 940e 059d 	CALL SUBOPT_0x7
0002f0 31e8      	CPI  R30,LOW(0x18)
0002f1 f028      	BRLO _0x4B
                 ; 0000 00F5             AH=0;
0002f2 e0a0      	LDI  R26,LOW(_AH)
0002f3 e0b0      	LDI  R27,HIGH(_AH)
0002f4 e0e0      	LDI  R30,LOW(0)
0002f5 940e 07fc 	CALL __EEPROMWRB
                 ; 0000 00F6     }
                 _0x4B:
0002f7 cf46      	RJMP _0x2F
                 ; 0000 00F7 }
                 _0x4C:
0002f8 cfff      	RJMP _0x4C
                 ; .FEND
                 
                 	.CSEG
                 _ds1302_rst0_G100:
                 ; .FSTART _ds1302_rst0_G100
0002f9 9858      	cbi  __ds1302_port,__ds1302_rst
                +
0002fa e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002fb 958a     +DEC R24
0002fc f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002fd 9508      	RET
                 ; .FEND
                 _ds1302_write0_G100:
                 ; .FSTART _ds1302_write0_G100
0002fe 93aa      	ST   -Y,R26
0002ff 9a51          sbi  __ds1302_port-1,__ds1302_sclk
000300 9a52          sbi  __ds1302_port-1,__ds1302_io
000301 9a50          sbi  __ds1302_port-1,__ds1302_rst
000302 9a58          sbi  __ds1302_port,__ds1302_rst
                +
000303 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000304 958a     +DEC R24
000305 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000306 81a8      	LD   R26,Y
000307 d002      	RCALL _ds1302_write1_G100
000308 940c 0339 	JMP  _0x20A0005
                 ; .FEND
                 _ds1302_write1_G100:
                 ; .FSTART _ds1302_write1_G100
00030a 93aa      	ST   -Y,R26
00030b 91e9          ld   r30,y+
00030c e0a8          ldi  r26,8
                 ds1302_write2:
00030d 95e7          ror  r30
00030e 985a          cbi  __ds1302_port,__ds1302_io
00030f f408          brcc ds1302_write3
000310 9a5a          sbi  __ds1302_port,__ds1302_io
                 ds1302_write3:
000311 0000          nop
000312 0000          nop
000313 0000          nop
000314 0000          nop
000315 9a59          sbi  __ds1302_port,__ds1302_sclk
                +
000316 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
000317 958a     +DEC R24
000318 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
000319 9859      	cbi  __ds1302_port,__ds1302_sclk
                +
00031a e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
00031b 958a     +DEC R24
00031c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
00031d 95aa          dec  r26
00031e f771          brne ds1302_write2
00031f 9508          ret
                 ; .FEND
                 _ds1302_read:
                 ; .FSTART _ds1302_read
000320 93aa      	ST   -Y,R26
000321 81e8      	LD   R30,Y
000322 60e1      	ORI  R30,1
000323 2fae      	MOV  R26,R30
000324 940e 02fe 	CALL _ds1302_write0_G100
000326 985a          cbi  __ds1302_port,__ds1302_io
000327 9852          cbi  __ds1302_port-1,__ds1302_io
000328 e0a8          ldi  r26,8
                 ds1302_read0:
000329 9488          clc
00032a 994a      	sbic __ds1302_port-2,__ds1302_io
00032b 9408          sec
00032c 95e7          ror  r30
00032d 9a59          sbi  __ds1302_port,__ds1302_sclk
                +
00032e e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
00032f 958a     +DEC R24
000330 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
000331 9859      	cbi  __ds1302_port,__ds1302_sclk
                +
000332 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
000333 958a     +DEC R24
000334 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
000335 95aa          dec  r26
000336 f791          brne ds1302_read0
000337 940e 02f9 	CALL _ds1302_rst0_G100
                 _0x20A0005:
000339 9621      	ADIW R28,1
00033a 9508      	RET
                 ; .FEND
                 _ds1302_write:
                 ; .FSTART _ds1302_write
00033b 93aa      	ST   -Y,R26
00033c 81e9      	LDD  R30,Y+1
00033d 7fee      	ANDI R30,0xFE
00033e 2fae      	MOV  R26,R30
00033f 940e 02fe 	CALL _ds1302_write0_G100
000341 81a8      	LD   R26,Y
000342 940e 030a 	CALL _ds1302_write1_G100
000344 940e 02f9 	CALL _ds1302_rst0_G100
                 _0x20A0004:
000346 9622      	ADIW R28,2
000347 9508      	RET
                 ; .FEND
                 _rtc_init:
                 ; .FSTART _rtc_init
000348 93aa      	ST   -Y,R26
000349 81e8      	LD   R30,Y
00034a 70e3      	ANDI R30,LOW(0x3)
00034b 83e8      	ST   Y,R30
00034c 81ea      	LDD  R30,Y+2
00034d 30e0      	CPI  R30,0
00034e f019      	BREQ _0x2000003
00034f 81e8      	LD   R30,Y
000350 6ae0      	ORI  R30,LOW(0xA0)
000351 83e8      	ST   Y,R30
                 _0x2000003:
000352 81a9      	LDD  R26,Y+1
000353 30a1      	CPI  R26,LOW(0x1)
000354 f419      	BRNE _0x2000004
000355 81e8      	LD   R30,Y
000356 60e4      	ORI  R30,4
000357 c007      	RJMP _0x2000008
                 _0x2000004:
000358 81a9      	LDD  R26,Y+1
000359 30a2      	CPI  R26,LOW(0x2)
00035a f419      	BRNE _0x2000006
00035b 81e8      	LD   R30,Y
00035c 60e8      	ORI  R30,8
00035d c001      	RJMP _0x2000008
                 _0x2000006:
00035e e0e0      	LDI  R30,LOW(0)
                 _0x2000008:
00035f 83e8      	ST   Y,R30
000360 e8ee      	LDI  R30,LOW(142)
000361 93ea      	ST   -Y,R30
000362 e0a0      	LDI  R26,LOW(0)
000363 dfd7      	RCALL _ds1302_write
000364 e9e0      	LDI  R30,LOW(144)
000365 93ea      	ST   -Y,R30
000366 81a9      	LDD  R26,Y+1
000367 c02f      	RJMP _0x20A0002
                 ; .FEND
                 _rtc_get_time:
                 ; .FSTART _rtc_get_time
000368 93ba      	ST   -Y,R27
000369 93aa      	ST   -Y,R26
00036a e8a5      	LDI  R26,LOW(133)
00036b 940e 05bd 	CALL SUBOPT_0xB
00036d 81ac      	LDD  R26,Y+4
00036e 81bd      	LDD  R27,Y+4+1
00036f 93ec      	ST   X,R30
000370 e8a3      	LDI  R26,LOW(131)
000371 940e 05bd 	CALL SUBOPT_0xB
000373 81aa      	LDD  R26,Y+2
000374 81bb      	LDD  R27,Y+2+1
000375 93ec      	ST   X,R30
000376 e8a1      	LDI  R26,LOW(129)
000377 940e 05bd 	CALL SUBOPT_0xB
000379 81a8      	LD   R26,Y
00037a 81b9      	LDD  R27,Y+1
00037b 93ec      	ST   X,R30
00037c 9626      	ADIW R28,6
00037d 9508      	RET
                 ; .FEND
                 _rtc_set_time:
                 ; .FSTART _rtc_set_time
00037e 93aa      	ST   -Y,R26
00037f e8ee      	LDI  R30,LOW(142)
000380 93ea      	ST   -Y,R30
000381 e0a0      	LDI  R26,LOW(0)
000382 dfb8      	RCALL _ds1302_write
000383 e8e4      	LDI  R30,LOW(132)
000384 93ea      	ST   -Y,R30
000385 81ab      	LDD  R26,Y+3
000386 940e 0553 	CALL _bin2bcd
000388 2fae      	MOV  R26,R30
000389 dfb1      	RCALL _ds1302_write
00038a e8e2      	LDI  R30,LOW(130)
00038b 93ea      	ST   -Y,R30
00038c 81aa      	LDD  R26,Y+2
00038d 940e 0553 	CALL _bin2bcd
00038f 2fae      	MOV  R26,R30
000390 dfaa      	RCALL _ds1302_write
000391 e8e0      	LDI  R30,LOW(128)
000392 93ea      	ST   -Y,R30
000393 81a9      	LDD  R26,Y+1
000394 940e 0553 	CALL _bin2bcd
000396 2fae      	MOV  R26,R30
                 _0x20A0002:
000397 dfa3      	RCALL _ds1302_write
000398 e8ee      	LDI  R30,LOW(142)
000399 93ea      	ST   -Y,R30
00039a e8a0      	LDI  R26,LOW(128)
00039b df9f      	RCALL _ds1302_write
                 _0x20A0003:
00039c 9623      	ADIW R28,3
00039d 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
00039e 93ba      	ST   -Y,R27
00039f 93aa      	ST   -Y,R26
0003a0 931a      	ST   -Y,R17
0003a1 930a      	ST   -Y,R16
0003a2 81aa      	LDD  R26,Y+2
0003a3 81bb      	LDD  R27,Y+2+1
0003a4 9612      	ADIW R26,2
0003a5 940e 07cc 	CALL __GETW1P
0003a7 9730      	SBIW R30,0
0003a8 f159      	BREQ _0x2020016
0003a9 81aa      	LDD  R26,Y+2
0003aa 81bb      	LDD  R27,Y+2+1
0003ab 9614      	ADIW R26,4
0003ac 940e 07cc 	CALL __GETW1P
0003ae 018f      	MOVW R16,R30
0003af 9730      	SBIW R30,0
0003b0 f061      	BREQ _0x2020018
                +
0003b1 3002     +CPI R16 , LOW ( 2 )
0003b2 e0e0     +LDI R30 , HIGH ( 2 )
0003b3 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0003b4 f098      	BRLO _0x2020019
0003b5 01f8      	MOVW R30,R16
0003b6 9731      	SBIW R30,1
0003b7 018f      	MOVW R16,R30
                +
0003b8 81aa     +LDD R26 , Y + 2
0003b9 81bb     +LDD R27 , Y + 2 + 1
0003ba 9614     +ADIW R26 , 4
0003bb 93ed     +ST X + , R30
0003bc 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020018:
0003bd 81aa      	LDD  R26,Y+2
0003be 81bb      	LDD  R27,Y+2+1
0003bf 9612      	ADIW R26,2
0003c0 91ed      	LD   R30,X+
0003c1 91fd      	LD   R31,X+
0003c2 9631      	ADIW R30,1
0003c3 93fe      	ST   -X,R31
0003c4 93ee      	ST   -X,R30
0003c5 9731      	SBIW R30,1
0003c6 81ac      	LDD  R26,Y+4
0003c7 83a0      	STD  Z+0,R26
                 _0x2020019:
0003c8 81aa      	LDD  R26,Y+2
0003c9 81bb      	LDD  R27,Y+2+1
0003ca 940e 07cc 	CALL __GETW1P
0003cc 23ff      	TST  R31
0003cd f02a      	BRMI _0x202001A
0003ce 91ed      	LD   R30,X+
0003cf 91fd      	LD   R31,X+
0003d0 9631      	ADIW R30,1
0003d1 93fe      	ST   -X,R31
0003d2 93ee      	ST   -X,R30
                 _0x202001A:
0003d3 c006      	RJMP _0x202001B
                 _0x2020016:
0003d4 81aa      	LDD  R26,Y+2
0003d5 81bb      	LDD  R27,Y+2+1
0003d6 efef      	LDI  R30,LOW(65535)
0003d7 efff      	LDI  R31,HIGH(65535)
0003d8 93ed      	ST   X+,R30
0003d9 93fc      	ST   X,R31
                 _0x202001B:
0003da 8119      	LDD  R17,Y+1
0003db 8108      	LDD  R16,Y+0
0003dc 9625      	ADIW R28,5
0003dd 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0003de 93ba      	ST   -Y,R27
0003df 93aa      	ST   -Y,R26
0003e0 9726      	SBIW R28,6
0003e1 940e 0811 	CALL __SAVELOCR6
0003e3 e000      	LDI  R16,0
0003e4 85ac      	LDD  R26,Y+12
0003e5 85bd      	LDD  R27,Y+12+1
0003e6 e0e0      	LDI  R30,LOW(0)
0003e7 e0f0      	LDI  R31,HIGH(0)
0003e8 93ed      	ST   X+,R30
0003e9 93fc      	ST   X,R31
                 _0x202001C:
0003ea 89ea      	LDD  R30,Y+18
0003eb 89fb      	LDD  R31,Y+18+1
0003ec 9631      	ADIW R30,1
0003ed 8bea      	STD  Y+18,R30
0003ee 8bfb      	STD  Y+18+1,R31
0003ef 9731      	SBIW R30,1
0003f0 91e4      	LPM  R30,Z
0003f1 2f3e      	MOV  R19,R30
0003f2 30e0      	CPI  R30,0
0003f3 f409      	BRNE PC+2
0003f4 c115      	RJMP _0x202001E
0003f5 2fe0      	MOV  R30,R16
0003f6 30e0      	CPI  R30,0
0003f7 f439      	BRNE _0x2020022
0003f8 3235      	CPI  R19,37
0003f9 f411      	BRNE _0x2020023
0003fa e001      	LDI  R16,LOW(1)
0003fb c002      	RJMP _0x2020024
                 _0x2020023:
0003fc 940e 05c2 	CALL SUBOPT_0xC
                 _0x2020024:
0003fe c10a      	RJMP _0x2020021
                 _0x2020022:
0003ff 30e1      	CPI  R30,LOW(0x1)
000400 f4a9      	BRNE _0x2020025
000401 3235      	CPI  R19,37
000402 f419      	BRNE _0x2020026
000403 940e 05c2 	CALL SUBOPT_0xC
000405 c102      	RJMP _0x20200D2
                 _0x2020026:
000406 e002      	LDI  R16,LOW(2)
000407 e050      	LDI  R21,LOW(0)
000408 e010      	LDI  R17,LOW(0)
000409 323d      	CPI  R19,45
00040a f411      	BRNE _0x2020027
00040b e011      	LDI  R17,LOW(1)
00040c c0fc      	RJMP _0x2020021
                 _0x2020027:
00040d 323b      	CPI  R19,43
00040e f411      	BRNE _0x2020028
00040f e25b      	LDI  R21,LOW(43)
000410 c0f8      	RJMP _0x2020021
                 _0x2020028:
000411 3230      	CPI  R19,32
000412 f411      	BRNE _0x2020029
000413 e250      	LDI  R21,LOW(32)
000414 c0f4      	RJMP _0x2020021
                 _0x2020029:
000415 c002      	RJMP _0x202002A
                 _0x2020025:
000416 30e2      	CPI  R30,LOW(0x2)
000417 f439      	BRNE _0x202002B
                 _0x202002A:
000418 e040      	LDI  R20,LOW(0)
000419 e003      	LDI  R16,LOW(3)
00041a 3330      	CPI  R19,48
00041b f411      	BRNE _0x202002C
00041c 6810      	ORI  R17,LOW(128)
00041d c0eb      	RJMP _0x2020021
                 _0x202002C:
00041e c003      	RJMP _0x202002D
                 _0x202002B:
00041f 30e3      	CPI  R30,LOW(0x3)
000420 f009      	BREQ PC+2
000421 c0e7      	RJMP _0x2020021
                 _0x202002D:
000422 3330      	CPI  R19,48
000423 f010      	BRLO _0x2020030
000424 333a      	CPI  R19,58
000425 f008      	BRLO _0x2020031
                 _0x2020030:
000426 c007      	RJMP _0x202002F
                 _0x2020031:
000427 e0aa      	LDI  R26,LOW(10)
000428 9f4a      	MUL  R20,R26
000429 2d40      	MOV  R20,R0
00042a 2fe3      	MOV  R30,R19
00042b 53e0      	SUBI R30,LOW(48)
00042c 0f4e      	ADD  R20,R30
00042d c0db      	RJMP _0x2020021
                 _0x202002F:
00042e 2fe3      	MOV  R30,R19
00042f 36e3      	CPI  R30,LOW(0x63)
000430 f449      	BRNE _0x2020035
000431 940e 05c9 	CALL SUBOPT_0xD
000433 89e8      	LDD  R30,Y+16
000434 89f9      	LDD  R31,Y+16+1
000435 81a4      	LDD  R26,Z+4
000436 93aa      	ST   -Y,R26
000437 940e 05cf 	CALL SUBOPT_0xE
000439 c0ce      	RJMP _0x2020036
                 _0x2020035:
00043a 37e3      	CPI  R30,LOW(0x73)
00043b f441      	BRNE _0x2020038
00043c 940e 05c9 	CALL SUBOPT_0xD
00043e 940e 05d5 	CALL SUBOPT_0xF
000440 940e 055d 	CALL _strlen
000442 2f0e      	MOV  R16,R30
000443 c00a      	RJMP _0x2020039
                 _0x2020038:
000444 37e0      	CPI  R30,LOW(0x70)
000445 f461      	BRNE _0x202003B
000446 940e 05c9 	CALL SUBOPT_0xD
000448 940e 05d5 	CALL SUBOPT_0xF
00044a 940e 0569 	CALL _strlenf
00044c 2f0e      	MOV  R16,R30
00044d 6018      	ORI  R17,LOW(8)
                 _0x2020039:
00044e 6012      	ORI  R17,LOW(2)
00044f 771f      	ANDI R17,LOW(127)
000450 e020      	LDI  R18,LOW(0)
000451 c034      	RJMP _0x202003C
                 _0x202003B:
000452 36e4      	CPI  R30,LOW(0x64)
000453 f011      	BREQ _0x202003F
000454 36e9      	CPI  R30,LOW(0x69)
000455 f411      	BRNE _0x2020040
                 _0x202003F:
000456 6014      	ORI  R17,LOW(4)
000457 c002      	RJMP _0x2020041
                 _0x2020040:
000458 37e5      	CPI  R30,LOW(0x75)
000459 f431      	BRNE _0x2020042
                 _0x2020041:
00045a e9e8      	LDI  R30,LOW(_tbl10_G101*2)
00045b e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
00045c 83ee      	STD  Y+6,R30
00045d 83ff      	STD  Y+6+1,R31
00045e e005      	LDI  R16,LOW(5)
00045f c00c      	RJMP _0x2020043
                 _0x2020042:
000460 35e8      	CPI  R30,LOW(0x58)
000461 f411      	BRNE _0x2020045
000462 6018      	ORI  R17,LOW(8)
000463 c003      	RJMP _0x2020046
                 _0x2020045:
000464 37e8      	CPI  R30,LOW(0x78)
000465 f009      	BREQ PC+2
000466 c0a1      	RJMP _0x2020077
                 _0x2020046:
000467 eae2      	LDI  R30,LOW(_tbl16_G101*2)
000468 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000469 83ee      	STD  Y+6,R30
00046a 83ff      	STD  Y+6+1,R31
00046b e004      	LDI  R16,LOW(4)
                 _0x2020043:
00046c ff12      	SBRS R17,2
00046d c014      	RJMP _0x2020048
00046e 940e 05c9 	CALL SUBOPT_0xD
000470 940e 05df 	CALL SUBOPT_0x10
000472 85ab      	LDD  R26,Y+11
000473 23aa      	TST  R26
000474 f43a      	BRPL _0x2020049
000475 85ea      	LDD  R30,Y+10
000476 85fb      	LDD  R31,Y+10+1
000477 940e 079a 	CALL __ANEGW1
000479 87ea      	STD  Y+10,R30
00047a 87fb      	STD  Y+10+1,R31
00047b e25d      	LDI  R21,LOW(45)
                 _0x2020049:
00047c 3050      	CPI  R21,0
00047d f011      	BREQ _0x202004A
00047e 5f0f      	SUBI R16,-LOW(1)
00047f c001      	RJMP _0x202004B
                 _0x202004A:
000480 7f1b      	ANDI R17,LOW(251)
                 _0x202004B:
000481 c004      	RJMP _0x202004C
                 _0x2020048:
000482 940e 05c9 	CALL SUBOPT_0xD
000484 940e 05df 	CALL SUBOPT_0x10
                 _0x202004C:
                 _0x202003C:
000486 fd10      	SBRC R17,0
000487 c011      	RJMP _0x202004D
                 _0x202004E:
000488 1704      	CP   R16,R20
000489 f478      	BRSH _0x2020050
00048a ff17      	SBRS R17,7
00048b c008      	RJMP _0x2020051
00048c ff12      	SBRS R17,2
00048d c004      	RJMP _0x2020052
00048e 7f1b      	ANDI R17,LOW(251)
00048f 2f35      	MOV  R19,R21
000490 5001      	SUBI R16,LOW(1)
000491 c001      	RJMP _0x2020053
                 _0x2020052:
000492 e330      	LDI  R19,LOW(48)
                 _0x2020053:
000493 c001      	RJMP _0x2020054
                 _0x2020051:
000494 e230      	LDI  R19,LOW(32)
                 _0x2020054:
000495 940e 05c2 	CALL SUBOPT_0xC
000497 5041      	SUBI R20,LOW(1)
000498 cfef      	RJMP _0x202004E
                 _0x2020050:
                 _0x202004D:
000499 2f20      	MOV  R18,R16
00049a ff11      	SBRS R17,1
00049b c017      	RJMP _0x2020055
                 _0x2020056:
00049c 3020      	CPI  R18,0
00049d f0a1      	BREQ _0x2020058
00049e ff13      	SBRS R17,3
00049f c006      	RJMP _0x2020059
0004a0 81ee      	LDD  R30,Y+6
0004a1 81ff      	LDD  R31,Y+6+1
0004a2 9135      	LPM  R19,Z+
0004a3 83ee      	STD  Y+6,R30
0004a4 83ff      	STD  Y+6+1,R31
0004a5 c005      	RJMP _0x202005A
                 _0x2020059:
0004a6 81ae      	LDD  R26,Y+6
0004a7 81bf      	LDD  R27,Y+6+1
0004a8 913d      	LD   R19,X+
0004a9 83ae      	STD  Y+6,R26
0004aa 83bf      	STD  Y+6+1,R27
                 _0x202005A:
0004ab 940e 05c2 	CALL SUBOPT_0xC
0004ad 3040      	CPI  R20,0
0004ae f009      	BREQ _0x202005B
0004af 5041      	SUBI R20,LOW(1)
                 _0x202005B:
0004b0 5021      	SUBI R18,LOW(1)
0004b1 cfea      	RJMP _0x2020056
                 _0x2020058:
0004b2 c04b      	RJMP _0x202005C
                 _0x2020055:
                 _0x202005E:
0004b3 e330      	LDI  R19,LOW(48)
0004b4 81ee      	LDD  R30,Y+6
0004b5 81ff      	LDD  R31,Y+6+1
0004b6 940e 07d0 	CALL __GETW1PF
0004b8 87e8      	STD  Y+8,R30
0004b9 87f9      	STD  Y+8+1,R31
0004ba 81ee      	LDD  R30,Y+6
0004bb 81ff      	LDD  R31,Y+6+1
0004bc 9632      	ADIW R30,2
0004bd 83ee      	STD  Y+6,R30
0004be 83ff      	STD  Y+6+1,R31
                 _0x2020060:
0004bf 85e8      	LDD  R30,Y+8
0004c0 85f9      	LDD  R31,Y+8+1
0004c1 85aa      	LDD  R26,Y+10
0004c2 85bb      	LDD  R27,Y+10+1
0004c3 17ae      	CP   R26,R30
0004c4 07bf      	CPC  R27,R31
0004c5 f050      	BRLO _0x2020062
0004c6 5f3f      	SUBI R19,-LOW(1)
0004c7 85a8      	LDD  R26,Y+8
0004c8 85b9      	LDD  R27,Y+8+1
0004c9 85ea      	LDD  R30,Y+10
0004ca 85fb      	LDD  R31,Y+10+1
0004cb 1bea      	SUB  R30,R26
0004cc 0bfb      	SBC  R31,R27
0004cd 87ea      	STD  Y+10,R30
0004ce 87fb      	STD  Y+10+1,R31
0004cf cfef      	RJMP _0x2020060
                 _0x2020062:
0004d0 333a      	CPI  R19,58
0004d1 f028      	BRLO _0x2020063
0004d2 ff13      	SBRS R17,3
0004d3 c002      	RJMP _0x2020064
0004d4 5f39      	SUBI R19,-LOW(7)
0004d5 c001      	RJMP _0x2020065
                 _0x2020064:
0004d6 5d39      	SUBI R19,-LOW(39)
                 _0x2020065:
                 _0x2020063:
0004d7 fd14      	SBRC R17,4
0004d8 c01a      	RJMP _0x2020067
0004d9 3331      	CPI  R19,49
0004da f420      	BRSH _0x2020069
0004db 85a8      	LDD  R26,Y+8
0004dc 85b9      	LDD  R27,Y+8+1
0004dd 9711      	SBIW R26,1
0004de f409      	BRNE _0x2020068
                 _0x2020069:
0004df c009      	RJMP _0x20200D3
                 _0x2020068:
0004e0 1742      	CP   R20,R18
0004e1 f010      	BRLO _0x202006D
0004e2 ff10      	SBRS R17,0
0004e3 c001      	RJMP _0x202006E
                 _0x202006D:
0004e4 c013      	RJMP _0x202006C
                 _0x202006E:
0004e5 e230      	LDI  R19,LOW(32)
0004e6 ff17      	SBRS R17,7
0004e7 c00b      	RJMP _0x202006F
0004e8 e330      	LDI  R19,LOW(48)
                 _0x20200D3:
0004e9 6110      	ORI  R17,LOW(16)
0004ea ff12      	SBRS R17,2
0004eb c007      	RJMP _0x2020070
0004ec 7f1b      	ANDI R17,LOW(251)
0004ed 935a      	ST   -Y,R21
0004ee 940e 05cf 	CALL SUBOPT_0xE
0004f0 3040      	CPI  R20,0
0004f1 f009      	BREQ _0x2020071
0004f2 5041      	SUBI R20,LOW(1)
                 _0x2020071:
                 _0x2020070:
                 _0x202006F:
                 _0x2020067:
0004f3 940e 05c2 	CALL SUBOPT_0xC
0004f5 3040      	CPI  R20,0
0004f6 f009      	BREQ _0x2020072
0004f7 5041      	SUBI R20,LOW(1)
                 _0x2020072:
                 _0x202006C:
0004f8 5021      	SUBI R18,LOW(1)
0004f9 85a8      	LDD  R26,Y+8
0004fa 85b9      	LDD  R27,Y+8+1
0004fb 9712      	SBIW R26,2
0004fc f008      	BRLO _0x202005F
0004fd cfb5      	RJMP _0x202005E
                 _0x202005F:
                 _0x202005C:
0004fe ff10      	SBRS R17,0
0004ff c008      	RJMP _0x2020073
                 _0x2020074:
000500 3040      	CPI  R20,0
000501 f031      	BREQ _0x2020076
000502 5041      	SUBI R20,LOW(1)
000503 e2e0      	LDI  R30,LOW(32)
000504 93ea      	ST   -Y,R30
000505 940e 05cf 	CALL SUBOPT_0xE
000507 cff8      	RJMP _0x2020074
                 _0x2020076:
                 _0x2020073:
                 _0x2020077:
                 _0x2020036:
                 _0x20200D2:
000508 e000      	LDI  R16,LOW(0)
                 _0x2020021:
000509 cee0      	RJMP _0x202001C
                 _0x202001E:
00050a 85ac      	LDD  R26,Y+12
00050b 85bd      	LDD  R27,Y+12+1
00050c 940e 07cc 	CALL __GETW1P
00050e 940e 0818 	CALL __LOADLOCR6
000510 9664      	ADIW R28,20
000511 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000512 92ff      	PUSH R15
000513 2ef8      	MOV  R15,R24
000514 9726      	SBIW R28,6
000515 940e 0813 	CALL __SAVELOCR4
000517 940e 05e7 	CALL SUBOPT_0x11
000519 9730      	SBIW R30,0
00051a f419      	BRNE _0x2020078
00051b efef      	LDI  R30,LOW(65535)
00051c efff      	LDI  R31,HIGH(65535)
00051d c023      	RJMP _0x20A0001
                 _0x2020078:
00051e 01de      	MOVW R26,R28
00051f 9616      	ADIW R26,6
000520 940e 0796 	CALL __ADDW2R15
000522 018d      	MOVW R16,R26
000523 940e 05e7 	CALL SUBOPT_0x11
000525 83ee      	STD  Y+6,R30
000526 83ff      	STD  Y+6+1,R31
000527 e0e0      	LDI  R30,LOW(0)
000528 87e8      	STD  Y+8,R30
000529 87e9      	STD  Y+8+1,R30
00052a 01de      	MOVW R26,R28
00052b 961a      	ADIW R26,10
00052c 940e 0796 	CALL __ADDW2R15
00052e 940e 07cc 	CALL __GETW1P
000530 93fa      	ST   -Y,R31
000531 93ea      	ST   -Y,R30
000532 931a      	ST   -Y,R17
000533 930a      	ST   -Y,R16
000534 e9ee      	LDI  R30,LOW(_put_buff_G101)
000535 e0f3      	LDI  R31,HIGH(_put_buff_G101)
000536 93fa      	ST   -Y,R31
000537 93ea      	ST   -Y,R30
000538 01de      	MOVW R26,R28
000539 961a      	ADIW R26,10
00053a dea3      	RCALL __print_G101
00053b 019f      	MOVW R18,R30
00053c 81ae      	LDD  R26,Y+6
00053d 81bf      	LDD  R27,Y+6+1
00053e e0e0      	LDI  R30,LOW(0)
00053f 93ec      	ST   X,R30
000540 01f9      	MOVW R30,R18
                 _0x20A0001:
000541 940e 081a 	CALL __LOADLOCR4
000543 962a      	ADIW R28,10
000544 90ff      	POP  R15
000545 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _bcd2bin:
                 ; .FSTART _bcd2bin
000546 93aa      	ST   -Y,R26
000547 81e8          ld   r30,y
000548 95e2          swap r30
000549 70ef          andi r30,0xf
00054a 2fae          mov  r26,r30
00054b 0faa          lsl  r26
00054c 0faa          lsl  r26
00054d 0fea          add  r30,r26
00054e 0fee          lsl  r30
00054f 91a9          ld   r26,y+
000550 70af          andi r26,0xf
000551 0fea          add  r30,r26
000552 9508          ret
                 ; .FEND
                 _bin2bcd:
                 ; .FSTART _bin2bcd
000553 93aa      	ST   -Y,R26
000554 91a9          ld   r26,y+
000555 27ee          clr  r30
                 bin2bcd0:
000556 50aa          subi r26,10
000557 f012          brmi bin2bcd1
000558 5fe0          subi r30,-16
000559 cffc          rjmp bin2bcd0
                 bin2bcd1:
00055a 5fa6          subi r26,-10
00055b 0fea          add  r30,r26
00055c 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00055d 93ba      	ST   -Y,R27
00055e 93aa      	ST   -Y,R26
00055f 91a9          ld   r26,y+
000560 91b9          ld   r27,y+
000561 27ee          clr  r30
000562 27ff          clr  r31
                 strlen0:
000563 916d          ld   r22,x+
000564 2366          tst  r22
000565 f011          breq strlen1
000566 9631          adiw r30,1
000567 cffb          rjmp strlen0
                 strlen1:
000568 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000569 93ba      	ST   -Y,R27
00056a 93aa      	ST   -Y,R26
00056b 27aa          clr  r26
00056c 27bb          clr  r27
00056d 91e9          ld   r30,y+
00056e 91f9          ld   r31,y+
                 strlenf0:
00056f 9005      	lpm  r0,z+
000570 2000          tst  r0
000571 f011          breq strlenf1
000572 9611          adiw r26,1
000573 cffb          rjmp strlenf0
                 strlenf1:
000574 01fd          movw r30,r26
000575 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _cursor:
000900           	.BYTE 0x1
                 _alarmFlag:
000901           	.BYTE 0x1
                 
                 	.ESEG
                 _AH:
000000           	.BYTE 0x1
                 _AM:
000001           	.BYTE 0x1
                 
                 	.DSEG
                 _H:
000902           	.BYTE 0x1
                 _M:
000903           	.BYTE 0x1
                 _S:
000904           	.BYTE 0x1
                 _time:
000905           	.BYTE 0x10
                 _temperature:
000915           	.BYTE 0x4
                 _Temp:
000919           	.BYTE 0x2
                 _i:
00091b           	.BYTE 0x1
                 _k:
00091c           	.BYTE 0x2
                 _kFlag:
00091e           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
000576 e0a2      	LDI  R26,LOW(2)
000577 e0b0      	LDI  R27,0
000578 940c 05ee 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00057a 940e 00bc 	CALL _SendDataBitsLCD
00057c 940c 00b9 	JMP  _PulseEn
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
00057e 81e9      	LDD  R30,Y+1
00057f 7fe0      	ANDI R30,LOW(0xF0)
000580 2f0e      	MOV  R16,R30
000581 9502      	SWAP R16
000582 700f      	ANDI R16,0xF
000583 2fa0      	MOV  R26,R16
000584 cff5      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000585 81e9      	LDD  R30,Y+1
000586 70ef      	ANDI R30,LOW(0xF)
000587 2f0e      	MOV  R16,R30
000588 2fa0      	MOV  R26,R16
000589 940e 00bc 	CALL _SendDataBitsLCD
00058b cfea      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
00058c 91e0 091c 	LDS  R30,_k
00058e 91f0 091d 	LDS  R31,_k+1
000590 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
000591 27ff      	CLR  R31
000592 2766      	CLR  R22
000593 2777      	CLR  R23
000594 940e 07d9 	CALL __PUTPARD1
000596 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000597 940e 0109 	CALL _MoveCursor
000599 e0a5      	LDI  R26,LOW(_time)
00059a e0b9      	LDI  R27,HIGH(_time)
00059b 940c 00f1 	JMP  _StringLCDVar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
00059d e0a0      	LDI  R26,LOW(_AH)
00059e e0b0      	LDI  R27,HIGH(_AH)
00059f 940e 07f0 	CALL __EEPROMRDB
0005a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8:
0005a2 e0a1      	LDI  R26,LOW(_AM)
0005a3 e0b0      	LDI  R27,HIGH(_AM)
0005a4 940e 07f0 	CALL __EEPROMRDB
0005a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x9:
0005a7 e0e2      	LDI  R30,LOW(_H)
0005a8 e0f9      	LDI  R31,HIGH(_H)
0005a9 93fa      	ST   -Y,R31
0005aa 93ea      	ST   -Y,R30
0005ab e0e3      	LDI  R30,LOW(_M)
0005ac e0f9      	LDI  R31,HIGH(_M)
0005ad 93fa      	ST   -Y,R31
0005ae 93ea      	ST   -Y,R30
0005af e0a4      	LDI  R26,LOW(_S)
0005b0 e0b9      	LDI  R27,HIGH(_S)
0005b1 940c 0368 	JMP  _rtc_get_time
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xA:
0005b3 91e0 0902 	LDS  R30,_H
0005b5 93ea      	ST   -Y,R30
0005b6 91e0 0903 	LDS  R30,_M
0005b8 93ea      	ST   -Y,R30
0005b9 91a0 0904 	LDS  R26,_S
0005bb 940c 037e 	JMP  _rtc_set_time
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
0005bd 940e 0320 	CALL _ds1302_read
0005bf 2fae      	MOV  R26,R30
0005c0 940c 0546 	JMP  _bcd2bin
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xC:
0005c2 933a      	ST   -Y,R19
0005c3 85ad      	LDD  R26,Y+13
0005c4 85be      	LDD  R27,Y+13+1
0005c5 85ef      	LDD  R30,Y+15
0005c6 89f8      	LDD  R31,Y+15+1
0005c7 9509      	ICALL
0005c8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xD:
0005c9 89e8      	LDD  R30,Y+16
0005ca 89f9      	LDD  R31,Y+16+1
0005cb 9734      	SBIW R30,4
0005cc 8be8      	STD  Y+16,R30
0005cd 8bf9      	STD  Y+16+1,R31
0005ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
0005cf 85ad      	LDD  R26,Y+13
0005d0 85be      	LDD  R27,Y+13+1
0005d1 85ef      	LDD  R30,Y+15
0005d2 89f8      	LDD  R31,Y+15+1
0005d3 9509      	ICALL
0005d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xF:
0005d5 89a8      	LDD  R26,Y+16
0005d6 89b9      	LDD  R27,Y+16+1
0005d7 9614      	ADIW R26,4
0005d8 940e 07cc 	CALL __GETW1P
0005da 83ee      	STD  Y+6,R30
0005db 83ff      	STD  Y+6+1,R31
0005dc 81ae      	LDD  R26,Y+6
0005dd 81bf      	LDD  R27,Y+6+1
0005de 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x10:
0005df 89a8      	LDD  R26,Y+16
0005e0 89b9      	LDD  R27,Y+16+1
0005e1 9614      	ADIW R26,4
0005e2 940e 07cc 	CALL __GETW1P
0005e4 87ea      	STD  Y+10,R30
0005e5 87fb      	STD  Y+10+1,R31
0005e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
0005e7 01de      	MOVW R26,R28
0005e8 961c      	ADIW R26,12
0005e9 940e 0796 	CALL __ADDW2R15
0005eb 940e 07cc 	CALL __GETW1P
0005ed 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0005ee 9610      	adiw r26,0
0005ef f039      	breq __delay_ms1
                 __delay_ms0:
                +
0005f0 ed80     +LDI R24 , LOW ( 0x7D0 )
0005f1 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0005f2 9701     +SBIW R24 , 1
0005f3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0005f4 95a8      	wdr
0005f5 9711      	sbiw r26,1
0005f6 f7c9      	brne __delay_ms0
                 __delay_ms1:
0005f7 9508      	ret
                 
                 __ROUND_REPACK:
0005f8 2355      	TST  R21
0005f9 f442      	BRPL __REPACK
0005fa 3850      	CPI  R21,0x80
0005fb f411      	BRNE __ROUND_REPACK0
0005fc ffe0      	SBRS R30,0
0005fd c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0005fe 9631      	ADIW R30,1
0005ff 1f69      	ADC  R22,R25
000600 1f79      	ADC  R23,R25
000601 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000602 e850      	LDI  R21,0x80
000603 2757      	EOR  R21,R23
000604 f411      	BRNE __REPACK0
000605 935f      	PUSH R21
000606 c0ca      	RJMP __ZERORES
                 __REPACK0:
000607 3f5f      	CPI  R21,0xFF
000608 f031      	BREQ __REPACK1
000609 0f66      	LSL  R22
00060a 0c00      	LSL  R0
00060b 9557      	ROR  R21
00060c 9567      	ROR  R22
00060d 2f75      	MOV  R23,R21
00060e 9508      	RET
                 __REPACK1:
00060f 935f      	PUSH R21
000610 2000      	TST  R0
000611 f00a      	BRMI __REPACK2
000612 c0ca      	RJMP __MAXRES
                 __REPACK2:
000613 c0c3      	RJMP __MINRES
                 
                 __UNPACK:
000614 e850      	LDI  R21,0x80
000615 2e19      	MOV  R1,R25
000616 2215      	AND  R1,R21
000617 0f88      	LSL  R24
000618 1f99      	ROL  R25
000619 2795      	EOR  R25,R21
00061a 0f55      	LSL  R21
00061b 9587      	ROR  R24
                 
                 __UNPACK1:
00061c e850      	LDI  R21,0x80
00061d 2e07      	MOV  R0,R23
00061e 2205      	AND  R0,R21
00061f 0f66      	LSL  R22
000620 1f77      	ROL  R23
000621 2775      	EOR  R23,R21
000622 0f55      	LSL  R21
000623 9567      	ROR  R22
000624 9508      	RET
                 
                 __CFD1U:
000625 9468      	SET
000626 c001      	RJMP __CFD1U0
                 __CFD1:
000627 94e8      	CLT
                 __CFD1U0:
000628 935f      	PUSH R21
000629 dff2      	RCALL __UNPACK1
00062a 3870      	CPI  R23,0x80
00062b f018      	BRLO __CFD10
00062c 3f7f      	CPI  R23,0xFF
00062d f408      	BRCC __CFD10
00062e c0a2      	RJMP __ZERORES
                 __CFD10:
00062f e156      	LDI  R21,22
000630 1b57      	SUB  R21,R23
000631 f4aa      	BRPL __CFD11
000632 9551      	NEG  R21
000633 3058      	CPI  R21,8
000634 f40e      	BRTC __CFD19
000635 3059      	CPI  R21,9
                 __CFD19:
000636 f030      	BRLO __CFD17
000637 efef      	SER  R30
000638 efff      	SER  R31
000639 ef6f      	SER  R22
00063a e77f      	LDI  R23,0x7F
00063b f977      	BLD  R23,7
00063c c01a      	RJMP __CFD15
                 __CFD17:
00063d 2777      	CLR  R23
00063e 2355      	TST  R21
00063f f0b9      	BREQ __CFD15
                 __CFD18:
000640 0fee      	LSL  R30
000641 1fff      	ROL  R31
000642 1f66      	ROL  R22
000643 1f77      	ROL  R23
000644 955a      	DEC  R21
000645 f7d1      	BRNE __CFD18
000646 c010      	RJMP __CFD15
                 __CFD11:
000647 2777      	CLR  R23
                 __CFD12:
000648 3058      	CPI  R21,8
000649 f028      	BRLO __CFD13
00064a 2fef      	MOV  R30,R31
00064b 2ff6      	MOV  R31,R22
00064c 2f67      	MOV  R22,R23
00064d 5058      	SUBI R21,8
00064e cff9      	RJMP __CFD12
                 __CFD13:
00064f 2355      	TST  R21
000650 f031      	BREQ __CFD15
                 __CFD14:
000651 9576      	LSR  R23
000652 9567      	ROR  R22
000653 95f7      	ROR  R31
000654 95e7      	ROR  R30
000655 955a      	DEC  R21
000656 f7d1      	BRNE __CFD14
                 __CFD15:
000657 2000      	TST  R0
000658 f40a      	BRPL __CFD16
000659 d144      	RCALL __ANEGD1
                 __CFD16:
00065a 915f      	POP  R21
00065b 9508      	RET
                 
                 __CDF1U:
00065c 9468      	SET
00065d c001      	RJMP __CDF1U0
                 __CDF1:
00065e 94e8      	CLT
                 __CDF1U0:
00065f 9730      	SBIW R30,0
000660 4060      	SBCI R22,0
000661 4070      	SBCI R23,0
000662 f0b1      	BREQ __CDF10
000663 2400      	CLR  R0
000664 f026      	BRTS __CDF11
000665 2377      	TST  R23
000666 f412      	BRPL __CDF11
000667 9400      	COM  R0
000668 d135      	RCALL __ANEGD1
                 __CDF11:
000669 2e17      	MOV  R1,R23
00066a e17e      	LDI  R23,30
00066b 2011      	TST  R1
                 __CDF12:
00066c f032      	BRMI __CDF13
00066d 957a      	DEC  R23
00066e 0fee      	LSL  R30
00066f 1fff      	ROL  R31
000670 1f66      	ROL  R22
000671 1c11      	ROL  R1
000672 cff9      	RJMP __CDF12
                 __CDF13:
000673 2fef      	MOV  R30,R31
000674 2ff6      	MOV  R31,R22
000675 2d61      	MOV  R22,R1
000676 935f      	PUSH R21
000677 df8a      	RCALL __REPACK
000678 915f      	POP  R21
                 __CDF10:
000679 9508      	RET
                 
                 __SWAPACC:
00067a 934f      	PUSH R20
00067b 01af      	MOVW R20,R30
00067c 01fd      	MOVW R30,R26
00067d 01da      	MOVW R26,R20
00067e 01ab      	MOVW R20,R22
00067f 01bc      	MOVW R22,R24
000680 01ca      	MOVW R24,R20
000681 2d40      	MOV  R20,R0
000682 2c01      	MOV  R0,R1
000683 2e14      	MOV  R1,R20
000684 914f      	POP  R20
000685 9508      	RET
                 
                 __UADD12:
000686 0fea      	ADD  R30,R26
000687 1ffb      	ADC  R31,R27
000688 1f68      	ADC  R22,R24
000689 9508      	RET
                 
                 __NEGMAN1:
00068a 95e0      	COM  R30
00068b 95f0      	COM  R31
00068c 9560      	COM  R22
00068d 5fef      	SUBI R30,-1
00068e 4fff      	SBCI R31,-1
00068f 4f6f      	SBCI R22,-1
000690 9508      	RET
                 
                 __SUBF12:
000691 935f      	PUSH R21
000692 df81      	RCALL __UNPACK
000693 3890      	CPI  R25,0x80
000694 f149      	BREQ __ADDF129
000695 e850      	LDI  R21,0x80
000696 2615      	EOR  R1,R21
                 
                 __ADDF120:
000697 3870      	CPI  R23,0x80
000698 f121      	BREQ __ADDF128
                 __ADDF121:
000699 2f57      	MOV  R21,R23
00069a 1b59      	SUB  R21,R25
00069b f12b      	BRVS __ADDF1211
00069c f412      	BRPL __ADDF122
00069d dfdc      	RCALL __SWAPACC
00069e cffa      	RJMP __ADDF121
                 __ADDF122:
00069f 3158      	CPI  R21,24
0006a0 f018      	BRLO __ADDF123
0006a1 27aa      	CLR  R26
0006a2 27bb      	CLR  R27
0006a3 2788      	CLR  R24
                 __ADDF123:
0006a4 3058      	CPI  R21,8
0006a5 f028      	BRLO __ADDF124
0006a6 2fab      	MOV  R26,R27
0006a7 2fb8      	MOV  R27,R24
0006a8 2788      	CLR  R24
0006a9 5058      	SUBI R21,8
0006aa cff9      	RJMP __ADDF123
                 __ADDF124:
0006ab 2355      	TST  R21
0006ac f029      	BREQ __ADDF126
                 __ADDF125:
0006ad 9586      	LSR  R24
0006ae 95b7      	ROR  R27
0006af 95a7      	ROR  R26
0006b0 955a      	DEC  R21
0006b1 f7d9      	BRNE __ADDF125
                 __ADDF126:
0006b2 2d50      	MOV  R21,R0
0006b3 2551      	EOR  R21,R1
0006b4 f072      	BRMI __ADDF127
0006b5 dfd0      	RCALL __UADD12
0006b6 f438      	BRCC __ADDF129
0006b7 9567      	ROR  R22
0006b8 95f7      	ROR  R31
0006b9 95e7      	ROR  R30
0006ba 9573      	INC  R23
0006bb f413      	BRVC __ADDF129
0006bc c020      	RJMP __MAXRES
                 __ADDF128:
0006bd dfbc      	RCALL __SWAPACC
                 __ADDF129:
0006be df43      	RCALL __REPACK
0006bf 915f      	POP  R21
0006c0 9508      	RET
                 __ADDF1211:
0006c1 f7d8      	BRCC __ADDF128
0006c2 cffb      	RJMP __ADDF129
                 __ADDF127:
0006c3 1bea      	SUB  R30,R26
0006c4 0bfb      	SBC  R31,R27
0006c5 0b68      	SBC  R22,R24
0006c6 f051      	BREQ __ZERORES
0006c7 f410      	BRCC __ADDF1210
0006c8 9400      	COM  R0
0006c9 dfc0      	RCALL __NEGMAN1
                 __ADDF1210:
0006ca 2366      	TST  R22
0006cb f392      	BRMI __ADDF129
0006cc 0fee      	LSL  R30
0006cd 1fff      	ROL  R31
0006ce 1f66      	ROL  R22
0006cf 957a      	DEC  R23
0006d0 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0006d1 27ee      	CLR  R30
0006d2 27ff      	CLR  R31
0006d3 2766      	CLR  R22
0006d4 2777      	CLR  R23
0006d5 915f      	POP  R21
0006d6 9508      	RET
                 
                 __MINRES:
0006d7 efef      	SER  R30
0006d8 efff      	SER  R31
0006d9 e76f      	LDI  R22,0x7F
0006da ef7f      	SER  R23
0006db 915f      	POP  R21
0006dc 9508      	RET
                 
                 __MAXRES:
0006dd efef      	SER  R30
0006de efff      	SER  R31
0006df e76f      	LDI  R22,0x7F
0006e0 e77f      	LDI  R23,0x7F
0006e1 915f      	POP  R21
0006e2 9508      	RET
                 
                 __MULF12:
0006e3 935f      	PUSH R21
0006e4 df2f      	RCALL __UNPACK
0006e5 3870      	CPI  R23,0x80
0006e6 f351      	BREQ __ZERORES
0006e7 3890      	CPI  R25,0x80
0006e8 f341      	BREQ __ZERORES
0006e9 2401      	EOR  R0,R1
0006ea 9408      	SEC
0006eb 1f79      	ADC  R23,R25
0006ec f423      	BRVC __MULF124
0006ed f31c      	BRLT __ZERORES
                 __MULF125:
0006ee 2000      	TST  R0
0006ef f33a      	BRMI __MINRES
0006f0 cfec      	RJMP __MAXRES
                 __MULF124:
0006f1 920f      	PUSH R0
0006f2 931f      	PUSH R17
0006f3 932f      	PUSH R18
0006f4 933f      	PUSH R19
0006f5 934f      	PUSH R20
0006f6 2711      	CLR  R17
0006f7 2722      	CLR  R18
0006f8 2799      	CLR  R25
0006f9 9f68      	MUL  R22,R24
0006fa 01a0      	MOVW R20,R0
0006fb 9f8f      	MUL  R24,R31
0006fc 2d30      	MOV  R19,R0
0006fd 0d41      	ADD  R20,R1
0006fe 1f59      	ADC  R21,R25
0006ff 9f6b      	MUL  R22,R27
000700 0d30      	ADD  R19,R0
000701 1d41      	ADC  R20,R1
000702 1f59      	ADC  R21,R25
000703 9f8e      	MUL  R24,R30
000704 d027      	RCALL __MULF126
000705 9fbf      	MUL  R27,R31
000706 d025      	RCALL __MULF126
000707 9f6a      	MUL  R22,R26
000708 d023      	RCALL __MULF126
000709 9fbe      	MUL  R27,R30
00070a d01d      	RCALL __MULF127
00070b 9faf      	MUL  R26,R31
00070c d01b      	RCALL __MULF127
00070d 9fae      	MUL  R26,R30
00070e 0d11      	ADD  R17,R1
00070f 1f29      	ADC  R18,R25
000710 1f39      	ADC  R19,R25
000711 1f49      	ADC  R20,R25
000712 1f59      	ADC  R21,R25
000713 2fe3      	MOV  R30,R19
000714 2ff4      	MOV  R31,R20
000715 2f65      	MOV  R22,R21
000716 2f52      	MOV  R21,R18
000717 914f      	POP  R20
000718 913f      	POP  R19
000719 912f      	POP  R18
00071a 911f      	POP  R17
00071b 900f      	POP  R0
00071c 2366      	TST  R22
00071d f02a      	BRMI __MULF122
00071e 0f55      	LSL  R21
00071f 1fee      	ROL  R30
000720 1fff      	ROL  R31
000721 1f66      	ROL  R22
000722 c002      	RJMP __MULF123
                 __MULF122:
000723 9573      	INC  R23
000724 f24b      	BRVS __MULF125
                 __MULF123:
000725 ded2      	RCALL __ROUND_REPACK
000726 915f      	POP  R21
000727 9508      	RET
                 
                 __MULF127:
000728 0d10      	ADD  R17,R0
000729 1d21      	ADC  R18,R1
00072a 1f39      	ADC  R19,R25
00072b c002      	RJMP __MULF128
                 __MULF126:
00072c 0d20      	ADD  R18,R0
00072d 1d31      	ADC  R19,R1
                 __MULF128:
00072e 1f49      	ADC  R20,R25
00072f 1f59      	ADC  R21,R25
000730 9508      	RET
                 
                 __DIVF21:
000731 935f      	PUSH R21
000732 dee1      	RCALL __UNPACK
000733 3870      	CPI  R23,0x80
000734 f421      	BRNE __DIVF210
000735 2011      	TST  R1
                 __DIVF211:
000736 f40a      	BRPL __DIVF219
000737 cf9f      	RJMP __MINRES
                 __DIVF219:
000738 cfa4      	RJMP __MAXRES
                 __DIVF210:
000739 3890      	CPI  R25,0x80
00073a f409      	BRNE __DIVF218
                 __DIVF217:
00073b cf95      	RJMP __ZERORES
                 __DIVF218:
00073c 2401      	EOR  R0,R1
00073d 9408      	SEC
00073e 0b97      	SBC  R25,R23
00073f f41b      	BRVC __DIVF216
000740 f3d4      	BRLT __DIVF217
000741 2000      	TST  R0
000742 cff3      	RJMP __DIVF211
                 __DIVF216:
000743 2f79      	MOV  R23,R25
000744 931f      	PUSH R17
000745 932f      	PUSH R18
000746 933f      	PUSH R19
000747 934f      	PUSH R20
000748 2411      	CLR  R1
000749 2711      	CLR  R17
00074a 2722      	CLR  R18
00074b 2733      	CLR  R19
00074c 2744      	CLR  R20
00074d 2755      	CLR  R21
00074e e290      	LDI  R25,32
                 __DIVF212:
00074f 17ae      	CP   R26,R30
000750 07bf      	CPC  R27,R31
000751 0786      	CPC  R24,R22
000752 0741      	CPC  R20,R17
000753 f030      	BRLO __DIVF213
000754 1bae      	SUB  R26,R30
000755 0bbf      	SBC  R27,R31
000756 0b86      	SBC  R24,R22
000757 0b41      	SBC  R20,R17
000758 9408      	SEC
000759 c001      	RJMP __DIVF214
                 __DIVF213:
00075a 9488      	CLC
                 __DIVF214:
00075b 1f55      	ROL  R21
00075c 1f22      	ROL  R18
00075d 1f33      	ROL  R19
00075e 1c11      	ROL  R1
00075f 1faa      	ROL  R26
000760 1fbb      	ROL  R27
000761 1f88      	ROL  R24
000762 1f44      	ROL  R20
000763 959a      	DEC  R25
000764 f751      	BRNE __DIVF212
000765 01f9      	MOVW R30,R18
000766 2d61      	MOV  R22,R1
000767 914f      	POP  R20
000768 913f      	POP  R19
000769 912f      	POP  R18
00076a 911f      	POP  R17
00076b 2366      	TST  R22
00076c f032      	BRMI __DIVF215
00076d 0f55      	LSL  R21
00076e 1fee      	ROL  R30
00076f 1fff      	ROL  R31
000770 1f66      	ROL  R22
000771 957a      	DEC  R23
000772 f243      	BRVS __DIVF217
                 __DIVF215:
000773 de84      	RCALL __ROUND_REPACK
000774 915f      	POP  R21
000775 9508      	RET
                 
                 __CMPF12:
000776 2399      	TST  R25
000777 f09a      	BRMI __CMPF120
000778 2377      	TST  R23
000779 f042      	BRMI __CMPF121
00077a 1797      	CP   R25,R23
00077b f048      	BRLO __CMPF122
00077c f429      	BRNE __CMPF121
00077d 17ae      	CP   R26,R30
00077e 07bf      	CPC  R27,R31
00077f 0786      	CPC  R24,R22
000780 f020      	BRLO __CMPF122
000781 f031      	BREQ __CMPF123
                 __CMPF121:
000782 9498      	CLZ
000783 9488      	CLC
000784 9508      	RET
                 __CMPF122:
000785 9498      	CLZ
000786 9408      	SEC
000787 9508      	RET
                 __CMPF123:
000788 9418      	SEZ
000789 9488      	CLC
00078a 9508      	RET
                 __CMPF120:
00078b 2377      	TST  R23
00078c f7c2      	BRPL __CMPF122
00078d 1797      	CP   R25,R23
00078e f398      	BRLO __CMPF121
00078f f7a9      	BRNE __CMPF122
000790 17ea      	CP   R30,R26
000791 07fb      	CPC  R31,R27
000792 0768      	CPC  R22,R24
000793 f388      	BRLO __CMPF122
000794 f399      	BREQ __CMPF123
000795 cfec      	RJMP __CMPF121
                 
                 __ADDW2R15:
000796 2400      	CLR  R0
000797 0daf      	ADD  R26,R15
000798 1db0      	ADC  R27,R0
000799 9508      	RET
                 
                 __ANEGW1:
00079a 95f1      	NEG  R31
00079b 95e1      	NEG  R30
00079c 40f0      	SBCI R31,0
00079d 9508      	RET
                 
                 __ANEGD1:
00079e 95f0      	COM  R31
00079f 9560      	COM  R22
0007a0 9570      	COM  R23
0007a1 95e1      	NEG  R30
0007a2 4fff      	SBCI R31,-1
0007a3 4f6f      	SBCI R22,-1
0007a4 4f7f      	SBCI R23,-1
0007a5 9508      	RET
                 
                 __CWD1:
0007a6 2f6f      	MOV  R22,R31
0007a7 0f66      	ADD  R22,R22
0007a8 0b66      	SBC  R22,R22
0007a9 2f76      	MOV  R23,R22
0007aa 9508      	RET
                 
                 __DIVW21U:
0007ab 2400      	CLR  R0
0007ac 2411      	CLR  R1
0007ad e190      	LDI  R25,16
                 __DIVW21U1:
0007ae 0faa      	LSL  R26
0007af 1fbb      	ROL  R27
0007b0 1c00      	ROL  R0
0007b1 1c11      	ROL  R1
0007b2 1a0e      	SUB  R0,R30
0007b3 0a1f      	SBC  R1,R31
0007b4 f418      	BRCC __DIVW21U2
0007b5 0e0e      	ADD  R0,R30
0007b6 1e1f      	ADC  R1,R31
0007b7 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0007b8 60a1      	SBR  R26,1
                 __DIVW21U3:
0007b9 959a      	DEC  R25
0007ba f799      	BRNE __DIVW21U1
0007bb 01fd      	MOVW R30,R26
0007bc 01d0      	MOVW R26,R0
0007bd 9508      	RET
                 
                 __MODW21:
0007be 94e8      	CLT
0007bf ffb7      	SBRS R27,7
0007c0 c004      	RJMP __MODW211
0007c1 95a0      	COM  R26
0007c2 95b0      	COM  R27
0007c3 9611      	ADIW R26,1
0007c4 9468      	SET
                 __MODW211:
0007c5 fdf7      	SBRC R31,7
0007c6 dfd3      	RCALL __ANEGW1
0007c7 dfe3      	RCALL __DIVW21U
0007c8 01fd      	MOVW R30,R26
0007c9 f40e      	BRTC __MODW212
0007ca dfcf      	RCALL __ANEGW1
                 __MODW212:
0007cb 9508      	RET
                 
                 __GETW1P:
0007cc 91ed      	LD   R30,X+
0007cd 91fc      	LD   R31,X
0007ce 9711      	SBIW R26,1
0007cf 9508      	RET
                 
                 __GETW1PF:
0007d0 9005      	LPM  R0,Z+
0007d1 91f4      	LPM  R31,Z
0007d2 2de0      	MOV  R30,R0
0007d3 9508      	RET
                 
                 __GETD1S0:
0007d4 81e8      	LD   R30,Y
0007d5 81f9      	LDD  R31,Y+1
0007d6 816a      	LDD  R22,Y+2
0007d7 817b      	LDD  R23,Y+3
0007d8 9508      	RET
                 
                 __PUTPARD1:
0007d9 937a      	ST   -Y,R23
0007da 936a      	ST   -Y,R22
0007db 93fa      	ST   -Y,R31
0007dc 93ea      	ST   -Y,R30
0007dd 9508      	RET
                 
                 __PUTPARD2:
0007de 939a      	ST   -Y,R25
0007df 938a      	ST   -Y,R24
0007e0 93ba      	ST   -Y,R27
0007e1 93aa      	ST   -Y,R26
0007e2 9508      	RET
                 
                 __SWAPD12:
0007e3 2e18      	MOV  R1,R24
0007e4 2f86      	MOV  R24,R22
0007e5 2d61      	MOV  R22,R1
0007e6 2e19      	MOV  R1,R25
0007e7 2f97      	MOV  R25,R23
0007e8 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0007e9 2e1b      	MOV  R1,R27
0007ea 2fbf      	MOV  R27,R31
0007eb 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0007ec 2e1a      	MOV  R1,R26
0007ed 2fae      	MOV  R26,R30
0007ee 2de1      	MOV  R30,R1
0007ef 9508      	RET
                 
                 __EEPROMRDB:
0007f0 99f9      	SBIC EECR,EEWE
0007f1 cffe      	RJMP __EEPROMRDB
0007f2 93ff      	PUSH R31
0007f3 b7ff      	IN   R31,SREG
0007f4 94f8      	CLI
0007f5 bda1      	OUT  EEARL,R26
0007f6 bdb2      	OUT  EEARH,R27
0007f7 9af8      	SBI  EECR,EERE
0007f8 b5e0      	IN   R30,EEDR
0007f9 bfff      	OUT  SREG,R31
0007fa 91ff      	POP  R31
0007fb 9508      	RET
                 
                 __EEPROMWRB:
0007fc 9bf9      	SBIS EECR,EEWE
0007fd c002      	RJMP __EEPROMWRB1
0007fe 95a8      	WDR
0007ff cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000800 b79f      	IN   R25,SREG
000801 94f8      	CLI
000802 bda1      	OUT  EEARL,R26
000803 bdb2      	OUT  EEARH,R27
000804 9af8      	SBI  EECR,EERE
000805 b580      	IN   R24,EEDR
000806 17e8      	CP   R30,R24
000807 f019      	BREQ __EEPROMWRB0
000808 bde0      	OUT  EEDR,R30
000809 9afa      	SBI  EECR,EEMWE
00080a 9af9      	SBI  EECR,EEWE
                 __EEPROMWRB0:
00080b bf9f      	OUT  SREG,R25
00080c 9508      	RET
                 
                 __CPD10:
00080d 9730      	SBIW R30,0
00080e 4060      	SBCI R22,0
00080f 4070      	SBCI R23,0
000810 9508      	RET
                 
                 __SAVELOCR6:
000811 935a      	ST   -Y,R21
                 __SAVELOCR5:
000812 934a      	ST   -Y,R20
                 __SAVELOCR4:
000813 933a      	ST   -Y,R19
                 __SAVELOCR3:
000814 932a      	ST   -Y,R18
                 __SAVELOCR2:
000815 931a      	ST   -Y,R17
000816 930a      	ST   -Y,R16
000817 9508      	RET
                 
                 __LOADLOCR6:
000818 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000819 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00081a 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00081b 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00081c 8119      	LDD  R17,Y+1
00081d 8108      	LD   R16,Y
00081e 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
00081f 0fac      	ADD  R26,R28
000820 1fbd      	ADC  R27,R29
                 __INITLOC0:
000821 9005      	LPM  R0,Z+
000822 920d      	ST   X+,R0
000823 958a      	DEC  R24
000824 f7e1      	BRNE __INITLOC0
000825 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

AT90USB1286 register use summary:
r0 :  36 r1 :  33 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  46 r17:  40 r18:  22 r19:  39 r20:  39 r21:  71 r22:  66 r23:  56 
r24:  56 r25:  40 r26: 224 r27:  86 r28:  24 r29:   2 r30: 363 r31: 131 
x  :  32 y  : 255 z  :   8 
Registers used: 22 out of 35 (62.9%)

AT90USB1286 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  23 add   :  17 
adiw  :  34 and   :   2 andi  :  16 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   6 brcs  :   0 break :   0 breq  :  34 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  25 
brlt  :   3 brmi  :  11 brne  :  61 brpl  :   8 brsh  :   3 brtc  :   2 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   0 call  : 119 
cbi   :  12 cbr   :   0 clc   :   4 clh   :   0 cli   :   3 cln   :   0 
clr   :  42 cls   :   0 clt   :   3 clv   :   0 clz   :   2 com   :  10 
cp    :  11 cpc   :  13 cpi   :  68 cpse  :   0 dec   :  19 des   :   0 
elpm  :   0 eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   4 inc   :   2 jmp   :  52 ld    :  39 ldd   : 111 
ldi   : 194 lds   :  37 lpm   :   8 lsl   :  15 lsr   :   2 mov   :  63 
movw  :  30 mul   :  10 muls  :   0 mulsu :   0 neg   :   4 nop   :   4 
or    :   0 ori   :  13 out   :  15 pop   :  20 push  :  19 rcall :  43 
ret   :  66 reti  :   0 rjmp  : 109 rol   :  27 ror   :  14 sbc   :   9 
sbci  :  10 sbi   :  24 sbic  :   6 sbis  :   1 sbiw  :  25 sbr   :   1 
sbrc  :   3 sbrs  :  12 sec   :   5 seh   :   0 sei   :   0 sen   :   0 
ser   :   8 ses   :   0 set   :   3 sev   :   0 sez   :   1 sleep :   0 
spm   :   0 st    : 105 std   :  34 sts   :  32 sub   :   6 subi  :  31 
swap  :   2 tst   :  21 wdr   :   2 
Instructions used: 78 out of 117 (66.7%)

AT90USB1286 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00104c   4102     70   4172  131072   3.2%
[.dseg] 0x000100 0x00091f      0     31     31    8192   0.4%
[.eseg] 0x000000 0x000002      0      2      2    4096   0.0%

Assembly complete, 0 errors, 0 warnings

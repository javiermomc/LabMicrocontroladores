
AVRASM ver. 2.1.30  D:\JavierJr\Documents\ISD\FebJun20\LabMicrocontroladores\CodeVision\P01_Alarma\Debug\List\alarma.asm Tue Feb 18 16:38:07 2020

                 
                 
                 ;CodeVisionAVR C Compiler V3.38 Evaluation
                 ;(C) Copyright 1998-2019 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : AT90USB1286
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 2048 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: Off
                 ;Smart register allocation: Off
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME AT90USB1286
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 8192
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR1A=0xC8
                 	.EQU UDR1=0xCE
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x20FF
                 	.EQU __DSTACK_SIZE=0x0800
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 006f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
000046 940c 0000 	JMP  0x00
000048 940c 0000 	JMP  0x00
00004a 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00004c 2710
00004d 03e8
00004e 0064
00004f 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000050 0001      	.DB  0x1,0x0
                 _tbl16_G101:
000051 1000
000052 0100
000053 0010
000054 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000055 0303
000056 0203
000057 0c02
000058 0800      	.DB  0x3,0x3,0x3,0x2,0x2,0xC,0x0,0x8
000059 0100
00005a 0600      	.DB  0x0,0x1,0x0,0x6
                 _0x0:
00005b 3a48
00005c 3025
00005d 6932
00005e 253a      	.DB  0x48,0x3A,0x25,0x30,0x32,0x69,0x3A,0x25
00005f 3230
000060 3a69
000061 3025
000062 6932      	.DB  0x30,0x32,0x69,0x3A,0x25,0x30,0x32,0x69
000063 5420
000064 253a
000065 3230
000066 0069      	.DB  0x20,0x54,0x3A,0x25,0x30,0x32,0x69,0x0
000067 3a41
000068 2520
000069 3230
00006a 3a69      	.DB  0x41,0x3A,0x20,0x25,0x30,0x32,0x69,0x3A
00006b 3025
00006c 6932
00006d 2020
00006e 0020      	.DB  0x25,0x30,0x32,0x69,0x20,0x20,0x20,0x0
                 __RESET:
00006f 94f8      	CLI
000070 27ee      	CLR  R30
000071 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000072 e0f1      	LDI  R31,1
000073 bff5      	OUT  MCUCR,R31
000074 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000075 e08d      	LDI  R24,(14-2)+1
000076 e0a2      	LDI  R26,2
000077 27bb      	CLR  R27
                 __CLEAR_REG:
000078 93ed      	ST   X+,R30
000079 958a      	DEC  R24
00007a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00007b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00007c e290      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00007d e0a0      	LDI  R26,LOW(__SRAM_START)
00007e e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00007f 93ed      	ST   X+,R30
000080 9701      	SBIW R24,1
000081 f7e9      	BRNE __CLEAR_SRAM
                 
000082 bf8b      	OUT  RAMPZ,R24
                 
                 ;GPIOR0 INITIALIZATION
000083 e0e0      	LDI  R30,__GPIOR0_INIT
000084 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000085 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000086 bfed      	OUT  SPL,R30
000087 e2e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000088 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000089 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008a e0d9      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008b 940c 01fe 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x900
                 
                 	.CSEG
                 ;/*
                 ; * alarma.c
                 ; *
                 ; * Created: 11-Feb-20 5:39:55 PM
                 ; * Author: iavie
                 ; */
                 ;
                 ;// LCD config
                 ;#asm
                     .equ __lcd_port=0x11
                     .equ __lcd_EN=4
                     .equ __lcd_RS=5
                     .equ __lcd_D4=0
                     .equ __lcd_D5=1
                     .equ __lcd_D6=2
                     .equ __lcd_D7=3
                 ; 0000 0011 #endasm
                 ;
                 ;// DS1302 config
                 ;#asm
                 	.equ __ds1302_port=0x0B
                 	.equ __ds1302_io=2
                 	.equ __ds1302_sclk=1
                 	.equ __ds1302_rst=0
                 ; 0000 0019 #endasm
                 ;
                 ;#include <90usb1286.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <ds1302.h>
                 ;#include <display.h>
                 
                 	.CSEG
                 _SetupLCD:
                 ; .FSTART _SetupLCD
00008d 972c      	SBIW R28,12
00008e e08c      	LDI  R24,12
                +
00008f e060     +LDI R22 , LOW ( 0 )
000090 e070     +LDI R23 , HIGH ( 0 )
                 	__GETWRN 22,23,0
000091 eaea      	LDI  R30,LOW(_0x3*2)
000092 e0f0      	LDI  R31,HIGH(_0x3*2)
000093 d4e9      	RCALL __INITLOCB
000094 930a      	ST   -Y,R16
                 ;	TableSetup -> Y+1
                 ;	i -> R16
                 ; 0000 001D     SBI __lcd_port-1,__lcd_EN
000095 9a84          SBI __lcd_port-1,__lcd_EN
000096 9a85          SBI __lcd_port-1,__lcd_RS
000097 9a80          SBI __lcd_port-1,__lcd_D4
000098 9a81          SBI __lcd_port-1,__lcd_D5
000099 9a82          SBI __lcd_port-1,__lcd_D6
00009a 9a83          SBI __lcd_port-1,__lcd_D7
00009b e3a2      	LDI  R26,LOW(50)
00009c e0b0      	LDI  R27,0
00009d d706      	RCALL _delay_ms
00009e e000      	LDI  R16,LOW(0)
                 _0x5:
00009f 300c      	CPI  R16,12
0000a0 f470      	BRSH _0x6
0000a1 e0a2      	LDI  R26,LOW(2)
0000a2 e0b0      	LDI  R27,0
0000a3 d700      	RCALL _delay_ms
0000a4 2fe0      	MOV  R30,R16
0000a5 e0f0      	LDI  R31,0
0000a6 01de      	MOVW R26,R28
0000a7 9611      	ADIW R26,1
0000a8 0fae      	ADD  R26,R30
0000a9 1fbf      	ADC  R27,R31
0000aa 91ac      	LD   R26,X
0000ab d00f      	RCALL _SendDataBitsLCD
0000ac d00b      	RCALL _PulseEn
0000ad 5f0f      	SUBI R16,-1
0000ae cff0      	RJMP _0x5
                 _0x6:
0000af e0ec      	LDI  R30,LOW(12)
0000b0 93e0 0900 	STS  _cursor,R30
0000b2 91a0 0900 	LDS  R26,_cursor
0000b4 d01e      	RCALL _WriteComandLCD
0000b5 8108      	LDD  R16,Y+0
0000b6 962d      	ADIW R28,13
0000b7 9508      	RET
                 ; .FEND
                 _PulseEn:
                 ; .FSTART _PulseEn
0000b8 9a8c          SBI __lcd_port,__lcd_EN  // EN=1;
0000b9 988c          CBI __lcd_port,__lcd_EN // EN=0;
0000ba 9508      	RET
                 ; .FEND
                 _SendDataBitsLCD:
                 ; .FSTART _SendDataBitsLCD
0000bb 930a      	ST   -Y,R16
0000bc 2f0a      	MOV  R16,R26
                 ;	dato -> R16
0000bd ff03      	SBRS R16,3
0000be c002      	RJMP _0x7
0000bf 9a8b      	SBI __lcd_port,__lcd_D7
0000c0 c001      	RJMP _0x8
                 _0x7:
0000c1 988b      	CBI __lcd_port,__lcd_D7
                 _0x8:
0000c2 ff02      	SBRS R16,2
0000c3 c002      	RJMP _0x9
0000c4 9a8a      	SBI __lcd_port,__lcd_D6
0000c5 c001      	RJMP _0xA
                 _0x9:
0000c6 988a      	CBI __lcd_port,__lcd_D6
                 _0xA:
0000c7 ff01      	SBRS R16,1
0000c8 c002      	RJMP _0xB
0000c9 9a89      	SBI __lcd_port,__lcd_D5
0000ca c001      	RJMP _0xC
                 _0xB:
0000cb 9889      	CBI __lcd_port,__lcd_D5
                 _0xC:
0000cc ff00      	SBRS R16,0
0000cd c002      	RJMP _0xD
0000ce 9a88      	SBI __lcd_port,__lcd_D4
0000cf c001      	RJMP _0xE
                 _0xD:
0000d0 9888      	CBI __lcd_port,__lcd_D4
                 _0xE:
0000d1 940c 02f5 	JMP  _0x20A0005
                 ; .FEND
                 _WriteComandLCD:
                 ; .FSTART _WriteComandLCD
0000d3 931a      	ST   -Y,R17
0000d4 930a      	ST   -Y,R16
0000d5 2f1a      	MOV  R17,R26
                 ;	Comando -> R17
                 ;	tempComando -> R16
0000d6 988d      	CBI __lcd_port,__lcd_RS
0000d7 c004      	RJMP _0x20A0006
                 ; .FEND
                 _CharLCD:
                 ; .FSTART _CharLCD
0000d8 931a      	ST   -Y,R17
0000d9 930a      	ST   -Y,R16
0000da 2f1a      	MOV  R17,R26
                 ;	dato -> R17
                 ;	tempdato -> R16
0000db 9a8d      	SBI __lcd_port,__lcd_RS
                 _0x20A0006:
0000dc e0a2      	LDI  R26,LOW(2)
0000dd e0b0      	LDI  R27,0
0000de d6c5      	RCALL _delay_ms
0000df 2fe1      	MOV  R30,R17
0000e0 7fe0      	ANDI R30,LOW(0xF0)
0000e1 2f0e      	MOV  R16,R30
0000e2 9502      	SWAP R16
0000e3 700f      	ANDI R16,0xF
0000e4 2fa0      	MOV  R26,R16
0000e5 dfd5      	RCALL _SendDataBitsLCD
0000e6 dfd1      	RCALL _PulseEn
0000e7 2fe1      	MOV  R30,R17
0000e8 70ef      	ANDI R30,LOW(0xF)
0000e9 2f0e      	MOV  R16,R30
0000ea 2fa0      	MOV  R26,R16
0000eb dfcf      	RCALL _SendDataBitsLCD
0000ec e0a2      	LDI  R26,LOW(2)
0000ed e0b0      	LDI  R27,0
0000ee d6b5      	RCALL _delay_ms
0000ef dfc8      	RCALL _PulseEn
0000f0 9109      	LD   R16,Y+
0000f1 9119      	LD   R17,Y+
0000f2 9508      	RET
                 ; .FEND
                 ;	Mensaje -> R17,R18
                 ;	i -> R16
                 ;	Mensaje -> R19,R20
                 ;	tiempo -> R17,R18
                 ;	i -> R16
                 _StringLCDVar:
                 ; .FSTART _StringLCDVar
0000f3 d47e      	RCALL __SAVELOCR3
                +
0000f4 2f1a     +MOV R17 , R26
0000f5 2f2b     +MOV R18 , R27
                 	__PUTW2R 17,18
                 ;	Mensaje -> R17,R18
                 ;	i -> R16
0000f6 e000      	LDI  R16,LOW(0)
                 _0x16:
0000f7 2fe0      	MOV  R30,R16
0000f8 5f0f      	SUBI R16,-1
0000f9 e0f0      	LDI  R31,0
0000fa 0fe1      	ADD  R30,R17
0000fb 1ff2      	ADC  R31,R18
0000fc 81a0      	LD   R26,Z
0000fd dfda      	RCALL _CharLCD
                +
0000fe 2fa1     +MOV R26 , R17
0000ff 2fb2     +MOV R27 , R18
                 	__GETW2R 17,18
000100 27ee      	CLR  R30
000101 0fa0      	ADD  R26,R16
000102 1fbe      	ADC  R27,R30
000103 91ec      	LD   R30,X
000104 30e0      	CPI  R30,0
000105 f789      	BRNE _0x16
000106 d472      	RCALL __LOADLOCR3
000107 940c 0301 	JMP  _0x20A0004
                 ; .FEND
                 _MoveCursor:
                 ; .FSTART _MoveCursor
000109 d3f4      	RCALL SUBOPT_0x0
                 ;	x -> R17
                 ;	y -> R16
00010a 2fe0      	MOV  R30,R16
00010b e0f0      	LDI  R31,0
00010c 9730      	SBIW R30,0
00010d f419      	BRNE _0x1B
00010e 2fa1      	MOV  R26,R17
00010f 58a0      	SUBI R26,-LOW(128)
000110 c014      	RJMP _0x4D
                 _0x1B:
000111 30e1      	CPI  R30,LOW(0x1)
000112 e0a0      	LDI  R26,HIGH(0x1)
000113 07fa      	CPC  R31,R26
000114 f419      	BRNE _0x1C
000115 2fa1      	MOV  R26,R17
000116 54a0      	SUBI R26,-LOW(192)
000117 c00d      	RJMP _0x4D
                 _0x1C:
000118 30e2      	CPI  R30,LOW(0x2)
000119 e0a0      	LDI  R26,HIGH(0x2)
00011a 07fa      	CPC  R31,R26
00011b f419      	BRNE _0x1D
00011c 2fa1      	MOV  R26,R17
00011d 56ac      	SUBI R26,-LOW(148)
00011e c006      	RJMP _0x4D
                 _0x1D:
00011f 30e3      	CPI  R30,LOW(0x3)
000120 e0a0      	LDI  R26,HIGH(0x3)
000121 07fa      	CPC  R31,R26
000122 f419      	BRNE _0x1A
000123 2fa1      	MOV  R26,R17
000124 52ac      	SUBI R26,-LOW(212)
                 _0x4D:
000125 dfad      	RCALL _WriteComandLCD
                 _0x1A:
000126 940c 02ff 	JMP  _0x20A0003
                 ; .FEND
                 ;	NoCaracter -> R19
                 ;	datos -> R17,R18
                 ;	i -> R16
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;// Alarm
                 ;
                 ;unsigned char alarmFlag; // Alarm flag to turn alarm on and off
                 ;eeprom unsigned char AH, AM; // Variables for alarm on EEPROM
                 ;
                 ;unsigned char H=0,M=0,S=0; // Variables for clock
                 ;
                 ;unsigned char time[16];
                 ;
                 ;// ADC
                 ;
                 ;// ADC variables
                 ;float temperature;
                 ;unsigned int Temp;
                 ;
                 ;// Voltage Reference: Int., cap. on AREF
                 ;#define ADC_VREF_TYPE ((1<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0035 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0036 ADMUX=adc_input | ADC_VREF_TYPE;
000128 930a      	ST   -Y,R16
000129 2f0a      	MOV  R16,R26
                 ;	adc_input -> R16
00012a 2fe0      	MOV  R30,R16
00012b 6ce0      	ORI  R30,LOW(0xC0)
00012c 93e0 007c 	STS  124,R30
                 ; 0000 0037 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0038 delay_us(10);
                +
00012e e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00012f 958a     +DEC R24
000130 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0039 // Start the AD conversion
                 ; 0000 003A ADCSRA|=(1<<ADSC);
000131 91e0 007a 	LDS  R30,122
000133 64e0      	ORI  R30,0x40
000134 93e0 007a 	STS  122,R30
                 ; 0000 003B // Wait for the AD conversion to complete
                 ; 0000 003C while ((ADCSRA & (1<<ADIF))==0);
                 _0x22:
000136 91e0 007a 	LDS  R30,122
000138 71e0      	ANDI R30,LOW(0x10)
000139 f3e1      	BREQ _0x22
                 ; 0000 003D ADCSRA|=(1<<ADIF);
00013a 91e0 007a 	LDS  R30,122
00013c 61e0      	ORI  R30,0x10
00013d 93e0 007a 	STS  122,R30
                 ; 0000 003E return ADCW;
00013f 91e0 0078 	LDS  R30,120
000141 91f0 0079 	LDS  R31,120+1
000143 940c 02f5 	JMP  _0x20A0005
                 ; 0000 003F }
                 ; .FEND
                 ;
                 ;
                 ;// Update ADC function
                 ;void updateADC(){
                 ; 0000 0043 void updateADC(){
                 _updateADC:
                 ; .FSTART _updateADC
                 ; 0000 0044     // Convert ADC values to temperature
                 ; 0000 0045     temperature = (read_adc(7)*256.0)/1024.0; // Agus nos dio esta funcion
000145 e0a7      	LDI  R26,LOW(7)
000146 dfe1      	RCALL _read_adc
000147 2766      	CLR  R22
000148 2777      	CLR  R23
000149 d524      	RCALL __CDF1
                +
00014a e0a0     +LDI R26 , LOW ( 0x43800000 )
00014b e0b0     +LDI R27 , HIGH ( 0x43800000 )
00014c e880     +LDI R24 , BYTE3 ( 0x43800000 )
00014d e493     +LDI R25 , BYTE4 ( 0x43800000 )
                 	__GETD2N 0x43800000
00014e d5a3      	RCALL __MULF12
00014f 01df      	MOVW R26,R30
000150 01cb      	MOVW R24,R22
                +
000151 e0e0     +LDI R30 , LOW ( 0x44800000 )
000152 e0f0     +LDI R31 , HIGH ( 0x44800000 )
000153 e860     +LDI R22 , BYTE3 ( 0x44800000 )
000154 e474     +LDI R23 , BYTE4 ( 0x44800000 )
                 	__GETD1N 0x44800000
000155 d5ea      	RCALL __DIVF21
000156 93e0 0915 	STS  _temperature,R30
000158 93f0 0916 	STS  _temperature+1,R31
00015a 9360 0917 	STS  _temperature+2,R22
00015c 9370 0918 	STS  _temperature+3,R23
                 ; 0000 0046     Temp = temperature;
00015e e1a9      	LDI  R26,LOW(_Temp)
00015f e0b9      	LDI  R27,HIGH(_Temp)
000160 d4d4      	RCALL __CFD1U
000161 93ed      	ST   X+,R30
000162 93fc      	ST   X,R31
                 ; 0000 0047     // TEMPORAL print statement for DEV purposes only
                 ; 0000 0048 }
000163 9508      	RET
                 ; .FEND
                 ;
                 ;// Counter
                 ;unsigned char i=0;
                 ;
                 ;// Tone
                 ;// Play frequency function
                 ;void tono(float freq){
                 ; 0000 004F void tono(float freq){
                 _tono:
                 ; .FSTART _tono
                 ; 0000 0050     if(freq == 0)
000164 d470      	RCALL __PUTPARD2
                 ;	freq -> Y+0
000165 d465      	RCALL __GETD1S0
000166 d49d      	RCALL __CPD10
000167 f421      	BRNE _0x25
                 ; 0000 0051         TCCR1B=0x00;
000168 e0e0      	LDI  R30,LOW(0)
000169 93e0 0081 	STS  129,R30
                 ; 0000 0052     else{
00016b c03c      	RJMP _0x26
                 _0x25:
                 ; 0000 0053         float cuentas;
                 ; 0000 0054         unsigned int cuentasEnt;
                 ; 0000 0055 
                 ; 0000 0056         cuentas = 500000.0/freq;
00016c 9726      	SBIW R28,6
                 ;	freq -> Y+6
                 ;	cuentas -> Y+2
                 ;	cuentasEnt -> Y+0
                +
00016d 81ee     +LDD R30 , Y + 6
00016e 81ff     +LDD R31 , Y + 6 + 1
00016f 8568     +LDD R22 , Y + 6 + 2
000170 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
000171 e0a0     +LDI R26 , LOW ( 0x48F42400 )
000172 e2b4     +LDI R27 , HIGH ( 0x48F42400 )
000173 ef84     +LDI R24 , BYTE3 ( 0x48F42400 )
000174 e498     +LDI R25 , BYTE4 ( 0x48F42400 )
                 	__GETD2N 0x48F42400
000175 d5ca      	RCALL __DIVF21
                +
000176 83ea     +STD Y + 2 , R30
000177 83fb     +STD Y + 2 + 1 , R31
000178 836c     +STD Y + 2 + 2 , R22
000179 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 0057         cuentasEnt = cuentas;
00017a 01de      	MOVW R26,R28
00017b d4b9      	RCALL __CFD1U
00017c 93ed      	ST   X+,R30
00017d 93fc      	ST   X,R31
                 ; 0000 0058         if(cuentas-cuentasEnt>=0.5)
00017e 81e8      	LD   R30,Y
00017f 81f9      	LDD  R31,Y+1
                +
000180 81aa     +LDD R26 , Y + 2
000181 81bb     +LDD R27 , Y + 2 + 1
000182 818c     +LDD R24 , Y + 2 + 2
000183 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000184 2766      	CLR  R22
000185 2777      	CLR  R23
000186 d4e7      	RCALL __CDF1
000187 d452      	RCALL __SWAPD12
000188 d518      	RCALL __SUBF12
000189 01df      	MOVW R26,R30
00018a 01cb      	MOVW R24,R22
                +
00018b e0e0     +LDI R30 , LOW ( 0x3F000000 )
00018c e0f0     +LDI R31 , HIGH ( 0x3F000000 )
00018d e060     +LDI R22 , BYTE3 ( 0x3F000000 )
00018e e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
00018f d5f4      	RCALL __CMPF12
000190 f028      	BRLO _0x27
                 ; 0000 0059             cuentasEnt++;
000191 81e8      	LD   R30,Y
000192 81f9      	LDD  R31,Y+1
000193 9631      	ADIW R30,1
000194 83e8      	ST   Y,R30
000195 83f9      	STD  Y+1,R31
                 ; 0000 005A         OCR1AH=(cuentasEnt-1)/256;
                 _0x27:
000196 81e8      	LD   R30,Y
000197 81f9      	LDD  R31,Y+1
000198 9731      	SBIW R30,1
000199 2fef      	MOV  R30,R31
00019a e0f0      	LDI  R31,0
00019b 93e0 0089 	STS  137,R30
                 ; 0000 005B         OCR1AL=(cuentasEnt-1)%256;
00019d 81e8      	LD   R30,Y
00019e 50e1      	SUBI R30,LOW(1)
00019f 93e0 0088 	STS  136,R30
                 ; 0000 005C         TCCR1A=0x40;    // Timer 1 en modo de CTC
0001a1 e4e0      	LDI  R30,LOW(64)
0001a2 93e0 0080 	STS  128,R30
                 ; 0000 005D         TCCR1B=0x09;    // Timer en CK (sin pre-escalador)
0001a4 e0e9      	LDI  R30,LOW(9)
0001a5 93e0 0081 	STS  129,R30
                 ; 0000 005E     }
0001a7 9626      	ADIW R28,6
                 _0x26:
                 ; 0000 005F }
0001a8 9624      	ADIW R28,4
0001a9 9508      	RET
                 ; .FEND
                 ;
                 ;int k=0;
                 ;char kFlag=0;
                 ;
                 ;// Play tone or song function
                 ;void playTone(){
                 ; 0000 0065 void playTone(){
                 _playTone:
                 ; .FSTART _playTone
                 ; 0000 0066     tono(k);
0001aa d358      	RCALL SUBOPT_0x1
0001ab d3f1      	RCALL __CWD1
0001ac d4c1      	RCALL __CDF1
0001ad 01df      	MOVW R26,R30
0001ae 01cb      	MOVW R24,R22
0001af dfb4      	RCALL _tono
                 ; 0000 0067     if(kFlag==0)
0001b0 91e0 091e 	LDS  R30,_kFlag
0001b2 30e0      	CPI  R30,0
0001b3 f419      	BRNE _0x28
                 ; 0000 0068         k+=50;
0001b4 d34e      	RCALL SUBOPT_0x1
0001b5 96f2      	ADIW R30,50
0001b6 c002      	RJMP _0x4E
                 ; 0000 0069     else
                 _0x28:
                 ; 0000 006A         k-=50;
0001b7 d34b      	RCALL SUBOPT_0x1
0001b8 97f2      	SBIW R30,50
                 _0x4E:
0001b9 93e0 091c 	STS  _k,R30
0001bb 93f0 091d 	STS  _k+1,R31
                 ; 0000 006B     if(k>500)
0001bd d34a      	RCALL SUBOPT_0x2
0001be 3fa5      	CPI  R26,LOW(0x1F5)
0001bf e0e1      	LDI  R30,HIGH(0x1F5)
0001c0 07be      	CPC  R27,R30
0001c1 f014      	BRLT _0x2A
                 ; 0000 006C         kFlag=1;
0001c2 e0e1      	LDI  R30,LOW(1)
0001c3 c004      	RJMP _0x4F
                 ; 0000 006D     else if (k<=50)
                 _0x2A:
0001c4 d343      	RCALL SUBOPT_0x2
0001c5 97d3      	SBIW R26,51
0001c6 f41c      	BRGE _0x2C
                 ; 0000 006E         kFlag=0;
0001c7 e0e0      	LDI  R30,LOW(0)
                 _0x4F:
0001c8 93e0 091e 	STS  _kFlag,R30
                 ; 0000 006F }
                 _0x2C:
0001ca 9508      	RET
                 ; .FEND
                 ;
                 ;// LCD
                 ;void printTime(){
                 ; 0000 0072 void printTime(){
                 _printTime:
                 ; .FSTART _printTime
                 ; 0000 0073     sprintf(time, "H:%02i:%02i:%02i T:%02i", H, M, S, Temp);
0001cb d341      	RCALL SUBOPT_0x3
                +
0001cc ebe6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001cd e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001ce 93fa      	ST   -Y,R31
0001cf 93ea      	ST   -Y,R30
0001d0 91e0 0902 	LDS  R30,_H
0001d2 d33f      	RCALL SUBOPT_0x4
0001d3 91e0 0903 	LDS  R30,_M
0001d5 d33c      	RCALL SUBOPT_0x4
0001d6 91e0 0904 	LDS  R30,_S
0001d8 d339      	RCALL SUBOPT_0x4
0001d9 91e0 0919 	LDS  R30,_Temp
0001db 91f0 091a 	LDS  R31,_Temp+1
0001dd 2766      	CLR  R22
0001de 2777      	CLR  R23
0001df d3f0      	RCALL __PUTPARD1
0001e0 e180      	LDI  R24,16
0001e1 d2bb      	RCALL _sprintf
0001e2 9664      	ADIW R28,20
                 ; 0000 0074     MoveCursor(0,0);
0001e3 e0e0      	LDI  R30,LOW(0)
0001e4 93ea      	ST   -Y,R30
0001e5 e0a0      	LDI  R26,LOW(0)
0001e6 d330      	RCALL SUBOPT_0x5
                 ; 0000 0075     StringLCDVar(time);
                 ; 0000 0076     sprintf(time, "A: %02i:%02i   ", AH, AM);
0001e7 d325      	RCALL SUBOPT_0x3
                +
0001e8 ecee     +LDI R30 , LOW ( 2 * _0x0 + ( 24 ) )
0001e9 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 24 ) )
                 	__POINTW1FN _0x0,24
0001ea 93fa      	ST   -Y,R31
0001eb 93ea      	ST   -Y,R30
0001ec e0a0      	LDI  R26,LOW(_AH)
0001ed e0b0      	LDI  R27,HIGH(_AH)
0001ee d3f8      	RCALL __EEPROMRDB
0001ef d322      	RCALL SUBOPT_0x4
0001f0 e0a1      	LDI  R26,LOW(_AM)
0001f1 e0b0      	LDI  R27,HIGH(_AM)
0001f2 d3f4      	RCALL __EEPROMRDB
0001f3 d31e      	RCALL SUBOPT_0x4
0001f4 e088      	LDI  R24,8
0001f5 d2a7      	RCALL _sprintf
0001f6 962c      	ADIW R28,12
                 ; 0000 0077     MoveCursor(0,1);
0001f7 e0e0      	LDI  R30,LOW(0)
0001f8 93ea      	ST   -Y,R30
0001f9 e0a1      	LDI  R26,LOW(1)
0001fa d31c      	RCALL SUBOPT_0x5
                 ; 0000 0078     StringLCDVar(time);
                 ; 0000 0079 }
0001fb 9508      	RET
                 ; .FEND
                 ;
                 ;// Clock
                 ;void updateClock(){
                 ; 0000 007C void updateClock(){
                 _updateClock:
                 ; .FSTART _updateClock
                 ; 0000 007D     rtc_get_time(&H, &M, &S);
0001fc d31e      	RCALL SUBOPT_0x6
                 ; 0000 007E }
0001fd 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0081 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0082 
                 ; 0000 0083 // ADC initialization
                 ; 0000 0084 // ADC Clock frequency: 125.000 kHz
                 ; 0000 0085 // ADC Voltage Reference: Int., cap. on AREF
                 ; 0000 0086 // ADC High Speed Mode: Off
                 ; 0000 0087 // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 0088 // ADC4: On, ADC5: On, ADC6: On, ADC7: Off
                 ; 0000 0089 DIDR0=(1<<ADC7D) | (0<<ADC6D) | (0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
0001fe e8e0      	LDI  R30,LOW(128)
0001ff 93e0 007e 	STS  126,R30
                 ; 0000 008A ADMUX=ADC_VREF_TYPE;
000201 ece0      	LDI  R30,LOW(192)
000202 93e0 007c 	STS  124,R30
                 ; 0000 008B ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (0<<ADPS0);
000204 e8e6      	LDI  R30,LOW(134)
000205 93e0 007a 	STS  122,R30
                 ; 0000 008C ADCSRB=(1<<ADHSM);
000207 e8e0      	LDI  R30,LOW(128)
000208 93e0 007b 	STS  123,R30
                 ; 0000 008D 
                 ; 0000 008E // LCD
                 ; 0000 008F 
                 ; 0000 0090 SetupLCD();
00020a de82      	RCALL _SetupLCD
                 ; 0000 0091 
                 ; 0000 0092 // DS1302
                 ; 0000 0093 rtc_init(0,0,0);
00020b e0e0      	LDI  R30,LOW(0)
00020c 93ea      	ST   -Y,R30
00020d 93ea      	ST   -Y,R30
00020e e0a0      	LDI  R26,LOW(0)
00020f d0f3      	RCALL _rtc_init
                 ; 0000 0094 
                 ; 0000 0095 // Tone
                 ; 0000 0096 DDRB.5=1;
000210 9a25      	SBI  0x4,5
                 ; 0000 0097 
                 ; 0000 0098 // First actions
                 ; 0000 0099 PORTC = 0x0F;
000211 e0ef      	LDI  R30,LOW(15)
000212 b9e8      	OUT  0x8,R30
                 ; 0000 009A rtc_get_time(&H, &M, &S);
000213 d307      	RCALL SUBOPT_0x6
                 ; 0000 009B printTime();
000214 dfb6      	RCALL _printTime
                 ; 0000 009C 
                 ; 0000 009D while (1){
                 _0x2F:
                 ; 0000 009E     // Please write your application code here
                 ; 0000 009F 
                 ; 0000 00A0         // Counter
                 ; 0000 00A1         delay_ms(50);
000215 e3a2      	LDI  R26,LOW(50)
000216 e0b0      	LDI  R27,0
000217 d58c      	RCALL _delay_ms
                 ; 0000 00A2         i++;
000218 91e0 091b 	LDS  R30,_i
00021a 5fef      	SUBI R30,-LOW(1)
00021b 93e0 091b 	STS  _i,R30
                 ; 0000 00A3 
                 ; 0000 00A4         // ADC
                 ; 0000 00A5         updateADC();
00021d df27      	RCALL _updateADC
                 ; 0000 00A6 
                 ; 0000 00A7         // Update clock
                 ; 0000 00A8         updateClock();
00021e dfdd      	RCALL _updateClock
                 ; 0000 00A9         // Print values un LCD display
                 ; 0000 00AA         printTime();
00021f dfab      	RCALL _printTime
                 ; 0000 00AB 
                 ; 0000 00AC         // 100 ms delay
                 ; 0000 00AD         if(i%2==0){
000220 91a0 091b 	LDS  R26,_i
000222 27bb      	CLR  R27
000223 e0e2      	LDI  R30,LOW(2)
000224 e0f0      	LDI  R31,HIGH(2)
000225 d38f      	RCALL __MODW21
000226 9730      	SBIW R30,0
000227 f459      	BRNE _0x32
                 ; 0000 00AE            if(alarmFlag==1) {
000228 91a0 0901 	LDS  R26,_alarmFlag
00022a 30a1      	CPI  R26,LOW(0x1)
00022b f411      	BRNE _0x33
                 ; 0000 00AF             playTone();
00022c df7d      	RCALL _playTone
                 ; 0000 00B0            }
                 ; 0000 00B1            else
00022d c005      	RJMP _0x34
                 _0x33:
                 ; 0000 00B2             tono(0);
                +
00022e e0a0     +LDI R26 , LOW ( 0x0 )
00022f e0b0     +LDI R27 , HIGH ( 0x0 )
000230 e080     +LDI R24 , BYTE3 ( 0x0 )
000231 e090     +LDI R25 , BYTE4 ( 0x0 )
                 	__GETD2N 0x0
000232 df31      	RCALL _tono
                 ; 0000 00B3         }
                 _0x34:
                 ; 0000 00B4 
                 ; 0000 00B5         // 500 ms delay, reset counter
                 ; 0000 00B6         if(i%10==0)
                 _0x32:
000233 91a0 091b 	LDS  R26,_i
000235 27bb      	CLR  R27
000236 e0ea      	LDI  R30,LOW(10)
000237 e0f0      	LDI  R31,HIGH(10)
000238 d37c      	RCALL __MODW21
000239 9730      	SBIW R30,0
00023a f419      	BRNE _0x35
                 ; 0000 00B7             i=0;
00023b e0e0      	LDI  R30,LOW(0)
00023c 93e0 091b 	STS  _i,R30
                 ; 0000 00B8         // Turns alarm flag on when H, M and S match
                 ; 0000 00B9         if(S==0 && M==AM && H==AH)
                 _0x35:
00023e 91a0 0904 	LDS  R26,_S
000240 30a0      	CPI  R26,LOW(0x0)
000241 f471      	BRNE _0x37
000242 e0a1      	LDI  R26,LOW(_AM)
000243 e0b0      	LDI  R27,HIGH(_AM)
000244 d3a2      	RCALL __EEPROMRDB
000245 91a0 0903 	LDS  R26,_M
000247 17ea      	CP   R30,R26
000248 f439      	BRNE _0x37
000249 e0a0      	LDI  R26,LOW(_AH)
00024a e0b0      	LDI  R27,HIGH(_AH)
00024b d39b      	RCALL __EEPROMRDB
00024c 91a0 0902 	LDS  R26,_H
00024e 17ea      	CP   R30,R26
00024f f009      	BREQ _0x38
                 _0x37:
000250 c003      	RJMP _0x36
                 _0x38:
                 ; 0000 00BA             alarmFlag=1;
000251 e0e1      	LDI  R30,LOW(1)
000252 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00BB 
                 ; 0000 00BC         // Clock
                 ; 0000 00BD 
                 ; 0000 00BE         // If alarm is on, switch will turn alarm off without
                 ; 0000 00BF         //  changing the default variable
                 ; 0000 00C0         if(!PINC.0){
                 _0x36:
000254 9930      	SBIC 0x6,0
000255 c00e      	RJMP _0x39
                 ; 0000 00C1             if(alarmFlag==1)
000256 91a0 0901 	LDS  R26,_alarmFlag
000258 30a1      	CPI  R26,LOW(0x1)
000259 f421      	BRNE _0x3A
                 ; 0000 00C2                 alarmFlag = 0;
00025a e0e0      	LDI  R30,LOW(0)
00025b 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00C3             else{
00025d c006      	RJMP _0x3B
                 _0x3A:
                 ; 0000 00C4                 H++;
00025e 91e0 0902 	LDS  R30,_H
000260 5fef      	SUBI R30,-LOW(1)
000261 93e0 0902 	STS  _H,R30
                 ; 0000 00C5                 rtc_set_time(H, M, S);
000263 d2c2      	RCALL SUBOPT_0x7
                 ; 0000 00C6             }
                 _0x3B:
                 ; 0000 00C7         }
                 ; 0000 00C8         // If alarm is on, switch will turn alarm off without
                 ; 0000 00C9         //  changing the default variable
                 ; 0000 00CA         if(!PINC.1){
                 _0x39:
000264 9931      	SBIC 0x6,1
000265 c00e      	RJMP _0x3C
                 ; 0000 00CB             if(alarmFlag==1)
000266 91a0 0901 	LDS  R26,_alarmFlag
000268 30a1      	CPI  R26,LOW(0x1)
000269 f421      	BRNE _0x3D
                 ; 0000 00CC                 alarmFlag = 0;
00026a e0e0      	LDI  R30,LOW(0)
00026b 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00CD             else{
00026d c006      	RJMP _0x3E
                 _0x3D:
                 ; 0000 00CE                 M++;
00026e 91e0 0903 	LDS  R30,_M
000270 5fef      	SUBI R30,-LOW(1)
000271 93e0 0903 	STS  _M,R30
                 ; 0000 00CF                 rtc_set_time(H, M, S);
000273 d2b2      	RCALL SUBOPT_0x7
                 ; 0000 00D0             }
                 _0x3E:
                 ; 0000 00D1         }
                 ; 0000 00D2         // Verify the correct range on clock time
                 ; 0000 00D3         if(S>59)
                 _0x3C:
000274 91a0 0904 	LDS  R26,_S
000276 33ac      	CPI  R26,LOW(0x3C)
000277 f018      	BRLO _0x3F
                 ; 0000 00D4             S=0;
000278 e0e0      	LDI  R30,LOW(0)
000279 93e0 0904 	STS  _S,R30
                 ; 0000 00D5         if(M>59)
                 _0x3F:
00027b 91a0 0903 	LDS  R26,_M
00027d 33ac      	CPI  R26,LOW(0x3C)
00027e f018      	BRLO _0x40
                 ; 0000 00D6             M=0;
00027f e0e0      	LDI  R30,LOW(0)
000280 93e0 0903 	STS  _M,R30
                 ; 0000 00D7         if(H>23)
                 _0x40:
000282 91a0 0902 	LDS  R26,_H
000284 31a8      	CPI  R26,LOW(0x18)
000285 f018      	BRLO _0x41
                 ; 0000 00D8             H=0;
000286 e0e0      	LDI  R30,LOW(0)
000287 93e0 0902 	STS  _H,R30
                 ; 0000 00D9         if(AM>59)
                 _0x41:
000289 d2a5      	RCALL SUBOPT_0x8
00028a f008      	BRLO _0x42
                 ; 0000 00DA             AM=0;
00028b d2a8      	RCALL SUBOPT_0x9
                 ; 0000 00DB         if(AH>23)
                 _0x42:
00028c d2ac      	RCALL SUBOPT_0xA
00028d f008      	BRLO _0x43
                 ; 0000 00DC             AH=0;
00028e d2af      	RCALL SUBOPT_0xB
                 ; 0000 00DD 
                 ; 0000 00DE         // Alarm
                 ; 0000 00DF 
                 ; 0000 00E0         // If alarm is on, switch will turn alarm off without
                 ; 0000 00E1         //  changing the default variable
                 ; 0000 00E2         if(!PINC.2){
                 _0x43:
00028f 9932      	SBIC 0x6,2
000290 c00d      	RJMP _0x44
                 ; 0000 00E3             if(alarmFlag==1)
000291 91a0 0901 	LDS  R26,_alarmFlag
000293 30a1      	CPI  R26,LOW(0x1)
000294 f421      	BRNE _0x45
                 ; 0000 00E4                 alarmFlag = 0;
000295 e0e0      	LDI  R30,LOW(0)
000296 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00E5             else
000298 c005      	RJMP _0x46
                 _0x45:
                 ; 0000 00E6                 AH++;
000299 e0a0      	LDI  R26,LOW(_AH)
00029a e0b0      	LDI  R27,HIGH(_AH)
00029b d34b      	RCALL __EEPROMRDB
00029c 5fef      	SUBI R30,-LOW(1)
00029d d355      	RCALL __EEPROMWRB
                 ; 0000 00E7         }
                 _0x46:
                 ; 0000 00E8         // If alarm is on, switch will turn alarm off without
                 ; 0000 00E9         //  changing the default variable
                 ; 0000 00EA         if(!PINC.3){
                 _0x44:
00029e 9933      	SBIC 0x6,3
00029f c00d      	RJMP _0x47
                 ; 0000 00EB             if(alarmFlag==1)
0002a0 91a0 0901 	LDS  R26,_alarmFlag
0002a2 30a1      	CPI  R26,LOW(0x1)
0002a3 f421      	BRNE _0x48
                 ; 0000 00EC                 alarmFlag = 0;
0002a4 e0e0      	LDI  R30,LOW(0)
0002a5 93e0 0901 	STS  _alarmFlag,R30
                 ; 0000 00ED             else
0002a7 c005      	RJMP _0x49
                 _0x48:
                 ; 0000 00EE                 AM++;
0002a8 e0a1      	LDI  R26,LOW(_AM)
0002a9 e0b0      	LDI  R27,HIGH(_AM)
0002aa d33c      	RCALL __EEPROMRDB
0002ab 5fef      	SUBI R30,-LOW(1)
0002ac d346      	RCALL __EEPROMWRB
                 ; 0000 00EF         }
                 _0x49:
                 ; 0000 00F0         // Verify the correct range on alarm time
                 ; 0000 00F1         if(AM>59)
                 _0x47:
0002ad d281      	RCALL SUBOPT_0x8
0002ae f008      	BRLO _0x4A
                 ; 0000 00F2             AM=0;
0002af d284      	RCALL SUBOPT_0x9
                 ; 0000 00F3         if(AH>23)
                 _0x4A:
0002b0 d288      	RCALL SUBOPT_0xA
0002b1 f008      	BRLO _0x4B
                 ; 0000 00F4             AH=0;
0002b2 d28b      	RCALL SUBOPT_0xB
                 ; 0000 00F5     }
                 _0x4B:
0002b3 cf61      	RJMP _0x2F
                 ; 0000 00F6 }
                 _0x4C:
0002b4 cfff      	RJMP _0x4C
                 ; .FEND
                 
                 	.CSEG
                 _ds1302_rst0_G100:
                 ; .FSTART _ds1302_rst0_G100
0002b5 9858      	cbi  __ds1302_port,__ds1302_rst
                +
0002b6 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002b7 958a     +DEC R24
0002b8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002b9 9508      	RET
                 ; .FEND
                 _ds1302_write0_G100:
                 ; .FSTART _ds1302_write0_G100
0002ba 930a      	ST   -Y,R16
0002bb 2f0a      	MOV  R16,R26
0002bc 9a51          sbi  __ds1302_port-1,__ds1302_sclk
0002bd 9a52          sbi  __ds1302_port-1,__ds1302_io
0002be 9a50          sbi  __ds1302_port-1,__ds1302_rst
0002bf 9a58          sbi  __ds1302_port,__ds1302_rst
                +
0002c0 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002c1 958a     +DEC R24
0002c2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002c3 2fa0      	MOV  R26,R16
0002c4 d002      	RCALL _ds1302_write1_G100
0002c5 940c 02f5 	JMP  _0x20A0005
                 ; .FEND
                 _ds1302_write1_G100:
                 ; .FSTART _ds1302_write1_G100
0002c7 93aa      	ST   -Y,R26
0002c8 91e9          ld   r30,y+
0002c9 e0a8          ldi  r26,8
                 ds1302_write2:
0002ca 95e7          ror  r30
0002cb 985a          cbi  __ds1302_port,__ds1302_io
0002cc f408          brcc ds1302_write3
0002cd 9a5a          sbi  __ds1302_port,__ds1302_io
                 ds1302_write3:
0002ce 0000          nop
0002cf 0000          nop
0002d0 0000          nop
0002d1 0000          nop
0002d2 9a59          sbi  __ds1302_port,__ds1302_sclk
                +
0002d3 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
0002d4 958a     +DEC R24
0002d5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
0002d6 9859      	cbi  __ds1302_port,__ds1302_sclk
                +
0002d7 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
0002d8 958a     +DEC R24
0002d9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
0002da 95aa          dec  r26
0002db f771          brne ds1302_write2
0002dc 9508          ret
                 ; .FEND
                 _ds1302_read:
                 ; .FSTART _ds1302_read
0002dd 930a      	ST   -Y,R16
0002de 2f0a      	MOV  R16,R26
0002df 2fe0      	MOV  R30,R16
0002e0 60e1      	ORI  R30,1
0002e1 2fae      	MOV  R26,R30
0002e2 dfd7      	RCALL _ds1302_write0_G100
0002e3 985a          cbi  __ds1302_port,__ds1302_io
0002e4 9852          cbi  __ds1302_port-1,__ds1302_io
0002e5 e0a8          ldi  r26,8
                 ds1302_read0:
0002e6 9488          clc
0002e7 994a      	sbic __ds1302_port-2,__ds1302_io
0002e8 9408          sec
0002e9 95e7          ror  r30
0002ea 9a59          sbi  __ds1302_port,__ds1302_sclk
                +
0002eb e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
0002ec 958a     +DEC R24
0002ed f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
0002ee 9859      	cbi  __ds1302_port,__ds1302_sclk
                +
0002ef e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
0002f0 958a     +DEC R24
0002f1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
0002f2 95aa          dec  r26
0002f3 f791          brne ds1302_read0
0002f4 dfc0      	RCALL _ds1302_rst0_G100
                 _0x20A0005:
0002f5 9109      	LD   R16,Y+
0002f6 9508      	RET
                 ; .FEND
                 _ds1302_write:
                 ; .FSTART _ds1302_write
0002f7 d206      	RCALL SUBOPT_0x0
0002f8 2fe1      	MOV  R30,R17
0002f9 7fee      	ANDI R30,0xFE
0002fa 2fae      	MOV  R26,R30
0002fb dfbe      	RCALL _ds1302_write0_G100
0002fc 2fa0      	MOV  R26,R16
0002fd dfc9      	RCALL _ds1302_write1_G100
0002fe dfb6      	RCALL _ds1302_rst0_G100
                 _0x20A0003:
0002ff 8119      	LDD  R17,Y+1
000300 8108      	LDD  R16,Y+0
                 _0x20A0004:
000301 9623      	ADIW R28,3
000302 9508      	RET
                 ; .FEND
                 _rtc_init:
                 ; .FSTART _rtc_init
000303 d23f      	RCALL SUBOPT_0xC
000304 7003      	ANDI R16,LOW(3)
000305 3020      	CPI  R18,0
000306 f009      	BREQ _0x2000003
000307 6a00      	ORI  R16,LOW(160)
                 _0x2000003:
000308 3011      	CPI  R17,1
000309 f411      	BRNE _0x2000004
00030a 6004      	ORI  R16,LOW(4)
00030b c005      	RJMP _0x2000005
                 _0x2000004:
00030c 3012      	CPI  R17,2
00030d f411      	BRNE _0x2000006
00030e 6008      	ORI  R16,LOW(8)
00030f c001      	RJMP _0x2000007
                 _0x2000006:
000310 e000      	LDI  R16,LOW(0)
                 _0x2000007:
                 _0x2000005:
000311 d236      	RCALL SUBOPT_0xD
000312 e9e0      	LDI  R30,LOW(144)
000313 93ea      	ST   -Y,R30
000314 2fa0      	MOV  R26,R16
000315 c02e      	RJMP _0x20A0002
                 ; .FEND
                 _rtc_get_time:
                 ; .FSTART _rtc_get_time
000316 d258      	RCALL __SAVELOCR6
000317 018d      	MOVW R16,R26
                +
000318 812e     +LDD R18 , Y + 6
000319 813f     +LDD R19 , Y + 6 + 1
                 	__GETWRS 18,19,6
                +
00031a 8548     +LDD R20 , Y + 8
00031b 8559     +LDD R21 , Y + 8 + 1
                 	__GETWRS 20,21,8
00031c e8a5      	LDI  R26,LOW(133)
00031d dfbf      	RCALL _ds1302_read
00031e 2fae      	MOV  R26,R30
00031f d1ae      	RCALL _bcd2bin
000320 01da      	MOVW R26,R20
000321 93ec      	ST   X,R30
000322 e8a3      	LDI  R26,LOW(131)
000323 dfb9      	RCALL _ds1302_read
000324 2fae      	MOV  R26,R30
000325 d1a8      	RCALL _bcd2bin
000326 01d9      	MOVW R26,R18
000327 93ec      	ST   X,R30
000328 e8a1      	LDI  R26,LOW(129)
000329 dfb3      	RCALL _ds1302_read
00032a 2fae      	MOV  R26,R30
00032b d1a2      	RCALL _bcd2bin
00032c 01d8      	MOVW R26,R16
00032d 93ec      	ST   X,R30
00032e d247      	RCALL __LOADLOCR6
00032f 962a      	ADIW R28,10
000330 9508      	RET
                 ; .FEND
                 _rtc_set_time:
                 ; .FSTART _rtc_set_time
000331 d211      	RCALL SUBOPT_0xC
000332 d215      	RCALL SUBOPT_0xD
000333 e8e4      	LDI  R30,LOW(132)
000334 93ea      	ST   -Y,R30
000335 2fa2      	MOV  R26,R18
000336 d1a4      	RCALL _bin2bcd
000337 2fae      	MOV  R26,R30
000338 dfbe      	RCALL _ds1302_write
000339 e8e2      	LDI  R30,LOW(130)
00033a 93ea      	ST   -Y,R30
00033b 2fa1      	MOV  R26,R17
00033c d19e      	RCALL _bin2bcd
00033d 2fae      	MOV  R26,R30
00033e dfb8      	RCALL _ds1302_write
00033f e8e0      	LDI  R30,LOW(128)
000340 93ea      	ST   -Y,R30
000341 2fa0      	MOV  R26,R16
000342 d198      	RCALL _bin2bcd
000343 2fae      	MOV  R26,R30
                 _0x20A0002:
000344 dfb2      	RCALL _ds1302_write
000345 e8ee      	LDI  R30,LOW(142)
000346 93ea      	ST   -Y,R30
000347 e8a0      	LDI  R26,LOW(128)
000348 dfae      	RCALL _ds1302_write
000349 d22f      	RCALL __LOADLOCR3
00034a 9625      	ADIW R28,5
00034b 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
00034c d223      	RCALL __SAVELOCR5
00034d 019d      	MOVW R18,R26
00034e 814d      	LDD  R20,Y+5
00034f 9612      	ADIW R26,2
000350 d272      	RCALL __GETW1P
000351 9730      	SBIW R30,0
000352 f0e1      	BREQ _0x2020016
000353 01d9      	MOVW R26,R18
000354 9614      	ADIW R26,4
000355 d26d      	RCALL __GETW1P
000356 018f      	MOVW R16,R30
000357 9730      	SBIW R30,0
000358 f059      	BREQ _0x2020018
                +
000359 3002     +CPI R16 , LOW ( 2 )
00035a e0e0     +LDI R30 , HIGH ( 2 )
00035b 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00035c f060      	BRLO _0x2020019
00035d 01f8      	MOVW R30,R16
00035e 9731      	SBIW R30,1
00035f 018f      	MOVW R16,R30
                +
000360 01d9     +MOVW R26 , R18
000361 9614     +ADIW R26 , 4
000362 93ed     +ST X + , R30
000363 93fc     +ST X , R31
                 	__PUTW1RNS 18,4
                 _0x2020018:
000364 01d9      	MOVW R26,R18
000365 9612      	ADIW R26,2
000366 d1e5      	RCALL SUBOPT_0xE
000367 9731      	SBIW R30,1
000368 8340      	ST   Z,R20
                 _0x2020019:
000369 01d9      	MOVW R26,R18
00036a d258      	RCALL __GETW1P
00036b 23ff      	TST  R31
00036c f00a      	BRMI _0x202001A
00036d d1de      	RCALL SUBOPT_0xE
                 _0x202001A:
00036e c005      	RJMP _0x202001B
                 _0x2020016:
00036f 01d9      	MOVW R26,R18
000370 efef      	LDI  R30,LOW(65535)
000371 efff      	LDI  R31,HIGH(65535)
000372 93ed      	ST   X+,R30
000373 93fc      	ST   X,R31
                 _0x202001B:
000374 d202      	RCALL __LOADLOCR5
000375 9626      	ADIW R28,6
000376 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
000377 93ba      	ST   -Y,R27
000378 93aa      	ST   -Y,R26
000379 9726      	SBIW R28,6
00037a d1f4      	RCALL __SAVELOCR6
00037b e000      	LDI  R16,0
00037c 85ac      	LDD  R26,Y+12
00037d 85bd      	LDD  R27,Y+12+1
00037e e0e0      	LDI  R30,LOW(0)
00037f e0f0      	LDI  R31,HIGH(0)
000380 93ed      	ST   X+,R30
000381 93fc      	ST   X,R31
                 _0x202001C:
000382 89ea      	LDD  R30,Y+18
000383 89fb      	LDD  R31,Y+18+1
000384 9631      	ADIW R30,1
000385 8bea      	STD  Y+18,R30
000386 8bfb      	STD  Y+18+1,R31
000387 9731      	SBIW R30,1
000388 91e4      	LPM  R30,Z
000389 2f3e      	MOV  R19,R30
00038a 30e0      	CPI  R30,0
00038b f409      	BRNE PC+2
00038c c109      	RJMP _0x202001E
00038d 2fe0      	MOV  R30,R16
00038e 30e0      	CPI  R30,0
00038f f431      	BRNE _0x2020022
000390 3235      	CPI  R19,37
000391 f411      	BRNE _0x2020023
000392 e001      	LDI  R16,LOW(1)
000393 c001      	RJMP _0x2020024
                 _0x2020023:
000394 d1bd      	RCALL SUBOPT_0xF
                 _0x2020024:
000395 c0ff      	RJMP _0x2020021
                 _0x2020022:
000396 30e1      	CPI  R30,LOW(0x1)
000397 f4a1      	BRNE _0x2020025
000398 3235      	CPI  R19,37
000399 f411      	BRNE _0x2020026
00039a d1b7      	RCALL SUBOPT_0xF
00039b c0f8      	RJMP _0x20200D2
                 _0x2020026:
00039c e002      	LDI  R16,LOW(2)
00039d e050      	LDI  R21,LOW(0)
00039e e010      	LDI  R17,LOW(0)
00039f 323d      	CPI  R19,45
0003a0 f411      	BRNE _0x2020027
0003a1 e011      	LDI  R17,LOW(1)
0003a2 c0f2      	RJMP _0x2020021
                 _0x2020027:
0003a3 323b      	CPI  R19,43
0003a4 f411      	BRNE _0x2020028
0003a5 e25b      	LDI  R21,LOW(43)
0003a6 c0ee      	RJMP _0x2020021
                 _0x2020028:
0003a7 3230      	CPI  R19,32
0003a8 f411      	BRNE _0x2020029
0003a9 e250      	LDI  R21,LOW(32)
0003aa c0ea      	RJMP _0x2020021
                 _0x2020029:
0003ab c002      	RJMP _0x202002A
                 _0x2020025:
0003ac 30e2      	CPI  R30,LOW(0x2)
0003ad f439      	BRNE _0x202002B
                 _0x202002A:
0003ae e040      	LDI  R20,LOW(0)
0003af e003      	LDI  R16,LOW(3)
0003b0 3330      	CPI  R19,48
0003b1 f411      	BRNE _0x202002C
0003b2 6810      	ORI  R17,LOW(128)
0003b3 c0e1      	RJMP _0x2020021
                 _0x202002C:
0003b4 c003      	RJMP _0x202002D
                 _0x202002B:
0003b5 30e3      	CPI  R30,LOW(0x3)
0003b6 f009      	BREQ PC+2
0003b7 c0dd      	RJMP _0x2020021
                 _0x202002D:
0003b8 3330      	CPI  R19,48
0003b9 f010      	BRLO _0x2020030
0003ba 333a      	CPI  R19,58
0003bb f008      	BRLO _0x2020031
                 _0x2020030:
0003bc c007      	RJMP _0x202002F
                 _0x2020031:
0003bd e0aa      	LDI  R26,LOW(10)
0003be 9f4a      	MUL  R20,R26
0003bf 2d40      	MOV  R20,R0
0003c0 2fe3      	MOV  R30,R19
0003c1 53e0      	SUBI R30,LOW(48)
0003c2 0f4e      	ADD  R20,R30
0003c3 c0d1      	RJMP _0x2020021
                 _0x202002F:
0003c4 2fe3      	MOV  R30,R19
0003c5 36e3      	CPI  R30,LOW(0x63)
0003c6 f439      	BRNE _0x2020035
0003c7 d191      	RCALL SUBOPT_0x10
0003c8 89e8      	LDD  R30,Y+16
0003c9 89f9      	LDD  R31,Y+16+1
0003ca 81a4      	LDD  R26,Z+4
0003cb 93aa      	ST   -Y,R26
0003cc d192      	RCALL SUBOPT_0x11
0003cd c0c6      	RJMP _0x2020036
                 _0x2020035:
0003ce 37e3      	CPI  R30,LOW(0x73)
0003cf f429      	BRNE _0x2020038
0003d0 d188      	RCALL SUBOPT_0x10
0003d1 d193      	RCALL SUBOPT_0x12
0003d2 d112      	RCALL _strlen
0003d3 2f0e      	MOV  R16,R30
0003d4 c007      	RJMP _0x2020039
                 _0x2020038:
0003d5 37e0      	CPI  R30,LOW(0x70)
0003d6 f449      	BRNE _0x202003B
0003d7 d181      	RCALL SUBOPT_0x10
0003d8 d18c      	RCALL SUBOPT_0x12
0003d9 d117      	RCALL _strlenf
0003da 2f0e      	MOV  R16,R30
0003db 6018      	ORI  R17,LOW(8)
                 _0x2020039:
0003dc 6012      	ORI  R17,LOW(2)
0003dd 771f      	ANDI R17,LOW(127)
0003de e020      	LDI  R18,LOW(0)
0003df c038      	RJMP _0x202003C
                 _0x202003B:
0003e0 36e4      	CPI  R30,LOW(0x64)
0003e1 f011      	BREQ _0x202003F
0003e2 36e9      	CPI  R30,LOW(0x69)
0003e3 f411      	BRNE _0x2020040
                 _0x202003F:
0003e4 6014      	ORI  R17,LOW(4)
0003e5 c002      	RJMP _0x2020041
                 _0x2020040:
0003e6 37e5      	CPI  R30,LOW(0x75)
0003e7 f431      	BRNE _0x2020042
                 _0x2020041:
0003e8 e9e8      	LDI  R30,LOW(_tbl10_G101*2)
0003e9 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0003ea 83ee      	STD  Y+6,R30
0003eb 83ff      	STD  Y+6+1,R31
0003ec e005      	LDI  R16,LOW(5)
0003ed c00c      	RJMP _0x2020043
                 _0x2020042:
0003ee 35e8      	CPI  R30,LOW(0x58)
0003ef f411      	BRNE _0x2020045
0003f0 6018      	ORI  R17,LOW(8)
0003f1 c003      	RJMP _0x2020046
                 _0x2020045:
0003f2 37e8      	CPI  R30,LOW(0x78)
0003f3 f009      	BREQ PC+2
0003f4 c09f      	RJMP _0x2020077
                 _0x2020046:
0003f5 eae2      	LDI  R30,LOW(_tbl16_G101*2)
0003f6 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0003f7 83ee      	STD  Y+6,R30
0003f8 83ff      	STD  Y+6+1,R31
0003f9 e004      	LDI  R16,LOW(4)
                 _0x2020043:
0003fa ff12      	SBRS R17,2
0003fb c015      	RJMP _0x2020048
0003fc d15c      	RCALL SUBOPT_0x10
0003fd 89a8      	LDD  R26,Y+16
0003fe 89b9      	LDD  R27,Y+16+1
0003ff 9614      	ADIW R26,4
000400 91ed      	LD   R30,X+
000401 91fd      	LD   R31,X+
000402 87ea      	STD  Y+10,R30
000403 87fb      	STD  Y+10+1,R31
000404 85ab      	LDD  R26,Y+11
000405 23aa      	TST  R26
000406 f422      	BRPL _0x2020049
000407 d189      	RCALL __ANEGW1
000408 87ea      	STD  Y+10,R30
000409 87fb      	STD  Y+10+1,R31
00040a e25d      	LDI  R21,LOW(45)
                 _0x2020049:
00040b 3050      	CPI  R21,0
00040c f011      	BREQ _0x202004A
00040d 5f0f      	SUBI R16,-LOW(1)
00040e c001      	RJMP _0x202004B
                 _0x202004A:
00040f 7f1b      	ANDI R17,LOW(251)
                 _0x202004B:
000410 c007      	RJMP _0x202004C
                 _0x2020048:
000411 d147      	RCALL SUBOPT_0x10
000412 89a8      	LDD  R26,Y+16
000413 89b9      	LDD  R27,Y+16+1
000414 9614      	ADIW R26,4
000415 d1ad      	RCALL __GETW1P
000416 87ea      	STD  Y+10,R30
000417 87fb      	STD  Y+10+1,R31
                 _0x202004C:
                 _0x202003C:
000418 fd10      	SBRC R17,0
000419 c010      	RJMP _0x202004D
                 _0x202004E:
00041a 1704      	CP   R16,R20
00041b f470      	BRSH _0x2020050
00041c ff17      	SBRS R17,7
00041d c008      	RJMP _0x2020051
00041e ff12      	SBRS R17,2
00041f c004      	RJMP _0x2020052
000420 7f1b      	ANDI R17,LOW(251)
000421 2f35      	MOV  R19,R21
000422 5001      	SUBI R16,LOW(1)
000423 c001      	RJMP _0x2020053
                 _0x2020052:
000424 e330      	LDI  R19,LOW(48)
                 _0x2020053:
000425 c001      	RJMP _0x2020054
                 _0x2020051:
000426 e230      	LDI  R19,LOW(32)
                 _0x2020054:
000427 d12a      	RCALL SUBOPT_0xF
000428 5041      	SUBI R20,LOW(1)
000429 cff0      	RJMP _0x202004E
                 _0x2020050:
                 _0x202004D:
00042a 2f20      	MOV  R18,R16
00042b ff11      	SBRS R17,1
00042c c016      	RJMP _0x2020055
                 _0x2020056:
00042d 3020      	CPI  R18,0
00042e f099      	BREQ _0x2020058
00042f ff13      	SBRS R17,3
000430 c006      	RJMP _0x2020059
000431 81ee      	LDD  R30,Y+6
000432 81ff      	LDD  R31,Y+6+1
000433 9135      	LPM  R19,Z+
000434 83ee      	STD  Y+6,R30
000435 83ff      	STD  Y+6+1,R31
000436 c005      	RJMP _0x202005A
                 _0x2020059:
000437 81ae      	LDD  R26,Y+6
000438 81bf      	LDD  R27,Y+6+1
000439 913d      	LD   R19,X+
00043a 83ae      	STD  Y+6,R26
00043b 83bf      	STD  Y+6+1,R27
                 _0x202005A:
00043c d115      	RCALL SUBOPT_0xF
00043d 3040      	CPI  R20,0
00043e f009      	BREQ _0x202005B
00043f 5041      	SUBI R20,LOW(1)
                 _0x202005B:
000440 5021      	SUBI R18,LOW(1)
000441 cfeb      	RJMP _0x2020056
                 _0x2020058:
000442 c048      	RJMP _0x202005C
                 _0x2020055:
                 _0x202005E:
000443 e330      	LDI  R19,LOW(48)
000444 81ee      	LDD  R30,Y+6
000445 81ff      	LDD  R31,Y+6+1
000446 d180      	RCALL __GETW1PF
000447 87e8      	STD  Y+8,R30
000448 87f9      	STD  Y+8+1,R31
000449 81ee      	LDD  R30,Y+6
00044a 81ff      	LDD  R31,Y+6+1
00044b 9632      	ADIW R30,2
00044c 83ee      	STD  Y+6,R30
00044d 83ff      	STD  Y+6+1,R31
                 _0x2020060:
00044e 85e8      	LDD  R30,Y+8
00044f 85f9      	LDD  R31,Y+8+1
000450 85aa      	LDD  R26,Y+10
000451 85bb      	LDD  R27,Y+10+1
000452 17ae      	CP   R26,R30
000453 07bf      	CPC  R27,R31
000454 f050      	BRLO _0x2020062
000455 5f3f      	SUBI R19,-LOW(1)
000456 85a8      	LDD  R26,Y+8
000457 85b9      	LDD  R27,Y+8+1
000458 85ea      	LDD  R30,Y+10
000459 85fb      	LDD  R31,Y+10+1
00045a 1bea      	SUB  R30,R26
00045b 0bfb      	SBC  R31,R27
00045c 87ea      	STD  Y+10,R30
00045d 87fb      	STD  Y+10+1,R31
00045e cfef      	RJMP _0x2020060
                 _0x2020062:
00045f 333a      	CPI  R19,58
000460 f028      	BRLO _0x2020063
000461 ff13      	SBRS R17,3
000462 c002      	RJMP _0x2020064
000463 5f39      	SUBI R19,-LOW(7)
000464 c001      	RJMP _0x2020065
                 _0x2020064:
000465 5d39      	SUBI R19,-LOW(39)
                 _0x2020065:
                 _0x2020063:
000466 fd14      	SBRC R17,4
000467 c019      	RJMP _0x2020067
000468 3331      	CPI  R19,49
000469 f420      	BRSH _0x2020069
00046a 85a8      	LDD  R26,Y+8
00046b 85b9      	LDD  R27,Y+8+1
00046c 9711      	SBIW R26,1
00046d f409      	BRNE _0x2020068
                 _0x2020069:
00046e c009      	RJMP _0x20200D3
                 _0x2020068:
00046f 1742      	CP   R20,R18
000470 f010      	BRLO _0x202006D
000471 ff10      	SBRS R17,0
000472 c001      	RJMP _0x202006E
                 _0x202006D:
000473 c011      	RJMP _0x202006C
                 _0x202006E:
000474 e230      	LDI  R19,LOW(32)
000475 ff17      	SBRS R17,7
000476 c00a      	RJMP _0x202006F
000477 e330      	LDI  R19,LOW(48)
                 _0x20200D3:
000478 6110      	ORI  R17,LOW(16)
000479 ff12      	SBRS R17,2
00047a c006      	RJMP _0x2020070
00047b 7f1b      	ANDI R17,LOW(251)
00047c 935a      	ST   -Y,R21
00047d d0e1      	RCALL SUBOPT_0x11
00047e 3040      	CPI  R20,0
00047f f009      	BREQ _0x2020071
000480 5041      	SUBI R20,LOW(1)
                 _0x2020071:
                 _0x2020070:
                 _0x202006F:
                 _0x2020067:
000481 d0d0      	RCALL SUBOPT_0xF
000482 3040      	CPI  R20,0
000483 f009      	BREQ _0x2020072
000484 5041      	SUBI R20,LOW(1)
                 _0x2020072:
                 _0x202006C:
000485 5021      	SUBI R18,LOW(1)
000486 85a8      	LDD  R26,Y+8
000487 85b9      	LDD  R27,Y+8+1
000488 9712      	SBIW R26,2
000489 f008      	BRLO _0x202005F
00048a cfb8      	RJMP _0x202005E
                 _0x202005F:
                 _0x202005C:
00048b ff10      	SBRS R17,0
00048c c007      	RJMP _0x2020073
                 _0x2020074:
00048d 3040      	CPI  R20,0
00048e f029      	BREQ _0x2020076
00048f 5041      	SUBI R20,LOW(1)
000490 e2e0      	LDI  R30,LOW(32)
000491 93ea      	ST   -Y,R30
000492 d0cc      	RCALL SUBOPT_0x11
000493 cff9      	RJMP _0x2020074
                 _0x2020076:
                 _0x2020073:
                 _0x2020077:
                 _0x2020036:
                 _0x20200D2:
000494 e000      	LDI  R16,LOW(0)
                 _0x2020021:
000495 ceec      	RJMP _0x202001C
                 _0x202001E:
000496 85ac      	LDD  R26,Y+12
000497 85bd      	LDD  R27,Y+12+1
000498 91ed      	LD   R30,X+
000499 91fd      	LD   R31,X+
00049a d0db      	RCALL __LOADLOCR6
00049b 9664      	ADIW R28,20
00049c 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00049d 92ff      	PUSH R15
00049e 2ef8      	MOV  R15,R24
00049f 9726      	SBIW R28,6
0004a0 d0ce      	RCALL __SAVELOCR6
0004a1 01fe      	MOVW R30,R28
0004a2 d0e6      	RCALL __ADDW1R15
                +
0004a3 8546     +LDD R20 , Z + 14
0004a4 8557     +LDD R21 , Z + 14 + 1
                 	__GETWRZ 20,21,14
0004a5 2e04      	MOV  R0,R20
0004a6 2a05      	OR   R0,R21
0004a7 f419      	BRNE _0x2020078
0004a8 efef      	LDI  R30,LOW(65535)
0004a9 efff      	LDI  R31,HIGH(65535)
0004aa c01f      	RJMP _0x20A0001
                 _0x2020078:
0004ab 01de      	MOVW R26,R28
0004ac 9618      	ADIW R26,8
0004ad d0df      	RCALL __ADDW2R15
0004ae 018d      	MOVW R16,R26
                +
0004af 8748     +STD Y + 8 , R20
0004b0 8759     +STD Y + 8 + 1 , R21
                 	__PUTWSR 20,21,8
0004b1 e0e0      	LDI  R30,LOW(0)
0004b2 87ea      	STD  Y+10,R30
0004b3 87eb      	STD  Y+10+1,R30
0004b4 01de      	MOVW R26,R28
0004b5 961c      	ADIW R26,12
0004b6 d0d6      	RCALL __ADDW2R15
0004b7 91ed      	LD   R30,X+
0004b8 91fd      	LD   R31,X+
0004b9 93fa      	ST   -Y,R31
0004ba 93ea      	ST   -Y,R30
0004bb 931a      	ST   -Y,R17
0004bc 930a      	ST   -Y,R16
0004bd e4ec      	LDI  R30,LOW(_put_buff_G101)
0004be e0f3      	LDI  R31,HIGH(_put_buff_G101)
0004bf 93fa      	ST   -Y,R31
0004c0 93ea      	ST   -Y,R30
0004c1 01de      	MOVW R26,R28
0004c2 961c      	ADIW R26,12
0004c3 deb3      	RCALL __print_G101
0004c4 019f      	MOVW R18,R30
0004c5 85a8      	LDD  R26,Y+8
0004c6 85b9      	LDD  R27,Y+8+1
0004c7 e0e0      	LDI  R30,LOW(0)
0004c8 93ec      	ST   X,R30
0004c9 01f9      	MOVW R30,R18
                 _0x20A0001:
0004ca d0ab      	RCALL __LOADLOCR6
0004cb 962c      	ADIW R28,12
0004cc 90ff      	POP  R15
0004cd 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _bcd2bin:
                 ; .FSTART _bcd2bin
0004ce 93aa      	ST   -Y,R26
0004cf 81e8          ld   r30,y
0004d0 95e2          swap r30
0004d1 70ef          andi r30,0xf
0004d2 2fae          mov  r26,r30
0004d3 0faa          lsl  r26
0004d4 0faa          lsl  r26
0004d5 0fea          add  r30,r26
0004d6 0fee          lsl  r30
0004d7 91a9          ld   r26,y+
0004d8 70af          andi r26,0xf
0004d9 0fea          add  r30,r26
0004da 9508          ret
                 ; .FEND
                 _bin2bcd:
                 ; .FSTART _bin2bcd
0004db 93aa      	ST   -Y,R26
0004dc 91a9          ld   r26,y+
0004dd 27ee          clr  r30
                 bin2bcd0:
0004de 50aa          subi r26,10
0004df f012          brmi bin2bcd1
0004e0 5fe0          subi r30,-16
0004e1 cffc          rjmp bin2bcd0
                 bin2bcd1:
0004e2 5fa6          subi r26,-10
0004e3 0fea          add  r30,r26
0004e4 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0004e5 93ba      	ST   -Y,R27
0004e6 93aa      	ST   -Y,R26
0004e7 91a9          ld   r26,y+
0004e8 91b9          ld   r27,y+
0004e9 27ee          clr  r30
0004ea 27ff          clr  r31
                 strlen0:
0004eb 916d          ld   r22,x+
0004ec 2366          tst  r22
0004ed f011          breq strlen1
0004ee 9631          adiw r30,1
0004ef cffb          rjmp strlen0
                 strlen1:
0004f0 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0004f1 93ba      	ST   -Y,R27
0004f2 93aa      	ST   -Y,R26
0004f3 27aa          clr  r26
0004f4 27bb          clr  r27
0004f5 91e9          ld   r30,y+
0004f6 91f9          ld   r31,y+
                 strlenf0:
0004f7 9005      	lpm  r0,z+
0004f8 2000          tst  r0
0004f9 f011          breq strlenf1
0004fa 9611          adiw r26,1
0004fb cffb          rjmp strlenf0
                 strlenf1:
0004fc 01fd          movw r30,r26
0004fd 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _cursor:
000900           	.BYTE 0x1
                 _alarmFlag:
000901           	.BYTE 0x1
                 
                 	.ESEG
                 _AH:
000000           	.BYTE 0x1
                 _AM:
000001           	.BYTE 0x1
                 
                 	.DSEG
                 _H:
000902           	.BYTE 0x1
                 _M:
000903           	.BYTE 0x1
                 _S:
000904           	.BYTE 0x1
                 _time:
000905           	.BYTE 0x10
                 _temperature:
000915           	.BYTE 0x4
                 _Temp:
000919           	.BYTE 0x2
                 _i:
00091b           	.BYTE 0x1
                 _k:
00091c           	.BYTE 0x2
                 _kFlag:
00091e           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0004fe 931a      	ST   -Y,R17
0004ff 930a      	ST   -Y,R16
000500 2f0a      	MOV  R16,R26
000501 811a      	LDD  R17,Y+2
000502 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
000503 91e0 091c 	LDS  R30,_k
000505 91f0 091d 	LDS  R31,_k+1
000507 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000508 91a0 091c 	LDS  R26,_k
00050a 91b0 091d 	LDS  R27,_k+1
00050c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
00050d e0e5      	LDI  R30,LOW(_time)
00050e e0f9      	LDI  R31,HIGH(_time)
00050f 93fa      	ST   -Y,R31
000510 93ea      	ST   -Y,R30
000511 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x4:
000512 27ff      	CLR  R31
000513 2766      	CLR  R22
000514 2777      	CLR  R23
000515 d0ba      	RCALL __PUTPARD1
000516 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000517 dbf1      	RCALL _MoveCursor
000518 e0a5      	LDI  R26,LOW(_time)
000519 e0b9      	LDI  R27,HIGH(_time)
00051a cbd8      	RJMP _StringLCDVar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x6:
00051b e0e2      	LDI  R30,LOW(_H)
00051c e0f9      	LDI  R31,HIGH(_H)
00051d 93fa      	ST   -Y,R31
00051e 93ea      	ST   -Y,R30
00051f e0e3      	LDI  R30,LOW(_M)
000520 e0f9      	LDI  R31,HIGH(_M)
000521 93fa      	ST   -Y,R31
000522 93ea      	ST   -Y,R30
000523 e0a4      	LDI  R26,LOW(_S)
000524 e0b9      	LDI  R27,HIGH(_S)
000525 cdf0      	RJMP _rtc_get_time
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7:
000526 91e0 0902 	LDS  R30,_H
000528 93ea      	ST   -Y,R30
000529 91e0 0903 	LDS  R30,_M
00052b 93ea      	ST   -Y,R30
00052c 91a0 0904 	LDS  R26,_S
00052e ce02      	RJMP _rtc_set_time
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
00052f e0a1      	LDI  R26,LOW(_AM)
000530 e0b0      	LDI  R27,HIGH(_AM)
000531 d0b5      	RCALL __EEPROMRDB
000532 33ec      	CPI  R30,LOW(0x3C)
000533 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
000534 e0a1      	LDI  R26,LOW(_AM)
000535 e0b0      	LDI  R27,HIGH(_AM)
000536 e0e0      	LDI  R30,LOW(0)
000537 d0bb      	RCALL __EEPROMWRB
000538 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000539 e0a0      	LDI  R26,LOW(_AH)
00053a e0b0      	LDI  R27,HIGH(_AH)
00053b d0ab      	RCALL __EEPROMRDB
00053c 31e8      	CPI  R30,LOW(0x18)
00053d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
00053e e0a0      	LDI  R26,LOW(_AH)
00053f e0b0      	LDI  R27,HIGH(_AH)
000540 e0e0      	LDI  R30,LOW(0)
000541 d0b1      	RCALL __EEPROMWRB
000542 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000543 d02e      	RCALL __SAVELOCR3
000544 2f0a      	MOV  R16,R26
000545 811b      	LDD  R17,Y+3
000546 812c      	LDD  R18,Y+4
000547 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
000548 e8ee      	LDI  R30,LOW(142)
000549 93ea      	ST   -Y,R30
00054a e0a0      	LDI  R26,LOW(0)
00054b cdab      	RJMP _ds1302_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xE:
00054c 91ed      	LD   R30,X+
00054d 91fd      	LD   R31,X+
00054e 9631      	ADIW R30,1
00054f 93fe      	ST   -X,R31
000550 93ee      	ST   -X,R30
000551 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0xF:
000552 933a      	ST   -Y,R19
000553 85ad      	LDD  R26,Y+13
000554 85be      	LDD  R27,Y+13+1
000555 85ef      	LDD  R30,Y+15
000556 89f8      	LDD  R31,Y+15+1
000557 9509      	ICALL
000558 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x10:
000559 89e8      	LDD  R30,Y+16
00055a 89f9      	LDD  R31,Y+16+1
00055b 9734      	SBIW R30,4
00055c 8be8      	STD  Y+16,R30
00055d 8bf9      	STD  Y+16+1,R31
00055e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x11:
00055f 85ad      	LDD  R26,Y+13
000560 85be      	LDD  R27,Y+13+1
000561 85ef      	LDD  R30,Y+15
000562 89f8      	LDD  R31,Y+15+1
000563 9509      	ICALL
000564 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x12:
000565 89a8      	LDD  R26,Y+16
000566 89b9      	LDD  R27,Y+16+1
000567 9614      	ADIW R26,4
000568 91ed      	LD   R30,X+
000569 91fd      	LD   R31,X+
00056a 83ee      	STD  Y+6,R30
00056b 83ff      	STD  Y+6+1,R31
00056c 81ae      	LDD  R26,Y+6
00056d 81bf      	LDD  R27,Y+6+1
00056e 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
00056f 935a      	ST   -Y,R21
                 __SAVELOCR5:
000570 934a      	ST   -Y,R20
                 __SAVELOCR4:
000571 933a      	ST   -Y,R19
                 __SAVELOCR3:
000572 932a      	ST   -Y,R18
                 __SAVELOCR2:
000573 931a      	ST   -Y,R17
000574 930a      	ST   -Y,R16
000575 9508      	RET
                 
                 __LOADLOCR6:
000576 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000577 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000578 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000579 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00057a 8119      	LDD  R17,Y+1
00057b 8108      	LD   R16,Y
00057c 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
00057d 93af      	PUSH R26
00057e 93bf      	PUSH R27
00057f 01db      	MOVW R26,R22
000580 0fac      	ADD  R26,R28
000581 1fbd      	ADC  R27,R29
                 __INITLOC0:
000582 9005      	LPM  R0,Z+
000583 920d      	ST   X+,R0
000584 958a      	DEC  R24
000585 f7e1      	BRNE __INITLOC0
000586 91bf      	POP  R27
000587 91af      	POP  R26
000588 9508      	RET
                 
                 __ADDW1R15:
000589 2400      	CLR  R0
00058a 0def      	ADD  R30,R15
00058b 1df0      	ADC  R31,R0
00058c 9508      	RET
                 
                 __ADDW2R15:
00058d 2400      	CLR  R0
00058e 0daf      	ADD  R26,R15
00058f 1db0      	ADC  R27,R0
000590 9508      	RET
                 
                 __ANEGW1:
000591 95f1      	NEG  R31
000592 95e1      	NEG  R30
000593 40f0      	SBCI R31,0
000594 9508      	RET
                 
                 __ANEGD1:
000595 95f0      	COM  R31
000596 9560      	COM  R22
000597 9570      	COM  R23
000598 95e1      	NEG  R30
000599 4fff      	SBCI R31,-1
00059a 4f6f      	SBCI R22,-1
00059b 4f7f      	SBCI R23,-1
00059c 9508      	RET
                 
                 __CWD1:
00059d 2f6f      	MOV  R22,R31
00059e 0f66      	ADD  R22,R22
00059f 0b66      	SBC  R22,R22
0005a0 2f76      	MOV  R23,R22
0005a1 9508      	RET
                 
                 __DIVW21U:
0005a2 2400      	CLR  R0
0005a3 2411      	CLR  R1
0005a4 e190      	LDI  R25,16
                 __DIVW21U1:
0005a5 0faa      	LSL  R26
0005a6 1fbb      	ROL  R27
0005a7 1c00      	ROL  R0
0005a8 1c11      	ROL  R1
0005a9 1a0e      	SUB  R0,R30
0005aa 0a1f      	SBC  R1,R31
0005ab f418      	BRCC __DIVW21U2
0005ac 0e0e      	ADD  R0,R30
0005ad 1e1f      	ADC  R1,R31
0005ae c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0005af 60a1      	SBR  R26,1
                 __DIVW21U3:
0005b0 959a      	DEC  R25
0005b1 f799      	BRNE __DIVW21U1
0005b2 01fd      	MOVW R30,R26
0005b3 01d0      	MOVW R26,R0
0005b4 9508      	RET
                 
                 __MODW21:
0005b5 94e8      	CLT
0005b6 ffb7      	SBRS R27,7
0005b7 c004      	RJMP __MODW211
0005b8 95b1      	NEG  R27
0005b9 95a1      	NEG  R26
0005ba 40b0      	SBCI R27,0
0005bb 9468      	SET
                 __MODW211:
0005bc fdf7      	SBRC R31,7
0005bd dfd3      	RCALL __ANEGW1
0005be dfe3      	RCALL __DIVW21U
0005bf 01fd      	MOVW R30,R26
0005c0 f40e      	BRTC __MODW212
0005c1 dfcf      	RCALL __ANEGW1
                 __MODW212:
0005c2 9508      	RET
                 
                 __GETW1P:
0005c3 91ed      	LD   R30,X+
0005c4 91fc      	LD   R31,X
0005c5 9711      	SBIW R26,1
0005c6 9508      	RET
                 
                 __GETW1PF:
0005c7 9005      	LPM  R0,Z+
0005c8 91f4      	LPM  R31,Z
0005c9 2de0      	MOV  R30,R0
0005ca 9508      	RET
                 
                 __GETD1S0:
0005cb 81e8      	LD   R30,Y
0005cc 81f9      	LDD  R31,Y+1
0005cd 816a      	LDD  R22,Y+2
0005ce 817b      	LDD  R23,Y+3
0005cf 9508      	RET
                 
                 __PUTPARD1:
0005d0 937a      	ST   -Y,R23
0005d1 936a      	ST   -Y,R22
0005d2 93fa      	ST   -Y,R31
0005d3 93ea      	ST   -Y,R30
0005d4 9508      	RET
                 
                 __PUTPARD2:
0005d5 939a      	ST   -Y,R25
0005d6 938a      	ST   -Y,R24
0005d7 93ba      	ST   -Y,R27
0005d8 93aa      	ST   -Y,R26
0005d9 9508      	RET
                 
                 __SWAPD12:
0005da 2e18      	MOV  R1,R24
0005db 2f86      	MOV  R24,R22
0005dc 2d61      	MOV  R22,R1
0005dd 2e19      	MOV  R1,R25
0005de 2f97      	MOV  R25,R23
0005df 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0005e0 2e1b      	MOV  R1,R27
0005e1 2fbf      	MOV  R27,R31
0005e2 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0005e3 2e1a      	MOV  R1,R26
0005e4 2fae      	MOV  R26,R30
0005e5 2de1      	MOV  R30,R1
0005e6 9508      	RET
                 
                 __EEPROMRDB:
0005e7 99f9      	SBIC EECR,EEWE
0005e8 cffe      	RJMP __EEPROMRDB
0005e9 93ff      	PUSH R31
0005ea b7ff      	IN   R31,SREG
0005eb 94f8      	CLI
0005ec bda1      	OUT  EEARL,R26
0005ed bdb2      	OUT  EEARH,R27
0005ee 9af8      	SBI  EECR,EERE
0005ef b5e0      	IN   R30,EEDR
0005f0 bfff      	OUT  SREG,R31
0005f1 91ff      	POP  R31
0005f2 9508      	RET
                 
                 __EEPROMWRB:
0005f3 9bf9      	SBIS EECR,EEWE
0005f4 c002      	RJMP __EEPROMWRB1
0005f5 95a8      	WDR
0005f6 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
0005f7 b79f      	IN   R25,SREG
0005f8 94f8      	CLI
0005f9 bda1      	OUT  EEARL,R26
0005fa bdb2      	OUT  EEARH,R27
0005fb 9af8      	SBI  EECR,EERE
0005fc b580      	IN   R24,EEDR
0005fd 17e8      	CP   R30,R24
0005fe f019      	BREQ __EEPROMWRB0
0005ff bde0      	OUT  EEDR,R30
000600 9afa      	SBI  EECR,EEMWE
000601 9af9      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000602 bf9f      	OUT  SREG,R25
000603 9508      	RET
                 
                 __CPD10:
000604 9730      	SBIW R30,0
000605 4060      	SBCI R22,0
000606 4070      	SBCI R23,0
000607 9508      	RET
                 
                 __ROUND_REPACK:
000608 2355      	TST  R21
000609 f442      	BRPL __REPACK
00060a 3850      	CPI  R21,0x80
00060b f411      	BRNE __ROUND_REPACK0
00060c ffe0      	SBRS R30,0
00060d c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00060e 9631      	ADIW R30,1
00060f 1f69      	ADC  R22,R25
000610 1f79      	ADC  R23,R25
000611 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000612 e850      	LDI  R21,0x80
000613 2757      	EOR  R21,R23
000614 f411      	BRNE __REPACK0
000615 935f      	PUSH R21
000616 c0ca      	RJMP __ZERORES
                 __REPACK0:
000617 3f5f      	CPI  R21,0xFF
000618 f031      	BREQ __REPACK1
000619 0f66      	LSL  R22
00061a 0c00      	LSL  R0
00061b 9557      	ROR  R21
00061c 9567      	ROR  R22
00061d 2f75      	MOV  R23,R21
00061e 9508      	RET
                 __REPACK1:
00061f 935f      	PUSH R21
000620 2000      	TST  R0
000621 f00a      	BRMI __REPACK2
000622 c0c9      	RJMP __MAXRES
                 __REPACK2:
000623 c0c2      	RJMP __MINRES
                 
                 __UNPACK:
000624 e850      	LDI  R21,0x80
000625 2e19      	MOV  R1,R25
000626 2215      	AND  R1,R21
000627 0f88      	LSL  R24
000628 1f99      	ROL  R25
000629 2795      	EOR  R25,R21
00062a 0f55      	LSL  R21
00062b 9587      	ROR  R24
                 
                 __UNPACK1:
00062c e850      	LDI  R21,0x80
00062d 2e07      	MOV  R0,R23
00062e 2205      	AND  R0,R21
00062f 0f66      	LSL  R22
000630 1f77      	ROL  R23
000631 2775      	EOR  R23,R21
000632 0f55      	LSL  R21
000633 9567      	ROR  R22
000634 9508      	RET
                 
                 __CFD1U:
000635 9468      	SET
000636 c001      	RJMP __CFD1U0
                 __CFD1:
000637 94e8      	CLT
                 __CFD1U0:
000638 935f      	PUSH R21
000639 dff2      	RCALL __UNPACK1
00063a 3870      	CPI  R23,0x80
00063b f018      	BRLO __CFD10
00063c 3f7f      	CPI  R23,0xFF
00063d f408      	BRCC __CFD10
00063e c0a2      	RJMP __ZERORES
                 __CFD10:
00063f e156      	LDI  R21,22
000640 1b57      	SUB  R21,R23
000641 f4aa      	BRPL __CFD11
000642 9551      	NEG  R21
000643 3058      	CPI  R21,8
000644 f40e      	BRTC __CFD19
000645 3059      	CPI  R21,9
                 __CFD19:
000646 f030      	BRLO __CFD17
000647 efef      	SER  R30
000648 efff      	SER  R31
000649 ef6f      	SER  R22
00064a e77f      	LDI  R23,0x7F
00064b f977      	BLD  R23,7
00064c c01a      	RJMP __CFD15
                 __CFD17:
00064d 2777      	CLR  R23
00064e 2355      	TST  R21
00064f f0b9      	BREQ __CFD15
                 __CFD18:
000650 0fee      	LSL  R30
000651 1fff      	ROL  R31
000652 1f66      	ROL  R22
000653 1f77      	ROL  R23
000654 955a      	DEC  R21
000655 f7d1      	BRNE __CFD18
000656 c010      	RJMP __CFD15
                 __CFD11:
000657 2777      	CLR  R23
                 __CFD12:
000658 3058      	CPI  R21,8
000659 f028      	BRLO __CFD13
00065a 2fef      	MOV  R30,R31
00065b 2ff6      	MOV  R31,R22
00065c 2f67      	MOV  R22,R23
00065d 5058      	SUBI R21,8
00065e cff9      	RJMP __CFD12
                 __CFD13:
00065f 2355      	TST  R21
000660 f031      	BREQ __CFD15
                 __CFD14:
000661 9576      	LSR  R23
000662 9567      	ROR  R22
000663 95f7      	ROR  R31
000664 95e7      	ROR  R30
000665 955a      	DEC  R21
000666 f7d1      	BRNE __CFD14
                 __CFD15:
000667 2000      	TST  R0
000668 f40a      	BRPL __CFD16
000669 df2b      	RCALL __ANEGD1
                 __CFD16:
00066a 915f      	POP  R21
00066b 9508      	RET
                 
                 __CDF1U:
00066c 9468      	SET
00066d c001      	RJMP __CDF1U0
                 __CDF1:
00066e 94e8      	CLT
                 __CDF1U0:
00066f 9730      	SBIW R30,0
000670 4060      	SBCI R22,0
000671 4070      	SBCI R23,0
000672 f0b1      	BREQ __CDF10
000673 2400      	CLR  R0
000674 f026      	BRTS __CDF11
000675 2377      	TST  R23
000676 f412      	BRPL __CDF11
000677 9400      	COM  R0
000678 df1c      	RCALL __ANEGD1
                 __CDF11:
000679 2e17      	MOV  R1,R23
00067a e17e      	LDI  R23,30
00067b 2011      	TST  R1
                 __CDF12:
00067c f032      	BRMI __CDF13
00067d 957a      	DEC  R23
00067e 0fee      	LSL  R30
00067f 1fff      	ROL  R31
000680 1f66      	ROL  R22
000681 1c11      	ROL  R1
000682 cff9      	RJMP __CDF12
                 __CDF13:
000683 2fef      	MOV  R30,R31
000684 2ff6      	MOV  R31,R22
000685 2d61      	MOV  R22,R1
000686 935f      	PUSH R21
000687 df8a      	RCALL __REPACK
000688 915f      	POP  R21
                 __CDF10:
000689 9508      	RET
                 
                 __SWAPACC:
00068a 934f      	PUSH R20
00068b 01af      	MOVW R20,R30
00068c 01fd      	MOVW R30,R26
00068d 01da      	MOVW R26,R20
00068e 01ab      	MOVW R20,R22
00068f 01bc      	MOVW R22,R24
000690 01ca      	MOVW R24,R20
000691 2d40      	MOV  R20,R0
000692 2c01      	MOV  R0,R1
000693 2e14      	MOV  R1,R20
000694 914f      	POP  R20
000695 9508      	RET
                 
                 __UADD12:
000696 0fea      	ADD  R30,R26
000697 1ffb      	ADC  R31,R27
000698 1f68      	ADC  R22,R24
000699 9508      	RET
                 
                 __NEGMAN1:
00069a 95e0      	COM  R30
00069b 95f0      	COM  R31
00069c 9560      	COM  R22
00069d 5fef      	SUBI R30,-1
00069e 4fff      	SBCI R31,-1
00069f 4f6f      	SBCI R22,-1
0006a0 9508      	RET
                 
                 __SUBF12:
0006a1 935f      	PUSH R21
0006a2 df81      	RCALL __UNPACK
0006a3 3890      	CPI  R25,0x80
0006a4 f149      	BREQ __ADDF129
0006a5 e850      	LDI  R21,0x80
0006a6 2615      	EOR  R1,R21
                 
                 __ADDF120:
0006a7 3870      	CPI  R23,0x80
0006a8 f121      	BREQ __ADDF128
                 __ADDF121:
0006a9 2f57      	MOV  R21,R23
0006aa 1b59      	SUB  R21,R25
0006ab f12b      	BRVS __ADDF1211
0006ac f412      	BRPL __ADDF122
0006ad dfdc      	RCALL __SWAPACC
0006ae cffa      	RJMP __ADDF121
                 __ADDF122:
0006af 3158      	CPI  R21,24
0006b0 f018      	BRLO __ADDF123
0006b1 27aa      	CLR  R26
0006b2 27bb      	CLR  R27
0006b3 2788      	CLR  R24
                 __ADDF123:
0006b4 3058      	CPI  R21,8
0006b5 f028      	BRLO __ADDF124
0006b6 2fab      	MOV  R26,R27
0006b7 2fb8      	MOV  R27,R24
0006b8 2788      	CLR  R24
0006b9 5058      	SUBI R21,8
0006ba cff9      	RJMP __ADDF123
                 __ADDF124:
0006bb 2355      	TST  R21
0006bc f029      	BREQ __ADDF126
                 __ADDF125:
0006bd 9586      	LSR  R24
0006be 95b7      	ROR  R27
0006bf 95a7      	ROR  R26
0006c0 955a      	DEC  R21
0006c1 f7d9      	BRNE __ADDF125
                 __ADDF126:
0006c2 2d50      	MOV  R21,R0
0006c3 2551      	EOR  R21,R1
0006c4 f072      	BRMI __ADDF127
0006c5 dfd0      	RCALL __UADD12
0006c6 f438      	BRCC __ADDF129
0006c7 9567      	ROR  R22
0006c8 95f7      	ROR  R31
0006c9 95e7      	ROR  R30
0006ca 9573      	INC  R23
0006cb f413      	BRVC __ADDF129
0006cc c01f      	RJMP __MAXRES
                 __ADDF128:
0006cd dfbc      	RCALL __SWAPACC
                 __ADDF129:
0006ce df43      	RCALL __REPACK
0006cf 915f      	POP  R21
0006d0 9508      	RET
                 __ADDF1211:
0006d1 f7d8      	BRCC __ADDF128
0006d2 cffb      	RJMP __ADDF129
                 __ADDF127:
0006d3 1bea      	SUB  R30,R26
0006d4 0bfb      	SBC  R31,R27
0006d5 0b68      	SBC  R22,R24
0006d6 f051      	BREQ __ZERORES
0006d7 f410      	BRCC __ADDF1210
0006d8 9400      	COM  R0
0006d9 dfc0      	RCALL __NEGMAN1
                 __ADDF1210:
0006da 2366      	TST  R22
0006db f392      	BRMI __ADDF129
0006dc 0fee      	LSL  R30
0006dd 1fff      	ROL  R31
0006de 1f66      	ROL  R22
0006df 957a      	DEC  R23
0006e0 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0006e1 27ee      	CLR  R30
0006e2 27ff      	CLR  R31
0006e3 01bf      	MOVW R22,R30
0006e4 915f      	POP  R21
0006e5 9508      	RET
                 
                 __MINRES:
0006e6 efef      	SER  R30
0006e7 efff      	SER  R31
0006e8 e76f      	LDI  R22,0x7F
0006e9 ef7f      	SER  R23
0006ea 915f      	POP  R21
0006eb 9508      	RET
                 
                 __MAXRES:
0006ec efef      	SER  R30
0006ed efff      	SER  R31
0006ee e76f      	LDI  R22,0x7F
0006ef e77f      	LDI  R23,0x7F
0006f0 915f      	POP  R21
0006f1 9508      	RET
                 
                 __MULF12:
0006f2 935f      	PUSH R21
0006f3 df30      	RCALL __UNPACK
0006f4 3870      	CPI  R23,0x80
0006f5 f359      	BREQ __ZERORES
0006f6 3890      	CPI  R25,0x80
0006f7 f349      	BREQ __ZERORES
0006f8 2401      	EOR  R0,R1
0006f9 9408      	SEC
0006fa 1f79      	ADC  R23,R25
0006fb f423      	BRVC __MULF124
0006fc f324      	BRLT __ZERORES
                 __MULF125:
0006fd 2000      	TST  R0
0006fe f33a      	BRMI __MINRES
0006ff cfec      	RJMP __MAXRES
                 __MULF124:
000700 920f      	PUSH R0
000701 931f      	PUSH R17
000702 932f      	PUSH R18
000703 933f      	PUSH R19
000704 934f      	PUSH R20
000705 2711      	CLR  R17
000706 2722      	CLR  R18
000707 2799      	CLR  R25
000708 9f68      	MUL  R22,R24
000709 01a0      	MOVW R20,R0
00070a 9f8f      	MUL  R24,R31
00070b 2d30      	MOV  R19,R0
00070c 0d41      	ADD  R20,R1
00070d 1f59      	ADC  R21,R25
00070e 9f6b      	MUL  R22,R27
00070f 0d30      	ADD  R19,R0
000710 1d41      	ADC  R20,R1
000711 1f59      	ADC  R21,R25
000712 9f8e      	MUL  R24,R30
000713 d027      	RCALL __MULF126
000714 9fbf      	MUL  R27,R31
000715 d025      	RCALL __MULF126
000716 9f6a      	MUL  R22,R26
000717 d023      	RCALL __MULF126
000718 9fbe      	MUL  R27,R30
000719 d01d      	RCALL __MULF127
00071a 9faf      	MUL  R26,R31
00071b d01b      	RCALL __MULF127
00071c 9fae      	MUL  R26,R30
00071d 0d11      	ADD  R17,R1
00071e 1f29      	ADC  R18,R25
00071f 1f39      	ADC  R19,R25
000720 1f49      	ADC  R20,R25
000721 1f59      	ADC  R21,R25
000722 2fe3      	MOV  R30,R19
000723 2ff4      	MOV  R31,R20
000724 2f65      	MOV  R22,R21
000725 2f52      	MOV  R21,R18
000726 914f      	POP  R20
000727 913f      	POP  R19
000728 912f      	POP  R18
000729 911f      	POP  R17
00072a 900f      	POP  R0
00072b 2366      	TST  R22
00072c f02a      	BRMI __MULF122
00072d 0f55      	LSL  R21
00072e 1fee      	ROL  R30
00072f 1fff      	ROL  R31
000730 1f66      	ROL  R22
000731 c002      	RJMP __MULF123
                 __MULF122:
000732 9573      	INC  R23
000733 f24b      	BRVS __MULF125
                 __MULF123:
000734 ded3      	RCALL __ROUND_REPACK
000735 915f      	POP  R21
000736 9508      	RET
                 
                 __MULF127:
000737 0d10      	ADD  R17,R0
000738 1d21      	ADC  R18,R1
000739 1f39      	ADC  R19,R25
00073a c002      	RJMP __MULF128
                 __MULF126:
00073b 0d20      	ADD  R18,R0
00073c 1d31      	ADC  R19,R1
                 __MULF128:
00073d 1f49      	ADC  R20,R25
00073e 1f59      	ADC  R21,R25
00073f 9508      	RET
                 
                 __DIVF21:
000740 935f      	PUSH R21
000741 dee2      	RCALL __UNPACK
000742 3870      	CPI  R23,0x80
000743 f421      	BRNE __DIVF210
000744 2011      	TST  R1
                 __DIVF211:
000745 f40a      	BRPL __DIVF219
000746 cf9f      	RJMP __MINRES
                 __DIVF219:
000747 cfa4      	RJMP __MAXRES
                 __DIVF210:
000748 3890      	CPI  R25,0x80
000749 f409      	BRNE __DIVF218
                 __DIVF217:
00074a cf96      	RJMP __ZERORES
                 __DIVF218:
00074b 2401      	EOR  R0,R1
00074c 9408      	SEC
00074d 0b97      	SBC  R25,R23
00074e f41b      	BRVC __DIVF216
00074f f3d4      	BRLT __DIVF217
000750 2000      	TST  R0
000751 cff3      	RJMP __DIVF211
                 __DIVF216:
000752 2f79      	MOV  R23,R25
000753 931f      	PUSH R17
000754 932f      	PUSH R18
000755 933f      	PUSH R19
000756 934f      	PUSH R20
000757 2411      	CLR  R1
000758 2711      	CLR  R17
000759 2722      	CLR  R18
00075a 2733      	CLR  R19
00075b 01a9      	MOVW R20,R18
00075c e290      	LDI  R25,32
                 __DIVF212:
00075d 17ae      	CP   R26,R30
00075e 07bf      	CPC  R27,R31
00075f 0786      	CPC  R24,R22
000760 0741      	CPC  R20,R17
000761 f030      	BRLO __DIVF213
000762 1bae      	SUB  R26,R30
000763 0bbf      	SBC  R27,R31
000764 0b86      	SBC  R24,R22
000765 0b41      	SBC  R20,R17
000766 9408      	SEC
000767 c001      	RJMP __DIVF214
                 __DIVF213:
000768 9488      	CLC
                 __DIVF214:
000769 1f55      	ROL  R21
00076a 1f22      	ROL  R18
00076b 1f33      	ROL  R19
00076c 1c11      	ROL  R1
00076d 1faa      	ROL  R26
00076e 1fbb      	ROL  R27
00076f 1f88      	ROL  R24
000770 1f44      	ROL  R20
000771 959a      	DEC  R25
000772 f751      	BRNE __DIVF212
000773 01f9      	MOVW R30,R18
000774 2d61      	MOV  R22,R1
000775 914f      	POP  R20
000776 913f      	POP  R19
000777 912f      	POP  R18
000778 911f      	POP  R17
000779 2366      	TST  R22
00077a f032      	BRMI __DIVF215
00077b 0f55      	LSL  R21
00077c 1fee      	ROL  R30
00077d 1fff      	ROL  R31
00077e 1f66      	ROL  R22
00077f 957a      	DEC  R23
000780 f24b      	BRVS __DIVF217
                 __DIVF215:
000781 de86      	RCALL __ROUND_REPACK
000782 915f      	POP  R21
000783 9508      	RET
                 
                 __CMPF12:
000784 2399      	TST  R25
000785 f09a      	BRMI __CMPF120
000786 2377      	TST  R23
000787 f042      	BRMI __CMPF121
000788 1797      	CP   R25,R23
000789 f048      	BRLO __CMPF122
00078a f429      	BRNE __CMPF121
00078b 17ae      	CP   R26,R30
00078c 07bf      	CPC  R27,R31
00078d 0786      	CPC  R24,R22
00078e f020      	BRLO __CMPF122
00078f f031      	BREQ __CMPF123
                 __CMPF121:
000790 9498      	CLZ
000791 9488      	CLC
000792 9508      	RET
                 __CMPF122:
000793 9498      	CLZ
000794 9408      	SEC
000795 9508      	RET
                 __CMPF123:
000796 9418      	SEZ
000797 9488      	CLC
000798 9508      	RET
                 __CMPF120:
000799 2377      	TST  R23
00079a f7c2      	BRPL __CMPF122
00079b 1797      	CP   R25,R23
00079c f398      	BRLO __CMPF121
00079d f7a9      	BRNE __CMPF122
00079e 17ea      	CP   R30,R26
00079f 07fb      	CPC  R31,R27
0007a0 0768      	CPC  R22,R24
0007a1 f388      	BRLO __CMPF122
0007a2 f399      	BREQ __CMPF123
0007a3 cfec      	RJMP __CMPF121
                 
                 _delay_ms:
0007a4 9610      	adiw r26,0
0007a5 f039      	breq __delay_ms1
                 __delay_ms0:
0007a6 95a8      	wdr
                +
0007a7 ed80     +LDI R24 , LOW ( 0x7D0 )
0007a8 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0007a9 9701     +SBIW R24 , 1
0007aa f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0007ab 9711      	sbiw r26,1
0007ac f7c9      	brne __delay_ms0
                 __delay_ms1:
0007ad 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

AT90USB1286 register use summary:
r0 :  40 r1 :  33 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   5 
r16:  72 r17:  60 r18:  37 r19:  40 r20:  46 r21:  74 r22:  68 r23:  56 
r24:  56 r25:  40 r26: 220 r27:  81 r28:  23 r29:   2 r30: 337 r31: 131 
x  :  35 y  : 198 z  :  11 
Registers used: 22 out of 35 (62.9%)

AT90USB1286 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  24 add   :  18 
adiw  :  31 and   :   2 andi  :  12 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   6 brcs  :   0 break :   0 breq  :  30 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  25 
brlt  :   3 brmi  :  11 brne  :  61 brpl  :   8 brsh  :   3 brtc  :   2 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   0 call  :   0 
cbi   :  12 cbr   :   0 clc   :   4 clh   :   0 cli   :   3 cln   :   0 
clr   :  39 cls   :   0 clt   :   3 clv   :   0 clz   :   2 com   :   8 
cp    :  11 cpc   :  13 cpi   :  66 cpse  :   0 dec   :  19 des   :   0 
elpm  :   0 eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   4 inc   :   2 jmp   :  44 ld    :  34 ldd   :  82 
ldi   : 200 lds   :  35 lpm   :   8 lsl   :  15 lsr   :   2 mov   :  94 
movw  :  43 mul   :  10 muls  :   0 mulsu :   0 neg   :   6 nop   :   4 
or    :   1 ori   :  13 out   :  15 pop   :  22 push  :  21 rcall : 173 
ret   :  73 reti  :   0 rjmp  : 116 rol   :  27 ror   :  14 sbc   :   9 
sbci  :  11 sbi   :  24 sbic  :   6 sbis  :   1 sbiw  :  24 sbr   :   1 
sbrc  :   3 sbrs  :  16 sec   :   5 seh   :   0 sei   :   0 sen   :   0 
ser   :   8 ses   :   0 set   :   3 sev   :   0 sez   :   1 sleep :   0 
spm   :   0 st    :  87 std   :  35 sts   :  32 sub   :   6 subi  :  31 
swap  :   2 tst   :  21 wdr   :   2 
Instructions used: 78 out of 117 (66.7%)

AT90USB1286 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000f5c   3862     70   3932  131072   3.0%
[.dseg] 0x000100 0x00091f      0     31     31    8192   0.4%
[.eseg] 0x000000 0x000002      0      2      2    4096   0.0%

Assembly complete, 0 errors, 0 warnings

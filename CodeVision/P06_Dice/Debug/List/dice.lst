
AVRASM ver. 2.1.30  C:\Users\980006738\Documents\Semestre 8\Lab de Micros\LabMicrocontroladores\CodeVision\P06_Dice\Debug\List\dice.asm Tue Apr 28 21:26:51 2020

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : AT90USB1286
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 2048 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: Off
                 ;Smart register allocation: Off
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME AT90USB1286
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 8192
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR1A=0xC8
                 	.EQU UDR1=0xCE
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x20FF
                 	.EQU __DSTACK_SIZE=0x0800
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0077 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
000046 940c 0000 	JMP  0x00
000048 940c 0000 	JMP  0x00
00004a 940c 0000 	JMP  0x00
                 
                 _Dice:
00004c 0000
00004d 1800
00004e 0018
00004f 0000      	.DB  0x0,0x0,0x0,0x18,0x18,0x0,0x0,0x0
000050 c0c0
000051 0000
000052 0000
000053 0303      	.DB  0xC0,0xC0,0x0,0x0,0x0,0x0,0x3,0x3
000054 c0c0
000055 1800
000056 0018
000057 0303      	.DB  0xC0,0xC0,0x0,0x18,0x18,0x0,0x3,0x3
000058 c3c3
000059 0000
00005a 0000
00005b c3c3      	.DB  0xC3,0xC3,0x0,0x0,0x0,0x0,0xC3,0xC3
00005c c3c3
00005d 1800
00005e 0018
00005f c3c3      	.DB  0xC3,0xC3,0x0,0x18,0x18,0x0,0xC3,0xC3
000060 dbdb
000061 0000
000062 0000
000063 dbdb      	.DB  0xDB,0xDB,0x0,0x0,0x0,0x0,0xDB,0xDB
                 _SmallDice:
000064 0200
000065 0400
000066 0100
000067 0204      	.DB  0x0,0x2,0x0,0x4,0x0,0x1,0x4,0x2
000068 0501
000069 0500
00006a 0205
00006b 0705      	.DB  0x1,0x5,0x0,0x5,0x5,0x2,0x5,0x7
00006c 0700      	.DB  0x0,0x7
                 
                 _0x2000060:
C:\Users\980006738\Documents\Semestre 8\Lab de Micros\LabMicrocontroladores\CodeVision\P06_Dice\Debug\List\dice.asm(1152): warning: .cseg .db misalignment - padding zero byte
00006d 0001      	.DB  0x1
                 _0x2000000:
00006e 4e2d
00006f 4e41
000070 4900
000071 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\980006738\Documents\Semestre 8\Lab de Micros\LabMicrocontroladores\CodeVision\P06_Dice\Debug\List\dice.asm(1155): warning: .cseg .db misalignment - padding zero byte
000072 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000073 0001      	.DW  0x01
000074 0905      	.DW  __seed_G100
000075 00da      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
000076 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000077 94f8      	CLI
000078 27ee      	CLR  R30
000079 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00007a e0f1      	LDI  R31,1
00007b bff5      	OUT  MCUCR,R31
00007c bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00007d e08d      	LDI  R24,(14-2)+1
00007e e0a2      	LDI  R26,2
00007f 27bb      	CLR  R27
                 __CLEAR_REG:
000080 93ed      	ST   X+,R30
000081 958a      	DEC  R24
000082 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000083 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000084 e290      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000085 e0a0      	LDI  R26,LOW(__SRAM_START)
000086 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000087 93ed      	ST   X+,R30
000088 9701      	SBIW R24,1
000089 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00008a eee6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00008b e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00008c 9185      	LPM  R24,Z+
00008d 9195      	LPM  R25,Z+
00008e 9700      	SBIW R24,0
00008f f061      	BREQ __GLOBAL_INI_END
000090 91a5      	LPM  R26,Z+
000091 91b5      	LPM  R27,Z+
000092 9005      	LPM  R0,Z+
000093 9015      	LPM  R1,Z+
000094 01bf      	MOVW R22,R30
000095 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000096 9005      	LPM  R0,Z+
000097 920d      	ST   X+,R0
000098 9701      	SBIW R24,1
000099 f7e1      	BRNE __GLOBAL_INI_LOOP
00009a 01fb      	MOVW R30,R22
00009b cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00009c bf8b      	OUT  RAMPZ,R24
                 
                 ;GPIOR0 INITIALIZATION
00009d e0e0      	LDI  R30,__GPIOR0_INIT
00009e bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00009f efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000a0 bfed      	OUT  SPL,R30
0000a1 e2e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000a2 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000a3 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000a4 e0d9      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000a5 940c 01a9 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x900
                 
                 	.CSEG
                 ;/*
                 ; * dice.c
                 ; *
                 ; * Created: 28-Apr-20 4:26:07 PM
                 ; * Author: javie
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;#include "MatrixDice.h"
                 ;
                 ;#define DIN PORTC.0
                 ;#define LOAD PORTC.1
                 ;#define CLK PORTC.2
                 ;
                 ;void MandaMax7219 (unsigned int dato)
                 ; 0000 0012 {
                 
                 	.CSEG
                 _MandaMax7219:
                 ; .FSTART _MandaMax7219
                 ; 0000 0013     unsigned char i;        //Contador para 16b
                 ; 0000 0014     CLK=0;                  //Valores de inicializacion
0000a7 93ba      	ST   -Y,R27
0000a8 93aa      	ST   -Y,R26
0000a9 930a      	ST   -Y,R16
                 ;	dato -> Y+1
                 ;	i -> R16
0000aa 9842      	CBI  0x8,2
                 ; 0000 0015     LOAD=0;                 //Valores de inicializacion
0000ab 9841      	CBI  0x8,1
                 ; 0000 0016     for (i=0;i<16;i++)
0000ac e000      	LDI  R16,LOW(0)
                 _0x8:
0000ad 3100      	CPI  R16,16
0000ae f480      	BRSH _0x9
                 ; 0000 0017     {
                 ; 0000 0018         if ((dato&0x8000)==0)
0000af 81ea      	LDD  R30,Y+2
0000b0 78e0      	ANDI R30,LOW(0x80)
0000b1 f411      	BRNE _0xA
                 ; 0000 0019             DIN=0;
0000b2 9840      	CBI  0x8,0
                 ; 0000 001A         else
0000b3 c001      	RJMP _0xD
                 _0xA:
                 ; 0000 001B             DIN=1;
0000b4 9a40      	SBI  0x8,0
                 ; 0000 001C         CLK=1;
                 _0xD:
0000b5 9a42      	SBI  0x8,2
                 ; 0000 001D         CLK=0;
0000b6 9842      	CBI  0x8,2
                 ; 0000 001E         dato=dato<<1;         //El siguiente bit pasa a ser el mas significativo
0000b7 81e9      	LDD  R30,Y+1
0000b8 81fa      	LDD  R31,Y+1+1
0000b9 0fee      	LSL  R30
0000ba 1fff      	ROL  R31
0000bb 83e9      	STD  Y+1,R30
0000bc 83fa      	STD  Y+1+1,R31
                 ; 0000 001F     }
0000bd 5f0f      	SUBI R16,-1
0000be cfee      	RJMP _0x8
                 _0x9:
                 ; 0000 0020     LOAD=1;
0000bf 9a41      	SBI  0x8,1
                 ; 0000 0021     LOAD=0;
0000c0 9841      	CBI  0x8,1
                 ; 0000 0022 }
0000c1 8108      	LDD  R16,Y+0
0000c2 c089      	RJMP _0x2080003
                 ; .FEND
                 ;
                 ;void ConfiguraMax(void)
                 ; 0000 0025 {
                 _ConfiguraMax:
                 ; .FSTART _ConfiguraMax
                 ; 0000 0026     DDRC=0x07;              //Salidas en PC0,PC1,PC2
0000c3 e0e7      	LDI  R30,LOW(7)
0000c4 b9e7      	OUT  0x7,R30
                 ; 0000 0027     MandaMax7219(0x0900);    //Mando a 0x09 un 0x00 (Decode Mode)
0000c5 e0a0      	LDI  R26,LOW(2304)
0000c6 e0b9      	LDI  R27,HIGH(2304)
0000c7 dfdf      	RCALL _MandaMax7219
                 ; 0000 0028     MandaMax7219(0x0A08);    //Mando a 0x0A un 0x08 (Decode Mode)
0000c8 e0a8      	LDI  R26,LOW(2568)
0000c9 e0ba      	LDI  R27,HIGH(2568)
0000ca dfdc      	RCALL _MandaMax7219
                 ; 0000 0029     MandaMax7219(0x0B07);    //Mando a 0x0B un 0x07 (Decode Mode)
0000cb e0a7      	LDI  R26,LOW(2823)
0000cc e0bb      	LDI  R27,HIGH(2823)
0000cd dfd9      	RCALL _MandaMax7219
                 ; 0000 002A     MandaMax7219(0x0C01);    //Mando a 0x01 un 0x01 (Decode Mode)
0000ce e0a1      	LDI  R26,LOW(3073)
0000cf e0bc      	LDI  R27,HIGH(3073)
0000d0 dfd6      	RCALL _MandaMax7219
                 ; 0000 002B     MandaMax7219(0x0F00);    //Mando a 0x0F un 0x00 (Decode Mode)
0000d1 e0a0      	LDI  R26,LOW(3840)
0000d2 e0bf      	LDI  R27,HIGH(3840)
0000d3 c0d3      	RJMP _0x2080002
                 ; 0000 002C }
                 ; .FEND
                 ;
                 ;void Dice1(char n)
                 ; 0000 002F {
                 _Dice1:
                 ; .FSTART _Dice1
                 ; 0000 0030     //    Enviamos la columna y el valor de cada renglon
                 ; 0000 0031     MandaMax7219(0x0100|Dice[n-1][7]);
0000d4 93aa      	ST   -Y,R26
                 ;	n -> Y+0
0000d5 940e 0233 	CALL SUBOPT_0x0
0000d7 9637      	ADIW R30,7
0000d8 940e 023b 	CALL SUBOPT_0x1
                 ; 0000 0032     MandaMax7219(0x0200|Dice[n-1][6]);
0000da 940e 0233 	CALL SUBOPT_0x0
0000dc 9636      	ADIW R30,6
0000dd 940e 0241 	CALL SUBOPT_0x2
                 ; 0000 0033     MandaMax7219(0x0300|Dice[n-1][5]);
0000df 940e 0233 	CALL SUBOPT_0x0
0000e1 9635      	ADIW R30,5
0000e2 940e 0247 	CALL SUBOPT_0x3
                 ; 0000 0034     MandaMax7219(0x0400|Dice[n-1][4]);
0000e4 940e 0233 	CALL SUBOPT_0x0
0000e6 9634      	ADIW R30,4
0000e7 91e4      	LPM  R30,Z
0000e8 e0f0      	LDI  R31,0
0000e9 60f4      	ORI  R31,HIGH(0x400)
0000ea 940e 024d 	CALL SUBOPT_0x4
                 ; 0000 0035     MandaMax7219(0x0500|Dice[n-1][3]);
0000ec 9633      	ADIW R30,3
0000ed 91e4      	LPM  R30,Z
0000ee e0f0      	LDI  R31,0
0000ef 60f5      	ORI  R31,HIGH(0x500)
0000f0 940e 024d 	CALL SUBOPT_0x4
                 ; 0000 0036     MandaMax7219(0x0600|Dice[n-1][2]);
0000f2 940e 0251 	CALL SUBOPT_0x5
0000f4 940e 024d 	CALL SUBOPT_0x4
                 ; 0000 0037     MandaMax7219(0x0700|Dice[n-1][1]);
0000f6 940e 0256 	CALL SUBOPT_0x6
0000f8 940e 024d 	CALL SUBOPT_0x4
                 ; 0000 0038     MandaMax7219(0x0800|Dice[n-1][0]);
0000fa 91e4      	LPM  R30,Z
0000fb e0f0      	LDI  R31,0
0000fc 60f8      	ORI  R31,HIGH(0x800)
0000fd 01df      	MOVW R26,R30
0000fe dfa8      	RCALL _MandaMax7219
                 ; 0000 0039 }
0000ff 9621      	ADIW R28,1
000100 9508      	RET
                 ; .FEND
                 ;
                 ;void Dice2(char n1, char n2)
                 ; 0000 003C {
                 _Dice2:
                 ; .FSTART _Dice2
                 ; 0000 003D     //    Enviamos la columna y el valor de cada renglon
                 ; 0000 003E     MandaMax7219(0x0100|SmallDice[n2-1][2]);
000101 93aa      	ST   -Y,R26
                 ;	n1 -> Y+1
                 ;	n2 -> Y+0
000102 940e 025b 	CALL SUBOPT_0x7
000104 9632      	ADIW R30,2
000105 940e 023b 	CALL SUBOPT_0x1
                 ; 0000 003F     MandaMax7219(0x0200|SmallDice[n2-1][1]);
000107 940e 025b 	CALL SUBOPT_0x7
000109 9631      	ADIW R30,1
00010a 940e 0241 	CALL SUBOPT_0x2
                 ; 0000 0040     MandaMax7219(0x0300|SmallDice[n2-1][0]);
00010c 940e 025b 	CALL SUBOPT_0x7
00010e 940e 0247 	CALL SUBOPT_0x3
                 ; 0000 0041     MandaMax7219(0x0600|(SmallDice[n1-1][2]<<5));
000110 940e 0265 	CALL SUBOPT_0x8
000112 940e 026f 	CALL SUBOPT_0x9
000114 60f6      	ORI  R31,HIGH(0x600)
000115 940e 0276 	CALL SUBOPT_0xA
                 ; 0000 0042     MandaMax7219(0x0700|(SmallDice[n1-1][1]<<5));
000117 940e 027a 	CALL SUBOPT_0xB
000119 60f7      	ORI  R31,HIGH(0x700)
00011a 940e 0276 	CALL SUBOPT_0xA
                 ; 0000 0043     MandaMax7219(0x0800|(SmallDice[n1-1][0]<<5));
00011c 940e 0281 	CALL SUBOPT_0xC
00011e 60f8      	ORI  R31,HIGH(0x800)
00011f 01df      	MOVW R26,R30
000120 df86      	RCALL _MandaMax7219
                 ; 0000 0044 }
000121 c0f8      	RJMP _0x2080001
                 ; .FEND
                 ;
                 ;void Dice3(char n1, char n2, char n3)
                 ; 0000 0047 {
                 _Dice3:
                 ; .FSTART _Dice3
                 ; 0000 0048     //    Enviamos la columna y el valor de cada renglon
                 ; 0000 0049     MandaMax7219(0x0100|SmallDice[n2-1][2]);
000122 93aa      	ST   -Y,R26
                 ;	n1 -> Y+2
                 ;	n2 -> Y+1
                 ;	n3 -> Y+0
000123 940e 0265 	CALL SUBOPT_0x8
000125 9632      	ADIW R30,2
000126 940e 023b 	CALL SUBOPT_0x1
                 ; 0000 004A     MandaMax7219(0x0200|SmallDice[n2-1][1]);
000128 940e 0265 	CALL SUBOPT_0x8
00012a 9631      	ADIW R30,1
00012b 940e 0241 	CALL SUBOPT_0x2
                 ; 0000 004B     MandaMax7219(0x0300|SmallDice[n2-1][0]);
00012d 940e 0265 	CALL SUBOPT_0x8
00012f 940e 0247 	CALL SUBOPT_0x3
                 ; 0000 004C     MandaMax7219(0x0600|SmallDice[n3-1][2]|(SmallDice[n1-1][2]<<5));
000131 940e 025b 	CALL SUBOPT_0x7
000133 940e 0251 	CALL SUBOPT_0x5
000135 940e 0287 	CALL SUBOPT_0xD
000137 940e 026f 	CALL SUBOPT_0x9
000139 940e 0292 	CALL SUBOPT_0xE
                 ; 0000 004D     MandaMax7219(0x0700|SmallDice[n3-1][1]|(SmallDice[n1-1][1]<<5));
00013b 940e 0256 	CALL SUBOPT_0x6
00013d 940e 0287 	CALL SUBOPT_0xD
00013f 940e 027a 	CALL SUBOPT_0xB
000141 940e 0292 	CALL SUBOPT_0xE
                 ; 0000 004E     MandaMax7219(0x0800|SmallDice[n3-1][0]|(SmallDice[n1-1][0]<<5));
000143 91e4      	LPM  R30,Z
000144 e0f0      	LDI  R31,0
000145 60f8      	ORI  R31,HIGH(0x800)
000146 940e 0287 	CALL SUBOPT_0xD
000148 940e 0281 	CALL SUBOPT_0xC
00014a 940e 0298 	CALL SUBOPT_0xF
                 ; 0000 004F }
                 _0x2080003:
00014c 9623      	ADIW R28,3
00014d 9508      	RET
                 ; .FEND
                 ;
                 ;void Dice4(char n1, char n2, char n3, char n4)
                 ; 0000 0052 {
                 _Dice4:
                 ; .FSTART _Dice4
                 ; 0000 0053     //    Enviamos la columna y el valor de cada renglon
                 ; 0000 0054     MandaMax7219(0x0100|SmallDice[n2-1][2]|(SmallDice[n4-1][2]<<5));
00014e 93aa      	ST   -Y,R26
                 ;	n1 -> Y+3
                 ;	n2 -> Y+2
                 ;	n3 -> Y+1
                 ;	n4 -> Y+0
00014f 940e 029d 	CALL SUBOPT_0x10
000151 9632      	ADIW R30,2
000152 91e4      	LPM  R30,Z
000153 e0f0      	LDI  R31,0
000154 60f1      	ORI  R31,HIGH(0x100)
000155 01bf      	MOVW R22,R30
000156 940e 025b 	CALL SUBOPT_0x7
000158 940e 026f 	CALL SUBOPT_0x9
00015a 940e 0298 	CALL SUBOPT_0xF
                 ; 0000 0055     MandaMax7219(0x0200|SmallDice[n2-1][1]|(SmallDice[n4-1][1]<<5));
00015c 940e 029d 	CALL SUBOPT_0x10
00015e 9631      	ADIW R30,1
00015f 91e4      	LPM  R30,Z
000160 e0f0      	LDI  R31,0
000161 60f2      	ORI  R31,HIGH(0x200)
000162 01bf      	MOVW R22,R30
000163 940e 025b 	CALL SUBOPT_0x7
000165 940e 027a 	CALL SUBOPT_0xB
000167 940e 0298 	CALL SUBOPT_0xF
                 ; 0000 0056     MandaMax7219(0x0300|SmallDice[n2-1][0]|(SmallDice[n4-1][0]<<5));
000169 940e 029d 	CALL SUBOPT_0x10
00016b 91e4      	LPM  R30,Z
00016c e0f0      	LDI  R31,0
00016d 60f3      	ORI  R31,HIGH(0x300)
00016e 01bf      	MOVW R22,R30
00016f 940e 025b 	CALL SUBOPT_0x7
000171 940e 0281 	CALL SUBOPT_0xC
000173 940e 02a7 	CALL SUBOPT_0x11
                 ; 0000 0057     MandaMax7219(0x0600|SmallDice[n3-1][2]|(SmallDice[n1-1][2]<<5));
000175 940e 0251 	CALL SUBOPT_0x5
000177 940e 02aa 	CALL SUBOPT_0x12
000179 940e 026f 	CALL SUBOPT_0x9
00017b 940e 02a7 	CALL SUBOPT_0x11
                 ; 0000 0058     MandaMax7219(0x0700|SmallDice[n3-1][1]|(SmallDice[n1-1][1]<<5));
00017d 940e 0256 	CALL SUBOPT_0x6
00017f 940e 02aa 	CALL SUBOPT_0x12
000181 940e 027a 	CALL SUBOPT_0xB
000183 940e 02a7 	CALL SUBOPT_0x11
                 ; 0000 0059     MandaMax7219(0x0800|SmallDice[n3-1][0]|(SmallDice[n1-1][0]<<5));
000185 91e4      	LPM  R30,Z
000186 e0f0      	LDI  R31,0
000187 60f8      	ORI  R31,HIGH(0x800)
000188 940e 02aa 	CALL SUBOPT_0x12
00018a 940e 0281 	CALL SUBOPT_0xC
00018c 940e 0298 	CALL SUBOPT_0xF
                 ; 0000 005A }
00018e 9624      	ADIW R28,4
00018f 9508      	RET
                 ; .FEND
                 ;
                 ;void clear(){
                 ; 0000 005C void clear(){
                 _clear:
                 ; .FSTART _clear
                 ; 0000 005D     MandaMax7219(0x0100);
000190 e0a0      	LDI  R26,LOW(256)
000191 e0b1      	LDI  R27,HIGH(256)
000192 df14      	RCALL _MandaMax7219
                 ; 0000 005E     MandaMax7219(0x0200);
000193 e0a0      	LDI  R26,LOW(512)
000194 e0b2      	LDI  R27,HIGH(512)
000195 df11      	RCALL _MandaMax7219
                 ; 0000 005F     MandaMax7219(0x0300);
000196 e0a0      	LDI  R26,LOW(768)
000197 e0b3      	LDI  R27,HIGH(768)
000198 df0e      	RCALL _MandaMax7219
                 ; 0000 0060     MandaMax7219(0x0400);
000199 e0a0      	LDI  R26,LOW(1024)
00019a e0b4      	LDI  R27,HIGH(1024)
00019b df0b      	RCALL _MandaMax7219
                 ; 0000 0061     MandaMax7219(0x0500);
00019c e0a0      	LDI  R26,LOW(1280)
00019d e0b5      	LDI  R27,HIGH(1280)
00019e df08      	RCALL _MandaMax7219
                 ; 0000 0062     MandaMax7219(0x0600);
00019f e0a0      	LDI  R26,LOW(1536)
0001a0 e0b6      	LDI  R27,HIGH(1536)
0001a1 df05      	RCALL _MandaMax7219
                 ; 0000 0063     MandaMax7219(0x0700);
0001a2 e0a0      	LDI  R26,LOW(1792)
0001a3 e0b7      	LDI  R27,HIGH(1792)
0001a4 df02      	RCALL _MandaMax7219
                 ; 0000 0064     MandaMax7219(0x0800);
0001a5 e0a0      	LDI  R26,LOW(2048)
0001a6 e0b8      	LDI  R27,HIGH(2048)
                 _0x2080002:
0001a7 deff      	RCALL _MandaMax7219
                 ; 0000 0065 }
0001a8 9508      	RET
                 ; .FEND
                 ;
                 ;char mode, n1, n2, n3, n4;
                 ;void main(void)
                 ; 0000 0069 {
                 _main:
                 ; .FSTART _main
                 ; 0000 006A PORTD=0x03;     //init buttons
0001a9 e0e3      	LDI  R30,LOW(3)
0001aa b9eb      	OUT  0xB,R30
                 ; 0000 006B TCCR0B=0x01;    //init timer
0001ab e0e1      	LDI  R30,LOW(1)
0001ac bde5      	OUT  0x25,R30
                 ; 0000 006C mode=0;
0001ad e0e0      	LDI  R30,LOW(0)
0001ae 93e0 0900 	STS  _mode,R30
                 ; 0000 006D ConfiguraMax();
0001b0 df12      	RCALL _ConfiguraMax
                 ; 0000 006E clear();
0001b1 dfde      	RCALL _clear
                 ; 0000 006F while (1)
                 _0x18:
                 ; 0000 0070     {
                 ; 0000 0071     // Please write your application code here
                 ; 0000 0072         if(!PIND.0){ // 1 Dice
0001b2 9948      	SBIC 0x9,0
0001b3 c04a      	RJMP _0x1B
                 ; 0000 0073             clear();
0001b4 dfdb      	RCALL _clear
                 ; 0000 0074             if(mode==0){
0001b5 91e0 0900 	LDS  R30,_mode
0001b7 30e0      	CPI  R30,0
0001b8 f431      	BRNE _0x1C
                 ; 0000 0075                 srand(TCNT0);
0001b9 940e 02b5 	CALL SUBOPT_0x13
                 ; 0000 0076                 n1 = rand()%6+1;
                 ; 0000 0077                 Dice1(n1);
0001bb 91a0 0901 	LDS  R26,_n1
0001bd df16      	RCALL _Dice1
                 ; 0000 0078             }else if(mode==1){
0001be c03b      	RJMP _0x1D
                 _0x1C:
0001bf 91a0 0900 	LDS  R26,_mode
0001c1 30a1      	CPI  R26,LOW(0x1)
0001c2 f459      	BRNE _0x1E
                 ; 0000 0079                 srand(TCNT0);
0001c3 940e 02b5 	CALL SUBOPT_0x13
                 ; 0000 007A                 n1 = rand()%6+1;
                 ; 0000 007B                 srand(TCNT0);
0001c5 940e 02c5 	CALL SUBOPT_0x14
                 ; 0000 007C                 n2 = rand()%6+1;
                 ; 0000 007D                 Dice2(n1, n2);
0001c7 91e0 0901 	LDS  R30,_n1
0001c9 93ea      	ST   -Y,R30
0001ca 91a0 0902 	LDS  R26,_n2
0001cc df34      	RCALL _Dice2
                 ; 0000 007E             }else if(mode==2){
0001cd c02c      	RJMP _0x1F
                 _0x1E:
0001ce 91a0 0900 	LDS  R26,_mode
0001d0 30a2      	CPI  R26,LOW(0x2)
0001d1 f481      	BRNE _0x20
                 ; 0000 007F                 n1 = rand()%6+1;
0001d2 940e 02d5 	CALL SUBOPT_0x15
0001d4 93e0 0901 	STS  _n1,R30
                 ; 0000 0080                 srand(TCNT0);
0001d6 940e 02c5 	CALL SUBOPT_0x14
                 ; 0000 0081                 n2 = rand()%6+1;
                 ; 0000 0082                 srand(TCNT0);
0001d8 940e 02de 	CALL SUBOPT_0x16
                 ; 0000 0083                 n3 = rand()%6+1;
0001da 93e0 0903 	STS  _n3,R30
                 ; 0000 0084                 Dice3(n1, n2, n3);
0001dc 940e 02e4 	CALL SUBOPT_0x17
0001de 91a0 0903 	LDS  R26,_n3
0001e0 df41      	RCALL _Dice3
                 ; 0000 0085             }else if(mode==3){
0001e1 c018      	RJMP _0x21
                 _0x20:
0001e2 91a0 0900 	LDS  R26,_mode
0001e4 30a3      	CPI  R26,LOW(0x3)
0001e5 f4a1      	BRNE _0x22
                 ; 0000 0086                 srand(TCNT0);
0001e6 940e 02b5 	CALL SUBOPT_0x13
                 ; 0000 0087                 n1 = rand()%6+1;
                 ; 0000 0088                 srand(TCNT0);
0001e8 940e 02c5 	CALL SUBOPT_0x14
                 ; 0000 0089                 n2 = rand()%6+1;
                 ; 0000 008A                 srand(TCNT0);
0001ea 940e 02de 	CALL SUBOPT_0x16
                 ; 0000 008B                 n3 = rand()%6+1;
0001ec 93e0 0903 	STS  _n3,R30
                 ; 0000 008C                 srand(TCNT0);
0001ee 940e 02de 	CALL SUBOPT_0x16
                 ; 0000 008D                 n4 = rand()%6+1;
0001f0 93e0 0904 	STS  _n4,R30
                 ; 0000 008E                 Dice4(n1, n2, n3, n4);
0001f2 940e 02e4 	CALL SUBOPT_0x17
0001f4 91e0 0903 	LDS  R30,_n3
0001f6 93ea      	ST   -Y,R30
0001f7 91a0 0904 	LDS  R26,_n4
0001f9 df54      	RCALL _Dice4
                 ; 0000 008F             }
                 ; 0000 0090             delay_ms(100);
                 _0x22:
                 _0x21:
                 _0x1F:
                 _0x1D:
0001fa e6a4      	LDI  R26,LOW(100)
0001fb e0b0      	LDI  R27,0
0001fc 940e 02f4 	CALL _delay_ms
                 ; 0000 0091         }if(!PIND.1){
                 _0x1B:
0001fe 9949      	SBIC 0x9,1
0001ff c010      	RJMP _0x23
                 ; 0000 0092             mode++;
000200 91e0 0900 	LDS  R30,_mode
000202 5fef      	SUBI R30,-LOW(1)
000203 93e0 0900 	STS  _mode,R30
                 ; 0000 0093             if(mode>3)
000205 91a0 0900 	LDS  R26,_mode
000207 30a4      	CPI  R26,LOW(0x4)
000208 f018      	BRLO _0x24
                 ; 0000 0094                 mode=0;
000209 e0e0      	LDI  R30,LOW(0)
00020a 93e0 0900 	STS  _mode,R30
                 ; 0000 0095             delay_ms(100);
                 _0x24:
00020c e6a4      	LDI  R26,LOW(100)
00020d e0b0      	LDI  R27,0
00020e 940e 02f4 	CALL _delay_ms
                 ; 0000 0096         }
                 ; 0000 0097 
                 ; 0000 0098     }
                 _0x23:
000210 cfa1      	RJMP _0x18
                 ; 0000 0099 }
                 _0x25:
000211 cfff      	RJMP _0x25
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 _srand:
                 ; .FSTART _srand
000212 93ba      	ST   -Y,R27
000213 93aa      	ST   -Y,R26
000214 81e8      	LD   R30,Y
000215 81f9      	LDD  R31,Y+1
000216 940e 0312 	CALL __CWD1
000218 940e 02eb 	CALL SUBOPT_0x18
                 _0x2080001:
00021a 9622      	ADIW R28,2
00021b 9508      	RET
                 ; .FEND
                 _rand:
                 ; .FSTART _rand
00021c 91e0 0905 	LDS  R30,__seed_G100
00021e 91f0 0906 	LDS  R31,__seed_G100+1
000220 9160 0907 	LDS  R22,__seed_G100+2
000222 9170 0908 	LDS  R23,__seed_G100+3
                +
000224 e6ad     +LDI R26 , LOW ( 0x41C64E6D )
000225 e4be     +LDI R27 , HIGH ( 0x41C64E6D )
000226 ec86     +LDI R24 , BYTE3 ( 0x41C64E6D )
000227 e491     +LDI R25 , BYTE4 ( 0x41C64E6D )
                 	__GETD2N 0x41C64E6D
000228 940e 031f 	CALL __MULD12U
                +
00022a 59ee     +SUBI R30 , LOW ( - 30562 )
00022b 48f8     +SBCI R31 , HIGH ( - 30562 )
00022c 4f6f     +SBCI R22 , BYTE3 ( - 30562 )
00022d 4f7f     +SBCI R23 , BYTE4 ( - 30562 )
                 	__ADDD1N 30562
00022e 940e 02eb 	CALL SUBOPT_0x18
000230 01fb      	movw r30,r22
000231 77ff      	andi r31,0x7F
000232 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _mode:
000900           	.BYTE 0x1
                 _n1:
000901           	.BYTE 0x1
                 _n2:
000902           	.BYTE 0x1
                 _n3:
000903           	.BYTE 0x1
                 _n4:
000904           	.BYTE 0x1
                 __seed_G100:
000905           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:32 WORDS
                 SUBOPT_0x0:
000233 81e8      	LD   R30,Y
000234 e0f0      	LDI  R31,0
000235 9731      	SBIW R30,1
000236 940e 030b 	CALL __LSLW3
000238 56e8      	SUBI R30,LOW(-_Dice*2)
000239 4fff      	SBCI R31,HIGH(-_Dice*2)
00023a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
00023b 91e4      	LPM  R30,Z
00023c e0f0      	LDI  R31,0
00023d 60f1      	ORI  R31,HIGH(0x100)
00023e 01df      	MOVW R26,R30
00023f 940c 00a7 	JMP  _MandaMax7219
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
000241 91e4      	LPM  R30,Z
000242 e0f0      	LDI  R31,0
000243 60f2      	ORI  R31,HIGH(0x200)
000244 01df      	MOVW R26,R30
000245 940c 00a7 	JMP  _MandaMax7219
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
000247 91e4      	LPM  R30,Z
000248 e0f0      	LDI  R31,0
000249 60f3      	ORI  R31,HIGH(0x300)
00024a 01df      	MOVW R26,R30
00024b 940c 00a7 	JMP  _MandaMax7219
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
00024d 01df      	MOVW R26,R30
00024e 940e 00a7 	CALL _MandaMax7219
000250 cfe2      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000251 9632      	ADIW R30,2
000252 91e4      	LPM  R30,Z
000253 e0f0      	LDI  R31,0
000254 60f6      	ORI  R31,HIGH(0x600)
000255 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000256 9631      	ADIW R30,1
000257 91e4      	LPM  R30,Z
000258 e0f0      	LDI  R31,0
000259 60f7      	ORI  R31,HIGH(0x700)
00025a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:53 WORDS
                 SUBOPT_0x7:
00025b 81e8      	LD   R30,Y
00025c e0f0      	LDI  R31,0
00025d 9731      	SBIW R30,1
00025e e0a3      	LDI  R26,LOW(3)
00025f e0b0      	LDI  R27,HIGH(3)
000260 940e 0317 	CALL __MULW12U
000262 53e8      	SUBI R30,LOW(-_SmallDice*2)
000263 4fff      	SBCI R31,HIGH(-_SmallDice*2)
000264 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:53 WORDS
                 SUBOPT_0x8:
000265 81e9      	LDD  R30,Y+1
000266 e0f0      	LDI  R31,0
000267 9731      	SBIW R30,1
000268 e0a3      	LDI  R26,LOW(3)
000269 e0b0      	LDI  R27,HIGH(3)
00026a 940e 0317 	CALL __MULW12U
00026c 53e8      	SUBI R30,LOW(-_SmallDice*2)
00026d 4fff      	SBCI R31,HIGH(-_SmallDice*2)
00026e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x9:
00026f 9632      	ADIW R30,2
000270 91a4      	LPM  R26,Z
000271 e0b0      	LDI  R27,0
000272 e0e5      	LDI  R30,LOW(5)
000273 940e 0302 	CALL __LSLW12
000275 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xA:
000276 01df      	MOVW R26,R30
000277 940e 00a7 	CALL _MandaMax7219
000279 cfeb      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xB:
00027a 9631      	ADIW R30,1
00027b 91a4      	LPM  R26,Z
00027c e0b0      	LDI  R27,0
00027d e0e5      	LDI  R30,LOW(5)
00027e 940e 0302 	CALL __LSLW12
000280 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xC:
000281 91a4      	LPM  R26,Z
000282 e0b0      	LDI  R27,0
000283 e0e5      	LDI  R30,LOW(5)
000284 940e 0302 	CALL __LSLW12
000286 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xD:
000287 01bf      	MOVW R22,R30
000288 81ea      	LDD  R30,Y+2
000289 e0f0      	LDI  R31,0
00028a 9731      	SBIW R30,1
00028b e0a3      	LDI  R26,LOW(3)
00028c e0b0      	LDI  R27,HIGH(3)
00028d 940e 0317 	CALL __MULW12U
00028f 53e8      	SUBI R30,LOW(-_SmallDice*2)
000290 4fff      	SBCI R31,HIGH(-_SmallDice*2)
000291 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xE:
000292 2be6      	OR   R30,R22
000293 2bf7      	OR   R31,R23
000294 01df      	MOVW R26,R30
000295 940e 00a7 	CALL _MandaMax7219
000297 cfc3      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xF:
000298 2be6      	OR   R30,R22
000299 2bf7      	OR   R31,R23
00029a 01df      	MOVW R26,R30
00029b 940c 00a7 	JMP  _MandaMax7219
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x10:
00029d 81ea      	LDD  R30,Y+2
00029e e0f0      	LDI  R31,0
00029f 9731      	SBIW R30,1
0002a0 e0a3      	LDI  R26,LOW(3)
0002a1 e0b0      	LDI  R27,HIGH(3)
0002a2 940e 0317 	CALL __MULW12U
0002a4 53e8      	SUBI R30,LOW(-_SmallDice*2)
0002a5 4fff      	SBCI R31,HIGH(-_SmallDice*2)
0002a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
0002a7 2be6      	OR   R30,R22
0002a8 2bf7      	OR   R31,R23
0002a9 cfcc      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x12:
0002aa 01bf      	MOVW R22,R30
0002ab 81eb      	LDD  R30,Y+3
0002ac e0f0      	LDI  R31,0
0002ad 9731      	SBIW R30,1
0002ae e0a3      	LDI  R26,LOW(3)
0002af e0b0      	LDI  R27,HIGH(3)
0002b0 940e 0317 	CALL __MULW12U
0002b2 53e8      	SUBI R30,LOW(-_SmallDice*2)
0002b3 4fff      	SBCI R31,HIGH(-_SmallDice*2)
0002b4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x13:
0002b5 b5e6      	IN   R30,0x26
0002b6 e0f0      	LDI  R31,0
0002b7 01df      	MOVW R26,R30
0002b8 940e 0212 	CALL _srand
0002ba 940e 021c 	CALL _rand
0002bc 01df      	MOVW R26,R30
0002bd e0e6      	LDI  R30,LOW(6)
0002be e0f0      	LDI  R31,HIGH(6)
0002bf 940e 0352 	CALL __MODW21
0002c1 5fef      	SUBI R30,-LOW(1)
0002c2 93e0 0901 	STS  _n1,R30
0002c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x14:
0002c5 b5e6      	IN   R30,0x26
0002c6 e0f0      	LDI  R31,0
0002c7 01df      	MOVW R26,R30
0002c8 940e 0212 	CALL _srand
0002ca 940e 021c 	CALL _rand
0002cc 01df      	MOVW R26,R30
0002cd e0e6      	LDI  R30,LOW(6)
0002ce e0f0      	LDI  R31,HIGH(6)
0002cf 940e 0352 	CALL __MODW21
0002d1 5fef      	SUBI R30,-LOW(1)
0002d2 93e0 0902 	STS  _n2,R30
0002d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x15:
0002d5 940e 021c 	CALL _rand
0002d7 01df      	MOVW R26,R30
0002d8 e0e6      	LDI  R30,LOW(6)
0002d9 e0f0      	LDI  R31,HIGH(6)
0002da 940e 0352 	CALL __MODW21
0002dc 5fef      	SUBI R30,-LOW(1)
0002dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x16:
0002de b5e6      	IN   R30,0x26
0002df e0f0      	LDI  R31,0
0002e0 01df      	MOVW R26,R30
0002e1 940e 0212 	CALL _srand
0002e3 cff1      	RJMP SUBOPT_0x15
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
0002e4 91e0 0901 	LDS  R30,_n1
0002e6 93ea      	ST   -Y,R30
0002e7 91e0 0902 	LDS  R30,_n2
0002e9 93ea      	ST   -Y,R30
0002ea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x18:
0002eb 93e0 0905 	STS  __seed_G100,R30
0002ed 93f0 0906 	STS  __seed_G100+1,R31
0002ef 9360 0907 	STS  __seed_G100+2,R22
0002f1 9370 0908 	STS  __seed_G100+3,R23
0002f3 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0002f4 9610      	adiw r26,0
0002f5 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002f6 ed80     +LDI R24 , LOW ( 0x7D0 )
0002f7 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0002f8 9701     +SBIW R24 , 1
0002f9 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0002fa 95a8      	wdr
0002fb 9711      	sbiw r26,1
0002fc f7c9      	brne __delay_ms0
                 __delay_ms1:
0002fd 9508      	ret
                 
                 __ANEGW1:
0002fe 95f1      	NEG  R31
0002ff 95e1      	NEG  R30
000300 40f0      	SBCI R31,0
000301 9508      	RET
                 
                 __LSLW12:
000302 23ee      	TST  R30
000303 2e0e      	MOV  R0,R30
000304 01fd      	MOVW R30,R26
000305 f021      	BREQ __LSLW12R
                 __LSLW12L:
000306 0fee      	LSL  R30
000307 1fff      	ROL  R31
000308 940a      	DEC  R0
000309 f7e1      	BRNE __LSLW12L
                 __LSLW12R:
00030a 9508      	RET
                 
                 __LSLW3:
00030b 0fee      	LSL  R30
00030c 1fff      	ROL  R31
                 __LSLW2:
00030d 0fee      	LSL  R30
00030e 1fff      	ROL  R31
00030f 0fee      	LSL  R30
000310 1fff      	ROL  R31
000311 9508      	RET
                 
                 __CWD1:
000312 2f6f      	MOV  R22,R31
000313 0f66      	ADD  R22,R22
000314 0b66      	SBC  R22,R22
000315 2f76      	MOV  R23,R22
000316 9508      	RET
                 
                 __MULW12U:
000317 9ffa      	MUL  R31,R26
000318 2df0      	MOV  R31,R0
000319 9feb      	MUL  R30,R27
00031a 0df0      	ADD  R31,R0
00031b 9fea      	MUL  R30,R26
00031c 2de0      	MOV  R30,R0
00031d 0df1      	ADD  R31,R1
00031e 9508      	RET
                 
                 __MULD12U:
00031f 9f7a      	MUL  R23,R26
000320 2d70      	MOV  R23,R0
000321 9f6b      	MUL  R22,R27
000322 0d70      	ADD  R23,R0
000323 9ff8      	MUL  R31,R24
000324 0d70      	ADD  R23,R0
000325 9fe9      	MUL  R30,R25
000326 0d70      	ADD  R23,R0
000327 9f6a      	MUL  R22,R26
000328 2d60      	MOV  R22,R0
000329 0d71      	ADD  R23,R1
00032a 9ffb      	MUL  R31,R27
00032b 0d60      	ADD  R22,R0
00032c 1d71      	ADC  R23,R1
00032d 9fe8      	MUL  R30,R24
00032e 0d60      	ADD  R22,R0
00032f 1d71      	ADC  R23,R1
000330 2788      	CLR  R24
000331 9ffa      	MUL  R31,R26
000332 2df0      	MOV  R31,R0
000333 0d61      	ADD  R22,R1
000334 1f78      	ADC  R23,R24
000335 9feb      	MUL  R30,R27
000336 0df0      	ADD  R31,R0
000337 1d61      	ADC  R22,R1
000338 1f78      	ADC  R23,R24
000339 9fea      	MUL  R30,R26
00033a 2de0      	MOV  R30,R0
00033b 0df1      	ADD  R31,R1
00033c 1f68      	ADC  R22,R24
00033d 1f78      	ADC  R23,R24
00033e 9508      	RET
                 
                 __DIVW21U:
00033f 2400      	CLR  R0
000340 2411      	CLR  R1
000341 e190      	LDI  R25,16
                 __DIVW21U1:
000342 0faa      	LSL  R26
000343 1fbb      	ROL  R27
000344 1c00      	ROL  R0
000345 1c11      	ROL  R1
000346 1a0e      	SUB  R0,R30
000347 0a1f      	SBC  R1,R31
000348 f418      	BRCC __DIVW21U2
000349 0e0e      	ADD  R0,R30
00034a 1e1f      	ADC  R1,R31
00034b c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00034c 60a1      	SBR  R26,1
                 __DIVW21U3:
00034d 959a      	DEC  R25
00034e f799      	BRNE __DIVW21U1
00034f 01fd      	MOVW R30,R26
000350 01d0      	MOVW R26,R0
000351 9508      	RET
                 
                 __MODW21:
000352 94e8      	CLT
000353 ffb7      	SBRS R27,7
000354 c004      	RJMP __MODW211
000355 95a0      	COM  R26
000356 95b0      	COM  R27
000357 9611      	ADIW R26,1
000358 9468      	SET
                 __MODW211:
000359 fdf7      	SBRC R31,7
00035a dfa3      	RCALL __ANEGW1
00035b dfe3      	RCALL __DIVW21U
00035c 01fd      	MOVW R30,R26
00035d f40e      	BRTC __MODW212
00035e df9f      	RCALL __ANEGW1
                 __MODW212:
00035f 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

AT90USB1286 register use summary:
r0 :  24 r1 :  12 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   5 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:  28 r23:  18 
r24:  18 r25:   7 r26:  76 r27:  36 r28:   5 r29:   1 r30: 155 r31:  81 
x  :   3 y  :  27 z  :  23 
Registers used: 16 out of 35 (45.7%)

AT90USB1286 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   8 add   :  13 
adiw  :  21 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   3 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  12 brpl  :   0 brsh  :   1 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 105 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   5 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   0 cpc   :   0 cpi   :   6 cpse  :   0 dec   :   3 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   3 inc   :   0 jmp   :  43 ld    :   3 ldd   :   9 
ldi   : 101 lds   :  18 lpm   :  39 lsl   :   6 lsr   :   0 mov   :   9 
movw  :  28 mul   :  13 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 
or    :   6 ori   :  16 out   :  10 pop   :   0 push  :   0 rcall :  24 
ret   :  31 reti  :   0 rjmp  :  20 rol   :   8 ror   :   0 sbc   :   2 
sbci  :  10 sbi   :   3 sbic  :   2 sbis  :   0 sbiw  :  11 sbr   :   1 
sbrc  :   1 sbrs  :   1 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  16 std   :   2 sts   :  13 sub   :   1 subi  :  12 
swap  :   0 tst   :   1 wdr   :   1 
Instructions used: 53 out of 117 (45.3%)

AT90USB1286 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006c0   1642     86   1728  131072   1.3%
[.dseg] 0x000100 0x000909      0      9      9    8192   0.1%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 2 warnings
